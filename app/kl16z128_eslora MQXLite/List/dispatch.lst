###############################################################################
#                                                                             #
#     IAR Assembler V8.50.1.245/W32 for ARM 14/May/2020  16:50:57             #
#     Copyright 1999-2020 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\core\M0\dispatch.S#
#           List file     =  C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora MQXLite\List\dispatch.lst#
#           Object file   =  C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora MQXLite\Obj\dispatch.o#
#           Command line  =  -f C:\Users\81901\AppData\Local\Temp\EW505D.tmp  #
#                            (C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\core\M0\dispatch.S #
#                            -OC:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora MQXLite\Obj #
#                            -s+ -M<> -w+ -r                                  #
#                            -LC:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora MQXLite\List #
#                            -cAOM -i -B -t8 --cpu Cortex-M0+ --fpu None      #
#                            -IC:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\compiler\iar\ #
#                            -IC:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\ #
#                            -IC:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\include\ #
#                            -IC:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\config\ #
#                            -IC:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Generated_Code\) #
#                                                                             #
###############################################################################

    1                           /*HEADER**************************************
                                ********************************
    2                           *
    3                           * Copyright (c) 2010-2011 Freescale Semiconduc
                                tor
    4                           * All Rights Reserved
    5                           *
    6                           **********************************************
                                ********************************
    7                           *
    8                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
    9                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   10                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   11                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   12                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   13                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   14                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   15                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   16                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   17                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   18                           * THE POSSIBILITY OF SUCH DAMAGE.
   19                           *
   20                           **********************************************
                                ********************************
   21                           *
   22                           * $FileName: dispatch.S$
   23                           * $Version : 3.8.25.3$
   24                           * $Date    : Dec-2-2011$
   25                           *
   26                           * Comments:
   27                           *
   28                           *   This assembler file contains functions for
                                 task scheduling
   29                           *
   30                           *END******************************************
                                *******************************/
   31                           
   32                           #include "asm_mac.h"
    1                           /**HEADER*************************************
                                ********************************
    2                           *
    3                           * Copyright (c) 2008 Freescale Semiconductor;
    4                           * All Rights Reserved
    5                           *
    6                           * Copyright (c) 2008 Embedded Access
                                 Inc.;
    7                           * All Rights Reserved
    8                           *
    9                           **********************************************
                                ********************************
   10                           *
   11                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
   12                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   13                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   14                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   15                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   16                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   17                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   18                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   19                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   20                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   21                           * THE POSSIBILITY OF SUCH DAMAGE.
   22                           *
   23                           **********************************************
                                ********************************
   24                           *
   25                           * $FileName: asm_mac.h$
   26                           * $Version : 3.8.6.0$
   27                           * $Date    : Oct-3-2012$
   28                           *
   29                           * Comments:
   30                           *   This file contains macros used by the IAR
                                 ARM assembler
   31                           *
   32                           *END******************************************
                                *******************************/
   33                           
   34                           #ifndef __asm_mac_h__
   35                           #define __asm_mac_h__   1
   36                           
   37                           #define ASM_PREFIX(x)   x
   38                           
   39                           #if defined(__IASMARM__)
   40                           #define ASM_EXTERN(label)       EXTERN 
                                 label
   41                           #define ASM_PUBLIC(label)       PUBLIC
                                 label
   42                           #elif defined(__GNUC__)
   43                           #define ASM_EXTERN(label)
   44                           #define ASM_PUBLIC(label)       .GLOBAL
                                 label
   45                           #endif
   46                           
   47                           #if defined(__IASMARM__)
   48                           #define ASM_LABEL(label)         label
   49                           #define ASM_EQUATE(label, value) label   EQU 
                                 value
   50                           #define ASM_SET(label, value)    ASM_LABEL(lab
                                el) SET value
   51                           #elif defined(__GNUC__)
   52                           #define ASM_LABEL(label)         label:
   53                           #define ASM_EQUATE(label, value) .EQU label,
                                 value
   54                           #define ASM_SET(label, value)    .SET
                                 ASM_LABEL(label), value
   55                           #endif
   56                           
   57                           #if defined(__IASMARM__)
   58                           #define ASM_ALIGN(value)        ALIGNROM 
                                 value/4
   59                           #elif defined(__GNUC__)
   60                           #define ASM_ALIGN(value)        .ALIGN
                                 value/4
   61                           #endif
   62                           
   63                           #define ASM_CONST16(value)      DC16
                                 value
   64                           #define ASM_CONST32(value)      DC32
                                 value
   65                           
   66                           #define ASM_LABEL_CONST32(label, value)
                                 ASM_LABEL(label) DC32 value
   67                           
   68                           #if defined(__IASMARM__)
   69                           #define ASM_CODE_SECTION(name)         
                                 SECTION name : CODE (4)
   70                           #define ASM_CODE_SECTION_NOOPT(name)   
                                 SECTION name : CODE (4) : ROOT
   71                           #define ASM_DATA_SECTION(name)         
                                 SECTION name : DATA (4)
   72                           #define ASM_END                        
                                 END
   73                           #elif defined(__GNUC__)
   74                           #define ASM_CODE_SECTION(name)         
                                 .SECTION name
   75                           #define ASM_CODE_SECTION_NOOPT(name)   
                                 .SECTION name
   76                           #define ASM_DATA_SECTION(name)         
                                 .SECTION name
   77                           #define ASM_END
   78                           #endif
   79                           
   80                           #define ASM_COMP_SPECIFIC_DIRECTIVES
   81                           
   82                           
   83                           #if defined(__IASMARM__)
   84                           /* CFI annotations for public symbols called
                                 from C code */
   85                           
   86                             CFI Names CFINames0
   87                             CFI StackFrame CFA R13 DATA
   88                             CFI Resource R0:32, R1:32, R2:32, R3:32,
                                 R4:32, R5:32, R6:32, R7:32
   89                             CFI Resource R8:32, R9:32, R10:32, R11:32,
                                 R12:32, R13:32, R14:32
   90                             CFI EndNames         CFINames0
   91                           
   92                             CFI Common CFICommon0 Using        
                                 CFINames0
   93                             CFI CodeAlign 2
   94                             CFI DataAlign 4
   95                             CFI ReturnAddress R14 CODE
   96                             CFI CFA R13+0
   97                             CFI R0 SameValue
   98                             CFI R1 SameValue
   99                             CFI R2 SameValue
  100                             CFI R3 SameValue
  101                             CFI R4 SameValue
  102                             CFI R5 SameValue
  103                             CFI R6 SameValue
  104                             CFI R7 SameValue
  105                             CFI R8 SameValue
  106                             CFI R9 SameValue
  107                             CFI R10 SameValue
  108                             CFI R11 SameValue
  109                             CFI R12 SameValue
  110                             CFI R14 SameValue
  111                             CFI EndCommon CFICommon0
  112                           
  113                           /* Note that these macros should NOT be on the
                                 beggining of line when used
  114                              in assembler code. Prepend allways by at
                                 least one space.
  115                              (was not an issue in EWARM 6.40.x, space
                                 seems to be needed in 6.50.x) */
  116                           #define ASM_PUBLIC_BEGIN(name) CFI Block
                                 CFIBlock_##name Using CFICommon0
  117                           #define ASM_PUBLIC_FUNC(name)  CFI Function
                                 name
  118                           #define ASM_PUBLIC_END(name)   CFI EndBlock
                                 CFIBlock_##name
  119                           #elif defined(__GNUC__)
  120                           #define ASM_PUBLIC_BEGIN(name)
  121                           #define ASM_PUBLIC_FUNC(name)
  122                           #define ASM_PUBLIC_END(name)
  123                           #endif
  124                           
  125                           #endif /* __asm_mac_h__ */
   33                           
   34                           #include "mqx_cnfg.h"
    1                           /*HEADER**************************************
                                *******************************
    2                           *
    3                           * Copyright (c) 2008-2010 Freescale Semiconduc
                                tor;
    4                           * All Rights Reserved
    5                           *
    6                           * Copyright (c) 2004-2008 Embedded Access
                                 Inc.;
    7                           * All Rights Reserved
    8                           *
    9                           * Copyright (c) 1989-2008 ARC International;
   10                           * All Rights Reserved
   11                           *
   12                           **********************************************
                                *****************************
   13                           *
   14                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
   15                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   16                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   17                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   18                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   19                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   20                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   21                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   22                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   23                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   24                           * THE POSSIBILITY OF SUCH DAMAGE.
   25                           *
   26                           **********************************************
                                ****************************
   27                           *
   28                           * $FileName: mqx_cnfg.h$
   29                           * $Version : 3.8.48.0$
   30                           * $Date    : Sep-19-2011$
   31                           *
   32                           * Comments:
   33                           *
   34                           *   This file contains the default configurati
                                on definitions for configuring
   35                           *   the various optional features of MQX.
                                 Individual config. Defines can be
   36                           *   overridden in the "user_config.h"
                                 file.
   37                           *
   38                           *   By default, MQX is configured as
                                 follows:
   39                           *    MQX_ALLOW_TYPED_MEMORY              
                                 1
   40                           *    MQX_COMPONENT_DESTRUCTION           
                                 1
   41                           *    MQX_DEFAULT_TIME_SLICE_IN_TICKS     
                                 0
   42                           *    MQX_EXIT_ENABLED                    
                                 1
   43                           *    MQX_EXTRA_TASK_STACK_ENABLE         
                                 1
   44                           *    MQX_HAS_TIME_SLICE                  
                                 1
   45                           *    MQX_CHECK_ERRORS                    
                                 1
   46                           *    MQX_CHECK_MEMORY_ALLOCATION_ERRORS  
                                 1
   47                           *    MQX_CHECK_VALIDITY                  
                                 1
   48                           *    MQX_INCLUDE_FLOATING_POINT_IO       
                                 0
   49                           *    MQX_IS_MULTI_PROCESSOR              
                                 1
   50                           *    MQX_KERNEL_LOGGING                  
                                 1
   51                           *    MQX_LWLOG_TIME_STAMP_IN_TICKS       
                                 1
   52                           *    MQX_MEMORY_FREE_LIST_SORTED         
                                 1
   53                           *    MQX_MONITOR_STACK                   
                                 1
   54                           *    MQX_MUTEX_HAS_POLLING               
                                 1
   55                           *    MQX_PROFILING_ENABLE                
                                 0
   56                           *    MQX_ROM_VECTORS                     
                                 0
   57                           *    MQX_RUN_TIME_ERR_CHECK_ENABLE       
                                 0
   58                           *    MQX_TASK_CREATION_BLOCKS            
                                 1
   59                           *    MQX_TASK_DESTRUCTION                
                                 1
   60                           *    MQX_TIMER_USES_TICKS_ONLY           
                                 0
   61                           *    MQX_USE_32BIT_MESSAGE_QIDS          
                                 0
   62                           *    MQX_USE_32BIT_TYPES                 
                                 0
   63                           *    MQX_USE_EVENTS                      
                                 1
   64                           *    MQX_USE_IDLE_TASK                   
                                 1
   65                           *    MQX_USE_INLINE_MACROS               
                                 1
   66                           *    MQX_USE_IPC                         
                                 1
   67                           *    MQX_USE_LOGS                        
                                 1
   68                           *    MQX_USE_LWEVENTS                    
                                 1
   69                           *    MQX_USE_LWLOGS                      
                                 1
   70                           *    MQX_USE_LWMEM                       
                                 1
   71                           *    MQX_USE_LWMEM_ALLOCATOR             
                                 0
   72                           *    MQX_USE_LWMSGQ                      
                                 1
   73                           *    MQX_USE_LWTIMER                     
                                 1
   74                           *    MQX_USE_MESSAGES                    
                                 1
   75                           *    MQX_USE_MUTEXES                     
                                 1
   76                           *    MQX_USE_NAME                        
                                 1
   77                           *    MQX_USE_PARTITIONS                  
                                 1
   78                           *    MQX_USE_SEMAPHORES                  
                                 1
   79                           *    MQX_USE_SW_WATCHDOGS                
                                 1
   80                           *    MQX_USE_TIMER                       
                                 1
   81                           *    MQX_VERIFY_KERNEL_DATA              
                                 1
   82                           *    MQX_ENABLE_USER_MODE                
                                 0
   83                           *    MQX_ENABLE_LOW_POWER                
                                 0
   84                           *
   85                           *END******************************************
                                ******************************/
   86                           
   87                           #ifndef __mqx_cnfg_h__
   88                           #define __mqx_cnfg_h__
   89                           
   90                           /*
   91                            * get user configuration constants.
   92                            */
   93                           
   94                           #include "user_config.h"
    1                           /** ##########################################
                                #########################
    2                           **     THIS COMPONENT MODULE IS GENERATED BY
                                 THE TOOL. DO NOT MODIFY IT.
    3                           **     Filename    : user_config.h
    4                           **     Project     : ProcessorExpert
    5                           **     Processor   : MKL26Z128VLL4
    6                           **     Version     : Component 01.106, Driver
                                 01.00, CPU db: 3.00.000
    7                           **     Compiler    : IAR ARM C Compiler
    8                           **     Date/Time   : 2014-09-30, 11:38, #
                                 CodeGen: 148
    9                           **
   10                           **     Copyright : 1997 - 2013 Freescale
                                 Semiconductor, Inc. All Rights Reserved.
   11                           **     SOURCE DISTRIBUTION PERMISSIBLE as
                                 directed in End User License Agreement.
   12                           **
   13                           **     http      : www.freescale.com
   14                           **     mail      : support@freescale.com
   15                           ** ###########################################
                                ########################*/
   16                           /*!
   17                           ** @file user_config.h
   18                           ** @version 01.00
   19                           */
   20                           /*!
   21                           **  @addtogroup user_config_module user_config
                                 module documentation
   22                           **  @{
   23                           */
   24                           #ifndef __user_config_h__
   25                           #define __user_config_h__
   26                           
   27                           /* MQX Lite version number */
   28                           #define MQX_LITE_VERSION              
                                 "V1.0.1"
   29                           #define MQX_LITE_VERSION_NUMBER       
                                 0x01000001
   30                           
   31                           /* Selected MQX CPU type */
   32                           #define MQX_CPU              PSP_CPU_NUM(PSP_C
                                PU_ARCH_ARM_CORTEX_M0P, 0x00, 0x00)
   33                           
   34                           /* Component settings */
   35                           #define MQX_USE_SEMAPHORES            
                                 1
   36                           #define MQX_USE_LWEVENTS              
                                 1
   37                           #define MQX_USE_MUTEXES               
                                 1
   38                           #define MQX_USE_LWMSGQ                
                                 1
   39                           #define MQX_USE_LWTIMER               
                                 1
   40                           #define MQX_KERNEL_LOGGING            
                                 0
   41                           #define MQX_USE_LWLOGS                
                                 0
   42                           #define MQX_USE_LOGS                  
                                 0
   43                           
   44                           /* Idle task settings */
   45                           #define MQX_USE_IDLE_TASK             
                                 1
   46                           #define MQX_ENABLE_LOW_POWER          
                                 0
   47                           #define MQX_ENABLE_IDLE_LOOP          
                                 0
   48                           
   49                           
   50                           /* Interrupt settings */
   51                           #define MQX_ROM_VECTORS               
                                 1
   52                           #define MQX_INTERRUPT_STACK_SIZE      
                                 512
   53                           
   54                           /* PSP Settings */
   55                           #define PSP_HAS_FPU                   
                                 0
   56                           #define PSP_MAXIMUM_INTERRUPT_VECTORS 
                                 (sizeof(__vect_table)/sizeof(tIsrFunc))
   57                           
   58                           
   59                           /* Additional settings can be defined in the
                                 property User Definitions > Definitions of the
                                 MQXLite RTOS component */
   60                           
   61                           #endif /* __user_config_h__ */
   62                           
   63                           /*!
   64                           ** @}
   65                           */
   66                           /*
   67                           ** ###########################################
                                ########################
   68                           **
   69                           **     This file was created by Processor
                                 Expert 10.3 [05.09]
   70                           **     for the Freescale Kinetis series of
                                 microcontrollers.
   71                           **
   72                           ** ###########################################
                                ########################
   73                           */
   95                           
   96                           #ifdef MQX_LITE_VERSION_NUMBER
   97                           #include "mqxlite_cnfg.h"
    1                           /*HEADER**************************************
                                *******************************
    2                           *
    3                           * Copyright (c) 2008-2010 Freescale Semiconduc
                                tor;
    4                           * All Rights Reserved
    5                           *
    6                           * Copyright (c) 2004-2008 Embedded Access
                                 Inc.;
    7                           * All Rights Reserved
    8                           *
    9                           * Copyright (c) 1989-2008 ARC International;
   10                           * All Rights Reserved
   11                           *
   12                           **********************************************
                                *****************************
   13                           *
   14                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
   15                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   16                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   17                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   18                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   19                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   20                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   21                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   22                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   23                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   24                           * THE POSSIBILITY OF SUCH DAMAGE.
   25                           *
   26                           **********************************************
                                ****************************
   27                           *
   28                           * $FileName: mqxlite_cnfg.h$
   29                           * $Version : 3.8.48.0$
   30                           * $Date    : Sep-19-2011$
   31                           *
   32                           * Comments:
   33                           *
   34                           *   This file contains the default configurati
                                on definitions for configuring
   35                           *   the various optional features of MQX.
                                 Individual config. Defines can be
   36                           *   overridden in the "user_config.h"
                                 file.
   37                           *
   38                           *   By default, MQX is configured as
                                 follows:
   39                           *    MQX_ALLOW_TYPED_MEMORY              
                                 1
   40                           *    MQX_COMPONENT_DESTRUCTION           
                                 1
   41                           *    MQX_DEFAULT_TIME_SLICE_IN_TICKS     
                                 0
   42                           *    MQX_EXIT_ENABLED                    
                                 1
   43                           *    MQX_EXTRA_TASK_STACK_ENABLE         
                                 0
   44                           *    MQX_HAS_TIME_SLICE                  
                                 0
   45                           *    MQX_CHECK_ERRORS                    
                                 1
   46                           *    MQX_CHECK_MEMORY_ALLOCATION_ERRORS  
                                 1
   47                           *    MQX_CHECK_VALIDITY                  
                                 1
   48                           *    MQX_INCLUDE_FLOATING_POINT_IO       
                                 0
   49                           *    MQX_IS_MULTI_PROCESSOR              
                                 1
   50                           *    MQX_KERNEL_LOGGING                  
                                 1
   51                           *    MQX_LWLOG_TIME_STAMP_IN_TICKS       
                                 1
   52                           *    MQX_MEMORY_FREE_LIST_SORTED         
                                 1
   53                           *    MQX_MONITOR_STACK                   
                                 1
   54                           *    MQX_MUTEX_HAS_POLLING               
                                 1
   55                           *    MQX_PROFILING_ENABLE                
                                 0
   56                           *    MQX_ROM_VECTORS                     
                                 0
   57                           *    MQX_RUN_TIME_ERR_CHECK_ENABLE       
                                 0
   58                           *    MQX_TASK_CREATION_BLOCKS            
                                 1
   59                           *    MQX_TASK_DESTRUCTION                
                                 1
   60                           *    MQX_TIMER_USES_TICKS_ONLY           
                                 0
   61                           *    MQX_USE_32BIT_MESSAGE_QIDS          
                                 0
   62                           *    MQX_USE_32BIT_TYPES                 
                                 0
   63                           *    MQX_USE_EVENTS                      
                                 0
   64                           *    MQX_USE_IDLE_TASK                   
                                 1
   65                           *    MQX_USE_INLINE_MACROS               
                                 1
   66                           *    MQX_USE_IPC                         
                                 0
   67                           *    MQX_USE_LOGS                        
                                 1
   68                           *    MQX_USE_LWEVENTS                    
                                 0
   69                           *    MQX_USE_LWLOGS                      
                                 0
   70                           *    MQX_USE_LWMEM                       
                                 0
   71                           *    MQX_USE_LWMEM_ALLOCATOR             
                                 0
   72                           *    MQX_USE_LWMSGQ                      
                                 1
   73                           *    MQX_USE_LWTIMER                     
                                 1
   74                           *    MQX_USE_MESSAGES                    
                                 1
   75                           *    MQX_USE_MUTEXES                     
                                 1
   76                           *    MQX_USE_NAME                        
                                 1
   77                           *    MQX_USE_PARTITIONS                  
                                 0
   78                           *    MQX_USE_SEMAPHORES                  
                                 0
   79                           *    MQX_USE_SW_WATCHDOGS                
                                 0
   80                           *    MQX_USE_TIMER                       
                                 1
   81                           *    MQX_VERIFY_KERNEL_DATA              
                                 1
   82                           *    MQX_ENABLE_USER_MODE                
                                 0
   83                           *    MQX_ENABLE_LOW_POWER                
                                 0
   84                           *    MQX_ENABLE_IDLE_LOOP                
                                 0
   85                           *
   86                           *END******************************************
                                ******************************/
   87                           
   88                           #ifndef __mqxlite_cnfg_h__
   89                           #define __mqxlite_cnfg_h__
   90                           
   91                           
   92                           /*
   93                            * The main requirement is to define target
                                 processor
   94                            */
   95                           #ifndef MQX_CPU
   96                           #error  You must define target processor in
                                 "user_config.h" (MQX_CPU)
   97                           #endif
   98                           
   99                           /*
  100                            * some setting may be forced by source files
                                 (before including this file)
  101                            */
  102                           #ifdef MQX_FORCE_USE_INLINE_MACROS
  103                           #undef  MQX_USE_INLINE_MACROS
  104                           #define MQX_USE_INLINE_MACROS  MQX_FORCE_USE_I
                                NLINE_MACROS
  105                           #endif
  106                           
  107                           /*
  108                            * When MQX_CHECK_ERRORS is defined as
                                 1,
  109                            * kernel functions will perform error
                                 checking on their parameters.
  110                            */
  111                           #ifndef MQX_CHECK_ERRORS
  112                           #define MQX_CHECK_ERRORS                      
                                          1
  113                           #endif
  114                           
  115                           
  116                           /*
  117                            * When MQX_CHECK_MEMORY_ALLOCATION_ERRORS is
                                 defined as 1,
  118                            * kernel functions will check all memory
                                 allocations for errors.
  119                            * The functions will verify that the memory
                                 allocation
  120                            * was successful.
  121                            */
  122                           #ifndef MQX_CHECK_MEMORY_ALLOCATION_ERRORS
  123                           #define MQX_CHECK_MEMORY_ALLOCATION_ERRORS    
                                          0
  124                           #endif
  125                           
  126                           
  127                           /*
  128                            * When MQX_CHECK_VALIDITY is defined as
                                 1,
  129                            * kernel functions will check the the
                                 VALIDITY fields of structures
  130                            * as they are accessed.
  131                            */
  132                           #ifndef MQX_CHECK_VALIDITY
  133                           #define MQX_CHECK_VALIDITY                    
                                          1
  134                           #endif
  135                           
  136                           
  137                           /*
  138                            * When MQX_COMPONENT_DESTRUCTION is defined
                                 as 1,
  139                            * the kernel will handle the destruction of a
                                 kernel component object
  140                            * (such as a semaphore or event)
  141                            */
  142                           #ifndef MQX_COMPONENT_DESTRUCTION
  143                           #define MQX_COMPONENT_DESTRUCTION             
                                          1
  144                           #endif
  145                           
  146                           
  147                           /*
  148                            * Enables message receive calls to set
                                 MSGQ_MESSAGE_NOT_AVAILABLE task
  149                            * error code when message is not available.
  150                            */
  151                           #ifndef MQXCFG_ENABLE_MSG_TIMEOUT_ERROR
  152                           #define MQXCFG_ENABLE_MSG_TIMEOUT_ERROR       
                                          0
  153                           #endif
  154                           
  155                           
  156                           /*
  157                            * When MQX_IO_COMPONENT_DESTRUCTION is
                                 defined as 1,
  158                            * the kernel will handle the destruction of
                                 an IO component object
  159                            */
  160                           #ifndef MQX_IO_COMPONENT_DESTRUCTION
  161                           #define MQX_IO_COMPONENT_DESTRUCTION          
                                          0
  162                           #endif
  163                           
  164                           
  165                           /*
  166                            * When MQX_DEFAULT_TIME_SLICE_IN_TICKS is
                                 define as 1,
  167                            * then the default time slice in the task
                                 template structure
  168                            * is in units of ticks. Changing this to 0
                                 will change the units
  169                            * to milliseconds. This also affects the time
                                 slice field in the
  170                            * task template since this is used to set a
                                 task's default time
  171                            * slice.
  172                            */
  173                           #ifndef MQX_DEFAULT_TIME_SLICE_IN_TICKS
  174                           #define MQX_DEFAULT_TIME_SLICE_IN_TICKS       
                                          0
  175                           #endif
  176                           
  177                           
  178                           /*
  179                            * When MQX_EXIT_ENABLED is defined as
                                 1,
  180                            * code is compiled in to allow the applicatio
                                n to return from _mqx().
  181                            */
  182                           #ifndef MQX_EXIT_ENABLED
  183                           #define MQX_EXIT_ENABLED                      
                                          1
  184                           #endif
  185                           
  186                           
  187                           /*
  188                            * When MQX_EXTRA_TASK_STACK_ENABLE is defined
                                 as 1,
  189                            * code is compiled in to reserve extra memory
                                 at the top of stack
  190                            * in every task, if desired. Both "OS
                                 Changer" and the MetaWare C/C++
  191                            * runtime want additional per-task variables.
  192                            */
  193                           #ifndef MQX_EXTRA_TASK_STACK_ENABLE
  194                           #define MQX_EXTRA_TASK_STACK_ENABLE           
                                          0
  195                           #endif
  196                           
  197                           
  198                           /*
  199                            * When MQX_HAS_TIME_SLICE is defined as
                                 1,
  200                            * then code is compiled in to support time
                                 sliced tasks.
  201                            */
  202                           #ifndef MQX_HAS_TIME_SLICE
  203                           #define MQX_HAS_TIME_SLICE                    
                                          0
  204                           #endif
  205                           
  206                           
  207                           /*
  208                            * When MQX_INCLUDE_FLOATING_POINT_IO is
                                 defined as 1,
  209                            * _io_printf and _io_scanf will include
                                 floating point I/O code.
  210                            */
  211                           #ifndef MQX_INCLUDE_FLOATING_POINT_IO
  212                           #define MQX_INCLUDE_FLOATING_POINT_IO         
                                          0
  213                           #endif
  214                           
  215                           
  216                           /*
  217                            * When MQX_IS_MULTI_PROCESSOR is defined as
                                 1,
  218                            * then code is compiled in to support
                                 multiple processor MQX systems.
  219                            */
  220                           #ifndef MQX_IS_MULTI_PROCESSOR
  221                           #define MQX_IS_MULTI_PROCESSOR                
                                          0
  222                           #endif
  223                           
  224                           
  225                           /*
  226                            * When MQX_KERNEL_LOGGING is defined as
                                 1,
  227                            * calls to write to the kernel log will be
                                 added to some kernel functions at
  228                            * function entry (with parameters) and
                                 function exit (with error codes).
  229                            *
  230                            * The MQX functions that have logging
                                 compiled in will run slower, however
  231                            * it is only when the logging is enabled for
                                 the function that performance
  232                            * will be affected.
  233                            *
  234                            * The logging of specific functions can be
                                 controlled using the
  235                            * _klog_control function.
  236                            *
  237                            */
  238                           #ifndef MQX_KERNEL_LOGGING
  239                           #define MQX_KERNEL_LOGGING                    
                                          0
  240                           #endif
  241                           
  242                           
  243                           /*
  244                            * When MQX_LWLOG_TIME_STAMP_IN_TICKS is
                                 define as 0,
  245                            * then the time stamp in the light weight log
                                 component
  246                            * is in seconds, milliseconds, and microsecon
                                ds. Changing this
  247                            * to 1 will causes the time stamp to be in
                                 ticks which is not
  248                            * as readable, but has much less overhead.
  249                            */
  250                           #ifndef MQX_LWLOG_TIME_STAMP_IN_TICKS
  251                           #define MQX_LWLOG_TIME_STAMP_IN_TICKS         
                                          1
  252                           #endif
  253                           
  254                           
  255                           /*
  256                            * When MQX_MEMORY_FREE_LIST_SORTED is defined
                                 as 1,
  257                            * then the free memory blocks are stored in
                                 order of address
  258                            * to reduce fragmentation. This can increase
                                 memory freeing time
  259                            * and code size
  260                            */
  261                           #ifndef MQX_MEMORY_FREE_LIST_SORTED
  262                           #define MQX_MEMORY_FREE_LIST_SORTED           
                                          1
  263                           #endif
  264                           
  265                           
  266                           /*
  267                            * When MQX_MONITOR_STACK is defined as
                                 1,
  268                            * the kernel will fill all stacks with a
                                 known value when the stack is
  269                            * initialized.
  270                            * This allows utility software and debuggers
                                 to calculate how much of the
  271                            * stack has been used.  This will only have
                                 an impact at task creation time.
  272                            */
  273                           #ifndef MQX_MONITOR_STACK
  274                           #define MQX_MONITOR_STACK                     
                                          1
  275                           #endif
  276                           
  277                           
  278                           /*
  279                            * When MQX_MUTEX_HAS_POLLING is defined as
                                 1,
  280                            * then extra code will be compiled in to
                                 support the
  281                            * mutex options: MUTEX_SPIN_ONLY and
                                 MUTEX_LIMITED_SPIN
  282                            */
  283                           #ifndef MQX_MUTEX_HAS_POLLING
  284                           #define MQX_MUTEX_HAS_POLLING                 
                                          1
  285                           #endif
  286                           
  287                           
  288                           /*
  289                            * When MQX_PROFILING_ENABLE is defined as
                                 1,
  290                            * code to support an external profiling tool
                                 will be compiled into the kernel
  291                            * Profiling will add to the size of the
                                 compiled image, and it will run slower
  292                            *
  293                            * Note: You can only use profiling if the
                                 toolset being used supports it
  294                            */
  295                           #ifndef MQX_PROFILING_ENABLE
  296                           #define MQX_PROFILING_ENABLE                  
                                          0
  297                           #endif
  298                           
  299                           
  300                           /*
  301                            * When MQX_RUN_TIME_ERR_CHECK_ENABLE is
                                 defined as 1,
  302                            * code to support an external run-time error
                                 checking tool will be compiled
  303                            * into the kernel.  This will add to the size
                                 of the compiled image,
  304                            * and will cause MQX to run slower
  305                            *
  306                            * Note: You can only use run time error
                                 checking if the toolset being used
  307                            *       supports it
  308                            *
  309                            */
  310                           #ifndef MQX_RUN_TIME_ERR_CHECK_ENABLE
  311                           #define MQX_RUN_TIME_ERR_CHECK_ENABLE         
                                          0
  312                           #endif
  313                           
  314                           /*
  315                            * When MQX_THREAD_LOCAL_STORAGE_ENABLE is
                                 defined as 1,
  316                            * additional space will be reserved on the
                                 task's stack for local storage. This may be
                                 required by some tool-chains,
  317                            * but is not required for CodeWarrior.
  318                            */
  319                           #ifndef MQX_THREAD_LOCAL_STORAGE_ENABLE
  320                           #define MQX_THREAD_LOCAL_STORAGE_ENABLE       
                                          0
  321                           #endif
  322                           
  323                           /*
  324                            * When MQX_TAD_RESERVED_ENABLE is defined as
                                 1,
  325                            * additional space will be reserved in the
                                 task descriptor for TAD. This may be required
                                 by some tool-chains,
  326                            * but is not required for CodeWarrior.
  327                            *
  328                            */
  329                           #ifndef MQX_TAD_RESERVED_ENABLE
  330                           #define MQX_TAD_RESERVED_ENABLE               
                                          0
  331                           #endif
  332                           
  333                           /*
  334                            * When MQX_TASK_CREATION_BLOCKS is defined as
                                 1,
  335                            * the creating task will be suspended when
                                 _task_create is called for a task
  336                            * residing on a different processor.
  337                            *
  338                            * The creator task will be suspended until
                                 the target task is created,
  339                            * and an error code is returned.
  340                            */
  341                           #ifndef MQX_TASK_CREATION_BLOCKS
  342                           #define MQX_TASK_CREATION_BLOCKS              
                                          1
  343                           #endif
  344                           
  345                           
  346                           /*
  347                            * When MQX_TASK_DESTRUCTION is defined as
                                 1,
  348                            * the kernel will allow for the destruction
                                 of tasks,
  349                            * releasing all resources owned by the task
                                 when it is destroyed.
  350                            * (memory, events, semaphores, mutexes
                                 etc.)
  351                            */
  352                           #ifndef MQX_TASK_DESTRUCTION
  353                           #define MQX_TASK_DESTRUCTION                  
                                          1
  354                           #endif
  355                           
  356                           
  357                           /*
  358                            * When MQX_TIMER_USES_TICKS_ONLY, the timer
                                 task will *only* process
  359                            * timer periodic and one-shot requests using
                                 ticks for timeout
  360                            * reporting, rather than the MQX2.40
                                 milliseconds/seconds.
  361                            */
  362                           #ifndef MQX_TIMER_USES_TICKS_ONLY
  363                           #define MQX_TIMER_USES_TICKS_ONLY             
                                          0
  364                           #endif
  365                           
  366                           
  367                           /*
  368                            * When MQX_USE_32BIT_MESSAGE_QIDS is defined
                                 as 1,
  369                            * the message component datatypes (_queue_num
                                be & _queue_id) will be uint_32s
  370                            * wide instead of uint_16s.
  371                            * This will allow for more than 256 message
                                 queues on a cpu, and
  372                            * more than 256 processors in a multi-process
                                or network.
  373                            */
  374                           #ifndef MQX_USE_32BIT_MESSAGE_QIDS
  375                           #define MQX_USE_32BIT_MESSAGE_QIDS            
                                          0
  376                           #endif
  377                           
  378                           
  379                           /*
  380                            * When MQX_USE_32BIT_TYPES is defined as 1,
                                 the kernel will be forced
  381                            * to 32 bit mode regardless of the natural
                                 size of the processor. This will
  382                            * reduce the number of warning generated by
                                 the compiler when linking 2.4x
  383                            * applications against version 2.5x of
                                 MQX.
  384                            *
  385                            * Obsolete in MQX3.x
  386                            */
  387                           #ifndef MQX_USE_32BIT_TYPES
  388                           #define MQX_USE_32BIT_TYPES                   
                                          0
  389                           #endif
  390                           
  391                           /*
  392                            * When MQX_HAS_DYNAMIC_PRIORITIES is defined
                                 as 1, MQX includes code to change
  393                            * task priorities dynamically by _task_set_pr
                                iority() call or by priority inheritance or
                                 priority boosting.
  394                            */
  395                           #ifndef MQX_HAS_DYNAMIC_PRIORITIES
  396                           #define MQX_HAS_DYNAMIC_PRIORITIES            
                                          1
  397                           #endif
  398                           
  399                           /*
  400                            * When MQX_HAS_EXCEPTION_HANDLER is defined
                                 as 1, MQX includes code to handle
  401                            * exceptions (see psp/<psp>/int_xcpt.c) and
                                 to set/get task exception handler
  402                            * routine by using the _task_set_exception_ha
                                ndler/_task_get_exception_handler)
  403                            */
  404                           #ifndef MQX_HAS_EXCEPTION_HANDLER
  405                           #define MQX_HAS_EXCEPTION_HANDLER             
                                          1
  406                           #endif
  407                           
  408                           /*
  409                            * When MQX_HAS_EXIT_HANDLER is defined as 1,
                                 MQX includes code to execute task
  410                            * exit handler before the task exits. Also
                                 the _task_set_exit_handler/_task_get_exit_hand
                                ler
  411                            * calls are also included.
  412                            */
  413                           #ifndef MQX_HAS_EXIT_HANDLER
  414                           #define MQX_HAS_EXIT_HANDLER                  
                                          1
  415                           #endif
  416                           
  417                           /*
  418                            * When MQX_HAS_HW_TICKS is defined as 1, MQX
                                 includes support for hardware ticks and
  419                            * associated calls: _time_get_hwticks,
                                 _time_get_hwticks_per_tick and _psp_usecs_to_t
                                icks.
  420                            * Note that hardware ticks also need to be
                                 supported by BSP.
  421                            */
  422                           #ifndef MQX_HAS_HW_TICKS
  423                           #define MQX_HAS_HW_TICKS                      
                                          1
  424                           #endif
  425                           
  426                           /*
  427                            * When MQX_HAS_TASK_ENVIRONMENT is defined as
                                 1, MQX includes code to set and get
  428                            * task environment data pointer: _task_set_en
                                vironment/_task_get_environment.
  429                            */
  430                           #ifndef MQX_HAS_TASK_ENVIRONMENT
  431                           #define MQX_HAS_TASK_ENVIRONMENT              
                                          0
  432                           #endif
  433                           
  434                           /*
  435                            * When MQX_HAS_TICK is defined as 1, MQX
                                 includes support for tick time and all
                                 related
  436                            * functionality of delaying tasks, waiting
                                 for synchronization objects with timeout
                                 etc.
  437                            * Only change this option to 0 if you know
                                 what you are doing.
  438                            */
  439                           #ifndef MQX_HAS_TICK
  440                           #define MQX_HAS_TICK                          
                                          1
  441                           #endif
  442                           
  443                           /*
  444                            * When MQX_KD_HAS_COUNTER is defined as 1,
                                 the MQX kernel maintains the counter
                                 value
  445                            * which is automatically incremented any time
                                 the value is queried by _mqx_get_counter
  446                            * call.
  447                            */
  448                           #ifndef MQX_KD_HAS_COUNTER
  449                           #define MQX_KD_HAS_COUNTER                    
                                          0
  450                           #endif
  451                           
  452                           /*
  453                            * When MQX_TD_HAS_ERROR_CODE is defined as 1,
                                 the MQX task descriptors maintain the
  454                            * error code which is accessible with
                                 _task_set_error/_task_get_error calls.
  455                            */
  456                           #ifndef MQX_TD_HAS_ERROR_CODE
  457                           #define MQX_TD_HAS_ERROR_CODE                 
                                          1
  458                           #endif
  459                           
  460                           /*
  461                            * When MQX_TD_HAS_PARENT is defined as 1, the
                                 MQX task descriptors maintain the task's
  462                            * creator ID which is available through
                                 _task_get_creator call.
  463                            */
  464                           #ifndef MQX_TD_HAS_PARENT
  465                           #define MQX_TD_HAS_PARENT                     
                                          1
  466                           #endif
  467                           
  468                           /*
  469                            * When MQX_TD_HAS_STACK_LIMIT is defined as
                                 1, the MQX task descriptors maintain
                                 the
  470                            * task limit value which is needed by various
                                 stack overflow checking calls like
  471                            * _task_check_stack.
  472                            */
  473                           
  474                           #ifndef MQX_TD_HAS_STACK_LIMIT
  475                           #define MQX_TD_HAS_STACK_LIMIT                
                                          1
  476                           #endif
  477                           
  478                           /*
  479                            * When MQX_TD_HAS_TASK_TEMPLATE_PTR is
                                 defined as 1, the MQX task descriptors
                                 maintain the
  480                            * pointer to original TASK_TEMPLATE_STRUCT
                                 used for task creation. This pointer is
                                 used
  481                            * by task restart call (_task_restart()) and
                                 by several lookup functions like
  482                            * _task_get_id_from_name().
  483                            */
  484                           #ifndef MQX_TD_HAS_TASK_TEMPLATE_PTR
  485                           #define MQX_TD_HAS_TASK_TEMPLATE_PTR          
                                          1
  486                           #endif
  487                           
  488                           /*
  489                            * When MQX_TD_HAS_TEMPLATE_INDEX is defined
                                 as 1, the MQX task descriptors maintain
                                 the
  490                            * original index value coming from the
                                 TASK_TEMPLATE_STRUCT. This value is maintained
                                 for
  491                            * backward compatibility only and is not used
                                 by MQX kernel.
  492                            */
  493                           #ifndef MQX_TD_HAS_TEMPLATE_INDEX
  494                           #define MQX_TD_HAS_TEMPLATE_INDEX             
                                          1
  495                           #endif
  496                           
  497                           /*
  498                            * When MQX_USE_SMALL_MEM_COPY is defined as
                                 1, a simple/short memory
  499                            * copy function is compiled.
  500                            */
  501                           #ifndef MQX_USE_SMALL_MEM_COPY
  502                           #define MQX_USE_SMALL_MEM_COPY                
                                          0
  503                           #endif
  504                           
  505                           /*
  506                            * When MQX_USE_SMALL_MEM_ZERO is defined as
                                 1, a simple/short memory
  507                            * zeroing function is compiled.
  508                            */
  509                           #ifndef MQX_USE_SMALL_MEM_ZERO
  510                           #define MQX_USE_SMALL_MEM_ZERO                
                                          0
  511                           #endif
  512                           
  513                           /*
  514                            * When MQX_USE_SMALL_MEM_COPY is defined as 0
                                 and MQX_USE_BLOCK_MEM_COPY as 1,
  515                            * a stronger _mem_copy speed optimization is
                                 enabled.
  516                            */
  517                           #ifndef MQX_USE_BLOCK_MEM_COPY
  518                           #define MQX_USE_BLOCK_MEM_COPY                
                                          1
  519                           #endif
  520                           
  521                           /*
  522                            * When MQX_USE_SMALL_MEM_ZERO is defined as 0
                                 and MQX_USE_BLOCK_MEM_ZERO as 1,
  523                            * a stronger _mem_zero speed optimization is
                                 enabled.
  524                            */
  525                           #ifndef MQX_USE_BLOCK_MEM_ZERO
  526                           #define MQX_USE_BLOCK_MEM_ZERO                
                                          1
  527                           #endif
  528                           
  529                           
  530                           /*
  531                            * When MQX_USE_EVENTS is defined as
                                 1,
  532                            * then mqx will compile in the support code
                                 for event component.
  533                            */
  534                           #ifndef MQX_USE_EVENTS
  535                           #define MQX_USE_EVENTS                        
                                          0
  536                           #endif
  537                           
  538                           
  539                           /*
  540                            * When MQX_USE_IDLE_TASK is defined as
                                 1,
  541                            * the kernel will create the idle task which
                                 will execute when no other tasks are
                                 ready,
  542                            * otherwise, the processor will stop when
                                 there are no tasks to run.
  543                            */
  544                           #ifndef MQX_USE_IDLE_TASK
  545                           #define MQX_USE_IDLE_TASK                     
                                          1
  546                           #endif
  547                           
  548                           
  549                           /*
  550                            * When MQX_USE_INTERRUPTS is defined as 1,
                                 the support for interrupts is
  551                            * enabled in MQX.
  552                            */
  553                           #ifndef MQX_USE_INTERRUPTS
  554                           #define MQX_USE_INTERRUPTS                    
                                          1
  555                           #endif
  556                           
  557                           /*
  558                            * When MQX_USE_IPC is defined as 1,
  559                            * then mqx will compile in the support code
                                 for Interprocessor communication.
  560                            */
  561                           #ifndef MQX_USE_IPC
  562                           #define MQX_USE_IPC                           
                                          0
  563                           #endif
  564                           
  565                           
  566                           /*
  567                            * When MQX_USE_INLINE_MACROS is defined as
                                 1,
  568                            * certain internal utility functions called
                                 by MQX will
  569                            * be made "inline" rather than by function
                                 calls.  This allows the user
  570                            * to optimize for time or code space. 
                                 Inlining optimizes for time,
  571                            * not inlining optimizes for space.
  572                            */
  573                           #ifndef MQX_USE_INLINE_MACROS
  574                           #define MQX_USE_INLINE_MACROS                 
                                          1
  575                           #endif
  576                           
  577                           /*
  578                            * When MQX_USE_IO is defined as 1, the MQX
                                 implements the I/O subsystem calls
  579                            * needed by I/O drivers. Without the I/O
                                 subsystem, no driver can be installed
  580                            * or used and tasks are not able to use
                                 stdin/stdout/stderr handles.
  581                            */
  582                           
  583                           #ifndef MQX_USE_IO
  584                           #define MQX_USE_IO                            
                                          0
  585                           #endif
  586                           
  587                           /*
  588                            * When MQX_USE_IO_COMPONENTS is defined as 1,
                                 the MQX maintains the list of additional
  589                            * functional components like RTCS, MFS or USB
                                 in kernel data. Disable this feature
  590                            * only with MQX-only applications to save
                                 some RAM.
  591                            */
  592                           
  593                           #ifndef MQX_USE_IO_COMPONENTS
  594                           #define MQX_USE_IO_COMPONENTS                 
                                          0
  595                           #endif
  596                           
  597                           
  598                           /*
  599                            * When MQX_USE_LWEVENTS is defined as
                                 1,
  600                            * then mqx will compile in the support code
                                 for light weight event component.
  601                            */
  602                           #ifndef MQX_USE_LWEVENTS
  603                           #define MQX_USE_LWEVENTS                      
                                          0
  604                           #endif
  605                           
  606                           
  607                           /*
  608                            * When MQX_USE_LOGS is defined as 1,
  609                            * then mqx will compile in the support code
                                 for log component.
  610                            */
  611                           #ifndef MQX_USE_LOGS
  612                           #define MQX_USE_LOGS                          
                                          0
  613                           #endif
  614                           
  615                           
  616                           /*
  617                            * When MQX_USE_LWLOGS is defined as
                                 1,
  618                            * then mqx will compile in the support code
                                 for light weight log component.
  619                            */
  620                           #ifndef MQX_USE_LWLOGS
  621                           #define MQX_USE_LWLOGS                        
                                          0
  622                           #endif
  623                           
  624                           /*
  625                            * When MQX_USE_LWMEM_ALLOCATOR is defined as
                                 1,
  626                            * then mqx will use the light weight memory
                                 functions
  627                            * to allocate and free memory
  628                            */
  629                           #ifndef MQX_USE_LWMEM_ALLOCATOR
  630                           #define MQX_USE_LWMEM_ALLOCATOR               
                                          0
  631                           #endif
  632                           
  633                           /*
  634                            * When MQX_USE_LWMEM is defined as 1,
  635                            * then mqx will compile in the support code
                                 for light weight memory component.
  636                            */
  637                           #ifndef MQX_USE_LWMEM
  638                           #define MQX_USE_LWMEM                         
                                          0
  639                           #endif
  640                           
  641                           
  642                           /*
  643                            * When MQX_USE_MEM is defined as 1,
  644                            * then mqx will compile in the support code
                                 for memory component.
  645                            */
  646                           #ifndef MQX_USE_MEM
  647                           #define MQX_USE_MEM                           
                                          0
  648                           #endif
  649                           
  650                           /*
  651                            * When MQX_USE_UNCACHED_MEM is defined as
                                 1,
  652                            * then mqx will compile in the support for
                                 uncached memory allocation.
  653                            */
  654                           #ifndef MQX_USE_UNCACHED_MEM
  655                               #if MQX_USE_LWMEM_ALLOCATOR
  656                                   #define MQX_USE_UNCACHED_MEM        
                                 0
  657                               #else
  658                                   #define MQX_USE_UNCACHED_MEM        
                                 1
  659                               #endif
  660                           #endif
  661                           
  662                           /*
  663                            * When MQX_USE_LWMSGQ is defined as
                                 1,
  664                            * then mqx will compile in the support code
                                 for light weight message queues.
  665                            */
  666                           #ifndef MQX_USE_LWMSGQ
  667                           #define MQX_USE_LWMSGQ                        
                                          0
  668                           #endif
  669                           
  670                           
  671                           /*
  672                            * When MQX_USE_LWTIMER is defined as
                                 1,
  673                            * then mqx will compile in the support code
                                 for light weight timers.
  674                            */
  675                           #ifndef MQX_USE_LWTIMER
  676                           #define MQX_USE_LWTIMER                       
                                          0
  677                           #endif
  678                           
  679                           
  680                           /*
  681                            * When MQX_USE_MESSAGES is defined as
                                 1,
  682                            * then mqx will compile in the support code
                                 for messages.
  683                            */
  684                           #ifndef MQX_USE_MESSAGES
  685                           #define MQX_USE_MESSAGES                      
                                          0
  686                           #endif
  687                           
  688                           
  689                           /*
  690                            * When MQX_USE_MUTEXES is defined as
                                 1,
  691                            * then mqx will compile in the support code
                                 for mutex component.
  692                            */
  693                           #ifndef MQX_USE_MUTEXES
  694                           #define MQX_USE_MUTEXES                       
                                          0
  695                           #endif
  696                           
  697                           
  698                           /*
  699                            * When MQX_USE_NAME is defined as 1,
  700                            * then mqx will compile in the support code
                                 for name component.
  701                            */
  702                           #ifndef MQX_USE_NAME
  703                           #define MQX_USE_NAME                          
                                          1
  704                           #endif
  705                           
  706                           
  707                           /*
  708                            * When MQX_USE_PARTITIONS is defined as
                                 1,
  709                            * then mqx will compile in the support code
                                 for memory with fixed-size blocks.
  710                            */
  711                           #ifndef MQX_USE_PARTITIONS
  712                           #define MQX_USE_PARTITIONS                    
                                          0
  713                           #endif
  714                           
  715                           
  716                           /*
  717                            * When MQX_USE_SEMAPHORES is defined as
                                 1,
  718                            * then mqx will compile in the support code
                                 for Semaphores
  719                            */
  720                           #ifndef MQX_USE_SEMAPHORES
  721                           #define MQX_USE_SEMAPHORES                    
                                          0
  722                           #endif
  723                           
  724                           
  725                           /*
  726                            * When MQX_USE_SW_WATCHDOGS is defined as
                                 1,
  727                            * then mqx will compile in the support code
                                 for software watchdog timers.
  728                            */
  729                           #ifndef MQX_USE_SW_WATCHDOGS
  730                           #define MQX_USE_SW_WATCHDOGS                  
                                          0
  731                           #endif
  732                           
  733                           
  734                           /*
  735                            * When MQX_USE_TIMER is defined as 1,
  736                            * then mqx will compile in the support code
                                 for timer component.
  737                            */
  738                           #ifndef MQX_USE_TIMER
  739                           #define MQX_USE_TIMER                         
                                          1
  740                           #endif
  741                           
  742                           
  743                           /*
  744                            * When MQX_VERIFY_KERNEL_DATA is defined as
                                 1,
  745                            * then mqx will perform a memory check at
                                 startup to
  746                            * verify it can correctly read and write
                                 kernel memory.
  747                            */
  748                           #ifndef MQX_VERIFY_KERNEL_DATA
  749                           #define MQX_VERIFY_KERNEL_DATA                
                                          1
  750                           #endif
  751                           
  752                           
  753                           /*
  754                            * When MQX_ALLOW_TYPED_MEMORY is defined as
                                 1,
  755                            * then mqx will include code that allows
                                 typed memory blocks
  756                            */
  757                           #ifndef MQX_ALLOW_TYPED_MEMORY
  758                           #define MQX_ALLOW_TYPED_MEMORY                
                                          0
  759                           #endif
  760                           
  761                           /*
  762                            * Set _mem_alloc_align mode - default is
                                 0.
  763                            * 0 create free mem block before allocated
                                 block for alignment.
  764                            * 1 resize previous used block for alignment.
  765                            */
  766                           #ifndef MQX_ALLOC_ALLIGN_RESIZE
  767                           #define MQX_ALLOC_ALLIGN_RESIZE               
                                          0
  768                           #endif
  769                           
  770                           /*
  771                            * When MQX_ROM_VECTORS is defined as 1,
                                 interrupt vector table is not copied
  772                            * into RAM. The ROM-based table is set up
                                 correctly to handle all interrupts by
  773                            * the default MQX interrupt dispatcher. The
                                 application will still be able to
  774                            * install interrupt service routine by using
                                 the _int_install_isr call.
  775                            * However, the _int_install_kernel_isr call
                                 can not be used to install the
  776                            * low-level interrupt service routines
                                 directly in the vector table.
  777                            */
  778                           #ifndef MQX_ROM_VECTORS
  779                           #define MQX_ROM_VECTORS                       
                                          1
  780                           #endif
  781                           
  782                           /*
  783                            * When MQX_SPARSE_ISR_TABLE is defined as 1,
                                 the MQX interrupt service
  784                            * routine table is allocated as a "array of
                                 linked lists" instead of linear array.
  785                            * This option is independent on the
                                 MQX_ROM_VECTORS as it deals with the
  786                            * "logical" table managed by the interrupt
                                 dispatcher in MQX. With the sparse ISR
  787                            * table, only the ISRs installed by
                                 _int_install_isr call consume RAM memory.
  788                            * Interrupt latency increases as MQX needs to
                                 walk the list to find user ISR
  789                            * to be invoked.
  790                            */
  791                           #ifndef MQX_SPARSE_ISR_TABLE
  792                           #define MQX_SPARSE_ISR_TABLE                  
                                          0
  793                           #endif
  794                           
  795                           /*
  796                            * When MQX_SPARSE_ISR_TABLE is defined as 1,
                                 this option determines the number of
                                 bits
  797                            * the vector number is shifted to determine
                                 index of ISR linked list root.
  798                            * For example with 256 potential interrupt
                                 sources and with shift value
  799                            * of 3, it makes 256>>3=32 lists each with
                                 maximum depth of eight ISR entries.
  800                            * Shift value of 8 would yield one big linked
                                 list of all ISR entries.
  801                            */
  802                           #ifndef MQX_SPARSE_ISR_SHIFT
  803                           #define MQX_SPARSE_ISR_SHIFT                  
                                          3
  804                           #endif
  805                           
  806                           /*
  807                            * When MQX_FP_CONTEXT_CHECK is defined as 1,
                                 MQX support for floating point context
  808                            * checking is enabled. The task which make
                                 use of the floating point unit must still
  809                            * be declared with MQX_FLOATING_POINT_TASK
                                 flag.
  810                            */
  811                           #ifndef MQX_FP_CONTEXT_CHECK
  812                           #define MQX_FP_CONTEXT_CHECK                  
                                          0
  813                           #endif
  814                           
  815                           /*
  816                            * When MQXCFG_ENABLE_FP is defined as 1, MQX
                                 support for floating point context saving
                                 is
  817                            * enabled if the PSP supports it. The task
                                 which make use of the floating point unit
                                 must
  818                            * still be declared with MQX_FLOATING_POINT_T
                                ASK flag.
  819                            */
  820                           #ifndef MQXCFG_ENABLE_FP
  821                           #define MQXCFG_ENABLE_FP                      
                                          0
  822                           #endif
  823                           
  824                           /*
  825                            * When MQXCFG_ENABLE_DSP is defined as 1, MQX
                                 support for dsp  context saving is
  826                            * enabled if the PSP supports it. The task
                                 which make use of thedsp registers must
  827                            * still be declared with MQX_DSP_TASK
                                 flag.
  828                            */
  829                           #ifndef MQXCFG_ENABLE_DSP
  830                           #define MQXCFG_ENABLE_DSP                     
                                          0
  831                           #endif
  832                           
  833                           #ifndef MQX_GUERRILLA_INTERRUPTS_EXIST
  834                           #define MQX_GUERRILLA_INTERRUPTS_EXIST        
                                          0
  835                           #endif
  836                           
  837                           /*
  838                            * When this option is defined as 1, private
                                 MQX implementation of memcpy is used
                                 instead
  839                            * the one from standard library.
  840                            */
  841                           #ifndef MQXCFG_MEM_COPY
  842                           #define MQXCFG_MEM_COPY                       
                                          1
  843                           #endif
  844                           
  845                           /*
  846                            * When this option is defined as 1, support
                                 for USER-mode restricted tasks is enabled
  847                            * (ARM/CortexM only)
  848                            */
  849                           #ifndef MQX_ENABLE_USER_MODE
  850                           #define MQX_ENABLE_USER_MODE                  
                                          0
  851                           #endif
  852                           
  853                           /*
  854                            * When this option is defined as 1, and if
                                 MQX_ENABLE_USER_MODE is enabled, the
  855                            * default access to global variables is
                                 read-write for User tasks
  856                            */
  857                           #ifndef MQX_DEFAULT_USER_ACCESS_RW
  858                           #define MQX_DEFAULT_USER_ACCESS_RW            
                                          1
  859                           #endif
  860                           
  861                           /*
  862                            * When this option is defined as 1, and if
                                 MQX_ENABLE_USER_MODE is enabled, the
  863                            * classic MQX API is available also for
                                 User-mode. The use of User-mode API is
  864                            * determined dynamically, based on if the
                                 calling task runs in User or Privilege
  865                            * mode.
  866                            */
  867                           #ifndef MQX_ENABLE_USER_STDAPI
  868                           #define MQX_ENABLE_USER_STDAPI                
                                          1
  869                           #endif
  870                           
  871                           /*
  872                            * When this option is defined as 1, support
                                 for various low power modes is enabled
  873                            * (Kinetis platform so far)
  874                            */
  875                           #ifndef MQX_ENABLE_LOW_POWER
  876                           #define MQX_ENABLE_LOW_POWER                  
                                          0
  877                           #endif
  878                           
  879                           /*
  880                            * When this option is defined as 1, Idle loop
                                 counting in Idle task are enabled
  881                            */
  882                           #ifndef MQX_ENABLE_IDLE_LOOP
  883                           #define MQX_ENABLE_IDLE_LOOP                  
                                          0
  884                           #endif
  885                           /*
  886                            * The FILE and MQX_FILE_PTR types are
                                 deprecated since MQX 3.6 (replaced by
                                 MQX_FILE
  887                            * and MQX_FILE_PTR). The symbols are still
                                 available for backward compatibility.
  888                            * When this option is defined as 1 the old
                                 symbols are not declared/defined.
  889                            */
  890                           #ifndef MQX_SUPPRESS_FILE_DEF
  891                           #define MQX_SUPPRESS_FILE_DEF                 
                                          0
  892                           #endif
  893                           
  894                           /*
  895                            * The same for <stdio.h> definitions
  896                            */
  897                           #ifndef MQX_SUPPRESS_STDIO_MACROS
  898                           #define MQX_SUPPRESS_STDIO_MACROS             
                                          0
  899                           #endif
  900                           
  901                           /*
  902                            * The same for <string.h> definitions. By
                                 default, the string.h macros are
  903                            * suppressed in IAR EWARM 6.x to avoid
                                 conflict between MQX and system C libraries.
  904                            */
  905                           #ifndef MQX_SUPPRESS_STRINGH_MACROS
  906                               #if defined(__ICCARM__) /* IAR */
  907                                   #if __VER__ >= 6000000
  908                                       #define MQX_SUPPRESS_STRINGH_MACRO
                                S 1
  909                                   #else
  910                                       #define MQX_SUPPRESS_STRINGH_MACRO
                                S 0
  911                                   #endif
  912                               #elif defined(__CC_ARM)
  913                                       #define MQX_SUPPRESS_STRINGH_MACRO
                                S 1
  914                               #else
  915                                   #define MQX_SUPPRESS_STRINGH_MACROS
                                 0
  916                               #endif
  917                           #endif
  918                           
  919                           /*
  920                            * Any MQX component used?
  921                            */
  922                           #define MQX_USE_COMPONENTS         \
  935                           
  936                           /*
  937                            * Check for dependencies.
  938                            */
  939                           
  940                           #if MQX_USE_IPC
  941                           #if !MQX_USE_PARTITIONS
  942                           #error enable MQX_USE_PARTITIONS for
                                 IPC
  943                           #endif
  944                           #endif
  945                           
  946                           #ifdef MQX_CRIPPLED_EVALUATION
  948                           #if MQX_CRIPPLED_EVALUATION
  949                           #if MQX_KERNEL_LOGGING && !MQX_EXIT_ENABLED
  950                           #error Enable MQX_EXIT_ENABLED for MQX
                                 crippled evaluation
  951                           #elif !MQX_KERNEL_LOGGING && MQX_EXIT_ENABLED
  952                           #error Disable MQX_EXIT_ENABLED for MQX
                                 crippled evaluation without MQX Kernel
                                 logging
  953                           #endif
  954                           #endif
  956                           #endif
  957                           
  958                           #if MQX_KERNEL_LOGGING && !MQX_USE_LWLOGS
  959                           #error Set MQX_USE_LWLOGS to 1 when using
                                 MQX_KERNEL_LOGGING
  960                           #endif
  961                           
  962                           /*#if !MQX_USE_LWMEM_ALLOCATOR && !MQX_USE_MEM
                                 */
  963                           /*#error Set MQX_USE_MEM to 1 when not using
                                 MQX_USE_LWMEM_ALLOCATOR */
  964                           /*#endif */
  965                           
  966                           #if MQX_USE_LWMEM_ALLOCATOR && !MQX_USE_LWMEM
  967                           #error Set MQX_USE_LWMEM to 1 when using
                                 MQX_USE_LWMEM_ALLOCATOR
  968                           #endif
  969                           
  970                           #if MQX_USE_LWMEM_ALLOCATOR && MQX_USE_UNCACHE
                                D_MEM
  971                           #error Set MQX_USE_UNCACHED_MEM to 0 when
                                 using MQX_USE_LWMEM_ALLOCATOR
  972                           #endif
  973                           
  974                           #if MQX_SPARSE_ISR_TABLE && (MQX_SPARSE_ISR_SH
                                IFT < 1 || MQX_SPARSE_ISR_SHIFT > 7)
  975                           #error MQX_SPARSE_ISR_SHIFT out of range <1,
                                 7>
  976                           #endif
  977                           
  978                           #if MQX_ENABLE_USER_MODE && !MQX_USE_LWMEM_ALL
                                OCATOR
  979                           #error Set MQX_USE_LWMEM_ALLOCATOR to 1 when
                                 using MQX_ENABLE_USER_MODE
  980                           #endif
  981                           
  982                           /* Default PSP configuration */
  983                           #ifndef PSP_KERNEL_DATA_VERIFY_ENABLE
  984                           #define PSP_KERNEL_DATA_VERIFY_ENABLE         
                                          0
  985                           #endif /* PSP_KERNEL_DATA_VERIFY_ENABLE
                                 */
  986                           
  987                           #endif /* __mqxlite_cnfg_h__ */
  988                           /* EOF */
   98                           
   99                           #else
  104                           #ifndef MQX_CPU
  105                           #error  You must define target processor in
                                 "user_config.h" (MQX_CPU)
  106                           #endif
  111                           #ifdef MQX_FORCE_USE_INLINE_MACROS
  112                           #undef  MQX_USE_INLINE_MACROS
  113                           #define MQX_USE_INLINE_MACROS  MQX_FORCE_USE_I
                                NLINE_MACROS
  114                           #endif
  120                           #ifndef MQX_CHECK_ERRORS
  121                           #define MQX_CHECK_ERRORS 1
  122                           #endif
  131                           #ifndef MQX_CHECK_MEMORY_ALLOCATION_ERRORS
  132                           #define MQX_CHECK_MEMORY_ALLOCATION_ERRORS
                                 1
  133                           #endif
  141                           #ifndef MQX_CHECK_VALIDITY
  142                           #define MQX_CHECK_VALIDITY 1
  143                           #endif
  151                           #ifndef MQX_COMPONENT_DESTRUCTION
  152                           #define MQX_COMPONENT_DESTRUCTION 1
  153                           #endif
  160                           #ifndef MQXCFG_ENABLE_MSG_TIMEOUT_ERROR
  161                           #define MQXCFG_ENABLE_MSG_TIMEOUT_ERROR
                                 0
  162                           #endif
  169                           #ifndef MQX_IO_COMPONENT_DESTRUCTION
  170                           #define MQX_IO_COMPONENT_DESTRUCTION
                                 0
  171                           #endif
  182                           #ifndef MQX_DEFAULT_TIME_SLICE_IN_TICKS
  183                           #define MQX_DEFAULT_TIME_SLICE_IN_TICKS 
                                 0
  184                           #endif
  191                           #ifndef MQX_EXIT_ENABLED
  192                           #define MQX_EXIT_ENABLED 1
  193                           #endif
  202                           #ifndef MQX_EXTRA_TASK_STACK_ENABLE
  203                           #define MQX_EXTRA_TASK_STACK_ENABLE 1
  204                           #endif
  211                           #ifndef MQX_HAS_TIME_SLICE
  212                           #define MQX_HAS_TIME_SLICE 1
  213                           #endif
  220                           #ifndef MQX_INCLUDE_FLOATING_POINT_IO
  221                           #define MQX_INCLUDE_FLOATING_POINT_IO
                                 0
  222                           #endif
  229                           #ifndef MQX_IS_MULTI_PROCESSOR
  230                           #define MQX_IS_MULTI_PROCESSOR 1
  231                           #endif
  247                           #ifndef MQX_KERNEL_LOGGING
  248                           #define MQX_KERNEL_LOGGING   1
  249                           #endif
  259                           #ifndef MQX_LWLOG_TIME_STAMP_IN_TICKS
  260                           #define MQX_LWLOG_TIME_STAMP_IN_TICKS 
                                 1
  261                           #endif
  270                           #ifndef MQX_MEMORY_FREE_LIST_SORTED
  271                           #define MQX_MEMORY_FREE_LIST_SORTED  
                                 1
  272                           #endif
  282                           #ifndef MQX_MONITOR_STACK
  283                           #define MQX_MONITOR_STACK 1
  284                           #endif
  292                           #ifndef MQX_MUTEX_HAS_POLLING
  293                           #define MQX_MUTEX_HAS_POLLING 1
  294                           #endif
  304                           #ifndef MQX_PROFILING_ENABLE
  305                           #define MQX_PROFILING_ENABLE 0
  306                           #endif
  319                           #ifndef MQX_RUN_TIME_ERR_CHECK_ENABLE
  320                           #define MQX_RUN_TIME_ERR_CHECK_ENABLE
                                 0
  321                           #endif
  328                           #ifndef MQX_THREAD_LOCAL_STORAGE_ENABLE
  329                           #define MQX_THREAD_LOCAL_STORAGE_ENABLE
                                 0
  330                           #endif
  338                           #ifndef MQX_TAD_RESERVED_ENABLE
  339                           #define MQX_TAD_RESERVED_ENABLE 0
  340                           #endif
  350                           #ifndef MQX_TASK_CREATION_BLOCKS
  351                           #define MQX_TASK_CREATION_BLOCKS 1
  352                           #endif
  361                           #ifndef MQX_TASK_DESTRUCTION
  362                           #define MQX_TASK_DESTRUCTION 1
  363                           #endif
  371                           #ifndef MQX_TIMER_USES_TICKS_ONLY
  372                           #define MQX_TIMER_USES_TICKS_ONLY 0
  373                           #endif
  383                           #ifndef MQX_USE_32BIT_MESSAGE_QIDS
  384                           #define MQX_USE_32BIT_MESSAGE_QIDS 0
  385                           #endif
  396                           #ifndef MQX_USE_32BIT_TYPES
  397                           #define MQX_USE_32BIT_TYPES 0
  398                           #endif
  404                           #ifndef MQX_HAS_DYNAMIC_PRIORITIES
  405                           #define MQX_HAS_DYNAMIC_PRIORITIES 1
  406                           #endif
  413                           #ifndef MQX_HAS_EXCEPTION_HANDLER
  414                           #define MQX_HAS_EXCEPTION_HANDLER 1
  415                           #endif
  422                           #ifndef MQX_HAS_EXIT_HANDLER
  423                           #define MQX_HAS_EXIT_HANDLER 1
  424                           #endif
  431                           #ifndef MQX_HAS_HW_TICKS
  432                           #define MQX_HAS_HW_TICKS 1
  433                           #endif
  439                           #ifndef MQX_HAS_TASK_ENVIRONMENT
  440                           #define MQX_HAS_TASK_ENVIRONMENT 1
  441                           #endif
  448                           #ifndef MQX_HAS_TICK
  449                           #define MQX_HAS_TICK 1
  450                           #endif
  457                           #ifndef MQX_KD_HAS_COUNTER
  458                           #define MQX_KD_HAS_COUNTER 1
  459                           #endif
  465                           #ifndef MQX_TD_HAS_ERROR_CODE
  466                           #define MQX_TD_HAS_ERROR_CODE 1
  467                           #endif
  473                           #ifndef MQX_TD_HAS_PARENT
  474                           #define MQX_TD_HAS_PARENT 1
  475                           #endif
  483                           #ifndef MQX_TD_HAS_STACK_LIMIT
  484                           #define MQX_TD_HAS_STACK_LIMIT 1
  485                           #endif
  493                           #ifndef MQX_TD_HAS_TASK_TEMPLATE_PTR
  494                           #define MQX_TD_HAS_TASK_TEMPLATE_PTR
                                 1
  495                           #endif
  502                           #ifndef MQX_TD_HAS_TEMPLATE_INDEX
  503                           #define MQX_TD_HAS_TEMPLATE_INDEX 1
  504                           #endif
  510                           #ifndef MQX_USE_SMALL_MEM_COPY
  511                           #define MQX_USE_SMALL_MEM_COPY 0
  512                           #endif
  518                           #ifndef MQX_USE_SMALL_MEM_ZERO
  519                           #define MQX_USE_SMALL_MEM_ZERO 0
  520                           #endif
  526                           #ifndef MQX_USE_BLOCK_MEM_COPY
  527                           #define MQX_USE_BLOCK_MEM_COPY 1
  528                           #endif
  534                           #ifndef MQX_USE_BLOCK_MEM_ZERO
  535                           #define MQX_USE_BLOCK_MEM_ZERO 1
  536                           #endif
  543                           #ifndef MQX_USE_EVENTS
  544                           #define MQX_USE_EVENTS 1
  545                           #endif
  553                           #ifndef MQX_USE_IDLE_TASK
  554                           #define MQX_USE_IDLE_TASK 1
  555                           #endif
  562                           #ifndef MQX_USE_INTERRUPTS
  563                           #define MQX_USE_INTERRUPTS 1
  564                           #endif
  570                           #ifndef MQX_USE_IPC
  571                           #define MQX_USE_IPC 1
  572                           #endif
  582                           #ifndef MQX_USE_INLINE_MACROS
  583                           #define MQX_USE_INLINE_MACROS 1
  584                           #endif
  592                           #ifndef MQX_USE_IO
  593                           #define MQX_USE_IO 1
  594                           #endif
  602                           #ifndef MQX_USE_IO_COMPONENTS
  603                           #define MQX_USE_IO_COMPONENTS 1
  604                           #endif
  611                           #ifndef MQX_USE_LWEVENTS
  612                           #define MQX_USE_LWEVENTS 1
  613                           #endif
  620                           #ifndef MQX_USE_LOGS
  621                           #define MQX_USE_LOGS 1
  622                           #endif
  629                           #ifndef MQX_USE_LWLOGS
  630                           #define MQX_USE_LWLOGS 1
  631                           #endif
  638                           #ifndef MQX_USE_LWMEM_ALLOCATOR
  639                           #define MQX_USE_LWMEM_ALLOCATOR 0
  640                           #endif
  646                           #ifndef MQX_USE_LWMEM
  647                           #define MQX_USE_LWMEM 1
  648                           #endif
  655                           #ifndef MQX_USE_MEM
  656                               #if MQX_USE_LWMEM_ALLOCATOR
  657                                   #define MQX_USE_MEM         0
  658                               #else
  659                                   #define MQX_USE_MEM         1
  660                               #endif
  661                           #endif
  667                           #ifndef MQX_USE_UNCACHED_MEM
  668                               #if MQX_USE_LWMEM_ALLOCATOR
  669                                   #define MQX_USE_UNCACHED_MEM        
                                 0
  670                               #else
  671                                   #define MQX_USE_UNCACHED_MEM        
                                 1
  672                               #endif
  673                           #endif
  679                           #ifndef MQX_USE_LWMSGQ
  680                           #define MQX_USE_LWMSGQ 1
  681                           #endif
  688                           #ifndef MQX_USE_LWTIMER
  689                           #define MQX_USE_LWTIMER 1
  690                           #endif
  697                           #ifndef MQX_USE_MESSAGES
  698                           #define MQX_USE_MESSAGES 1
  699                           #endif
  706                           #ifndef MQX_USE_MUTEXES
  707                           #define MQX_USE_MUTEXES 1
  708                           #endif
  715                           #ifndef MQX_USE_NAME
  716                           #define MQX_USE_NAME 1
  717                           #endif
  724                           #ifndef MQX_USE_PARTITIONS
  725                           #define MQX_USE_PARTITIONS 1
  726                           #endif
  733                           #ifndef MQX_USE_SEMAPHORES
  734                           #define MQX_USE_SEMAPHORES 1
  735                           #endif
  742                           #ifndef MQX_USE_SW_WATCHDOGS
  743                           #define MQX_USE_SW_WATCHDOGS 1
  744                           #endif
  751                           #ifndef MQX_USE_TIMER
  752                           #define MQX_USE_TIMER 1
  753                           #endif
  761                           #ifndef MQX_VERIFY_KERNEL_DATA
  762                           #define MQX_VERIFY_KERNEL_DATA 1
  763                           #endif
  770                           #ifndef MQX_ALLOW_TYPED_MEMORY
  771                           #define MQX_ALLOW_TYPED_MEMORY 1
  772                           #endif
  779                           #ifndef MQX_ALLOC_ALLIGN_RESIZE
  780                           #define MQX_ALLOC_ALLIGN_RESIZE 0
  781                           #endif
  791                           #ifndef MQX_ROM_VECTORS
  792                           #define MQX_ROM_VECTORS 0
  793                           #endif
  804                           #ifndef MQX_SPARSE_ISR_TABLE
  805                           #define MQX_SPARSE_ISR_TABLE 0
  806                           #endif
  815                           #ifndef MQX_SPARSE_ISR_SHIFT
  816                           #define MQX_SPARSE_ISR_SHIFT 3
  817                           #endif
  824                           #ifndef MQX_FP_CONTEXT_CHECK
  825                           #define MQX_FP_CONTEXT_CHECK  0
  826                           #endif
  833                           #ifndef MQXCFG_ENABLE_FP
  834                           #define MQXCFG_ENABLE_FP  0
  835                           #endif
  842                           #ifndef MQXCFG_ENABLE_DSP
  843                           #define MQXCFG_ENABLE_DSP  0
  844                           #endif
  846                           #ifndef MQX_GUERRILLA_INTERRUPTS_EXIST
  847                           #define MQX_GUERRILLA_INTERRUPTS_EXIST 
                                 0
  848                           #endif
  854                           #ifndef MQXCFG_MEM_COPY
  855                           #define MQXCFG_MEM_COPY  1
  856                           #endif
  862                           #ifndef MQX_ENABLE_USER_MODE
  863                           #define MQX_ENABLE_USER_MODE        0
  864                           #endif
  870                           #ifndef MQX_DEFAULT_USER_ACCESS_RW
  871                           #define MQX_DEFAULT_USER_ACCESS_RW  1
  872                           #endif
  880                           #ifndef MQX_ENABLE_USER_STDAPI
  881                           #define MQX_ENABLE_USER_STDAPI      1
  882                           #endif
  888                           #ifndef MQX_ENABLE_LOW_POWER
  889                           #define MQX_ENABLE_LOW_POWER        0
  890                           #endif
  897                           #ifndef MQX_SUPPRESS_FILE_DEF
  898                           #define MQX_SUPPRESS_FILE_DEF 0
  899                           #endif
  904                           #ifndef MQX_SUPPRESS_STDIO_MACROS
  905                           #define MQX_SUPPRESS_STDIO_MACROS 0
  906                           #endif
  912                           #ifndef MQX_SUPPRESS_STRINGH_MACROS
  913                               #if defined(__ICCARM__) /* IAR */
  914                                   #if __VER__ >= 6000000
  915                                       #define MQX_SUPPRESS_STRINGH_MACRO
                                S 1
  916                                   #else
  917                                       #define MQX_SUPPRESS_STRINGH_MACRO
                                S 0
  918                                   #endif
  919                               #elif defined(__CC_ARM)
  920                                       #define MQX_SUPPRESS_STRINGH_MACRO
                                S 1
  921                               #else
  922                                   #define MQX_SUPPRESS_STRINGH_MACROS
                                 0
  923                               #endif
  924                           #endif
  929                           #define MQX_USE_COMPONENTS MQX_USE_NAME ||
                                 MQX_USE_SEMAPHORES  || MQX_USE_EVENTS ||
                                 MQX_USE_MUTEXES || MQX_USE_TIMER || \
  936                           #if MQX_USE_EVENTS || MQX_USE_SEMAPHORES
  937                           #if !MQX_USE_NAME
  938                           #error Enable MQX_USE_NAME for Semaphores and
                                 Events
  939                           #endif
  940                           #endif
  942                           #if MQX_USE_IPC
  943                           #if !MQX_USE_PARTITIONS
  944                           #error enable MQX_USE_PARTITIONS for
                                 IPC
  945                           #endif
  946                           #endif
  948                           #ifdef MQX_CRIPPLED_EVALUATION
  950                           #if MQX_CRIPPLED_EVALUATION
  951                           #if MQX_KERNEL_LOGGING && !MQX_EXIT_ENABLED
  952                           #error Enable MQX_EXIT_ENABLED for MQX
                                 crippled evaluation
  953                           #elif !MQX_KERNEL_LOGGING && MQX_EXIT_ENABLED
  954                           #error Disable MQX_EXIT_ENABLED for MQX
                                 crippled evaluation without MQX Kernel
                                 logging
  955                           #endif
  956                           #endif
  958                           #endif
  960                           #if MQX_KERNEL_LOGGING && !MQX_USE_LWLOGS
  961                           #error Set MQX_USE_LWLOGS to 1 when using
                                 MQX_KERNEL_LOGGING
  962                           #endif
  964                           #if !MQX_USE_LWMEM_ALLOCATOR && !MQX_USE_MEM
  966                           #endif
  968                           #if MQX_USE_LWMEM_ALLOCATOR && !MQX_USE_LWMEM
  969                           #error Set MQX_USE_LWMEM to 1 when using
                                 MQX_USE_LWMEM_ALLOCATOR
  970                           #endif
  972                           #if MQX_USE_LWMEM_ALLOCATOR && MQX_USE_UNCACHE
                                D_MEM
  973                           #error Set MQX_USE_UNCACHED_MEM to 0 when
                                 using MQX_USE_LWMEM_ALLOCATOR
  974                           #endif
  976                           #if MQX_SPARSE_ISR_TABLE && (MQX_SPARSE_ISR_SH
                                IFT < 1 || MQX_SPARSE_ISR_SHIFT > 7)
  977                           #error MQX_SPARSE_ISR_SHIFT out of range <1,
                                 7>
  978                           #endif
  980                           #if MQX_ENABLE_USER_MODE && !MQX_USE_LWMEM_ALL
                                OCATOR
  981                           #error Set MQX_USE_LWMEM_ALLOCATOR to 1 when
                                 using MQX_ENABLE_USER_MODE
  982                           #endif
  984                           #endif  /* MQX_LITE_VERSION_NUMBER */
  985                           
  986                           #endif /* __mqx_cnfg_h__ */
  987                           /* EOF */
   35                           #include "types.inc"
    1                           /*HEADER**************************************
                                ********************************
    2                           *
    3                           * Copyright (c) 2010-2011 Freescale Semiconduc
                                tor
    4                           * All Rights Reserved
    5                           *
    6                           **********************************************
                                ********************************
    7                           *
    8                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
    9                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   10                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   11                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   12                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   13                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   14                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   15                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   16                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   17                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   18                           * THE POSSIBILITY OF SUCH DAMAGE.
   19                           *
   20                           **********************************************
                                ********************************
   21                           *
   22                           * $FileName: types.inc$
   23                           * $Version : 3.8.8.0$
   24                           * $Date    : Aug-30-2011$
   25                           *
   26                           * Comments:
   27                           *   This file contains the assembler offsets
                                 calculated by the
   28                           *   program KRNL_OFF.C.  These offsets are to
                                 be included in
   29                           *   any assembler program that wishes to
                                 access kernel data
   30                           *   structures.
   31                           *
   32                           *END******************************************
                                *******************************/
   33                           
   34                           #include <asm_mac.h>
    1                           /**HEADER*************************************
                                ********************************
    2                           *
    3                           * Copyright (c) 2008 Freescale Semiconductor;
    4                           * All Rights Reserved
    5                           *
    6                           * Copyright (c) 2008 Embedded Access
                                 Inc.;
    7                           * All Rights Reserved
    8                           *
    9                           **********************************************
                                ********************************
   10                           *
   11                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
   12                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   13                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   14                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   15                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   16                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   17                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   18                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   19                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   20                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   21                           * THE POSSIBILITY OF SUCH DAMAGE.
   22                           *
   23                           **********************************************
                                ********************************
   24                           *
   25                           * $FileName: asm_mac.h$
   26                           * $Version : 3.8.6.0$
   27                           * $Date    : Oct-3-2012$
   28                           *
   29                           * Comments:
   30                           *   This file contains macros used by the IAR
                                 ARM assembler
   31                           *
   32                           *END******************************************
                                *******************************/
   33                           
   34                           #ifndef __asm_mac_h__
   35                           #define __asm_mac_h__   1
   37                           #define ASM_PREFIX(x)   x
   39                           #if defined(__IASMARM__)
   40                           #define ASM_EXTERN(label)       EXTERN 
                                 label
   41                           #define ASM_PUBLIC(label)       PUBLIC
                                 label
   42                           #elif defined(__GNUC__)
   43                           #define ASM_EXTERN(label)
   44                           #define ASM_PUBLIC(label)       .GLOBAL
                                 label
   45                           #endif
   47                           #if defined(__IASMARM__)
   48                           #define ASM_LABEL(label)         label
   49                           #define ASM_EQUATE(label, value) label   EQU 
                                 value
   50                           #define ASM_SET(label, value)    ASM_LABEL(lab
                                el) SET value
   51                           #elif defined(__GNUC__)
   52                           #define ASM_LABEL(label)         label:
   53                           #define ASM_EQUATE(label, value) .EQU label,
                                 value
   54                           #define ASM_SET(label, value)    .SET
                                 ASM_LABEL(label), value
   55                           #endif
   57                           #if defined(__IASMARM__)
   58                           #define ASM_ALIGN(value)        ALIGNROM 
                                 value/4
   59                           #elif defined(__GNUC__)
   60                           #define ASM_ALIGN(value)        .ALIGN
                                 value/4
   61                           #endif
   63                           #define ASM_CONST16(value)      DC16
                                 value
   64                           #define ASM_CONST32(value)      DC32
                                 value
   66                           #define ASM_LABEL_CONST32(label, value)
                                 ASM_LABEL(label) DC32 value
   68                           #if defined(__IASMARM__)
   69                           #define ASM_CODE_SECTION(name)         
                                 SECTION name : CODE (4)
   70                           #define ASM_CODE_SECTION_NOOPT(name)   
                                 SECTION name : CODE (4) : ROOT
   71                           #define ASM_DATA_SECTION(name)         
                                 SECTION name : DATA (4)
   72                           #define ASM_END                        
                                 END
   73                           #elif defined(__GNUC__)
   74                           #define ASM_CODE_SECTION(name)         
                                 .SECTION name
   75                           #define ASM_CODE_SECTION_NOOPT(name)   
                                 .SECTION name
   76                           #define ASM_DATA_SECTION(name)         
                                 .SECTION name
   77                           #define ASM_END
   78                           #endif
   80                           #define ASM_COMP_SPECIFIC_DIRECTIVES
   83                           #if defined(__IASMARM__)
  116                           #define ASM_PUBLIC_BEGIN(name) CFI Block
                                 CFIBlock_##name Using CFICommon0
  117                           #define ASM_PUBLIC_FUNC(name)  CFI Function
                                 name
  118                           #define ASM_PUBLIC_END(name)   CFI EndBlock
                                 CFIBlock_##name
  119                           #elif defined(__GNUC__)
  120                           #define ASM_PUBLIC_BEGIN(name)
  121                           #define ASM_PUBLIC_FUNC(name)
  122                           #define ASM_PUBLIC_END(name)
  123                           #endif
  125                           #endif /* __asm_mac_h__ */
   35                           
   36                           /*
   37                            * 'PSP_BLOCKED_STACK_STRUCT' size = 64 ,
                                 0x40
   38                            */
   39                           ASM_EQUATE(PSPB_ST_PC,                        
                                  60)     // 0x3C
   40                           
   41                           /*
   42                            * 'PSP_BLOCKED_FP_STRUCT'
   43                            */
   44                           ASM_EQUATE(FP_FPCR_OFFSET,                    
                                   0)     // 0x00
   45                           ASM_EQUATE(FP_FPSR_OFFSET,                    
                                   4)     // 0x04
   46                           ASM_EQUATE(FP_FPIAR_OFFSET,                   
                                   8)     // 0x08
   47                           ASM_EQUATE(FP_TID_OFFSET,                     
                                   12)    // 0x0C
   48                           ASM_EQUATE(FP_FPR0_OFFSET,                    
                                   16)    // 0x10
   49                           ASM_EQUATE(FP_FPR1_OFFSET,                    
                                   24)    // 0x18
   50                           ASM_EQUATE(FP_FPR2_OFFSET,                    
                                   32)    // 0x20
   51                           ASM_EQUATE(FP_FPR3_OFFSET,                    
                                   40)    // 0x28
   52                           ASM_EQUATE(FP_FPR4_OFFSET,                    
                                   48)    // 0x30
   53                           ASM_EQUATE(FP_FPR5_OFFSET,                    
                                   56)    // 0x38
   54                           ASM_EQUATE(FP_FPR6_OFFSET,                    
                                   64)    // 0x40
   55                           ASM_EQUATE(FP_FPR7_OFFSET,                    
                                   72)    // 0x48
   56                           
   57                           
   58                           /*
   59                            * 'TD_STRUCT' size = 216 , 0xd8
   60                            */
   61                           ASM_EQUATE(TD_TD_NEXT,                        
                                      0)
   62                           ASM_EQUATE(TD_TD_PREV,                        
                                      4)
   63                           ASM_EQUATE(TD_STATE,                          
                                      8)
   64                           ASM_EQUATE(TD_TASK_ID,                        
                                     12)
   65                           ASM_EQUATE(TD_STACK_BASE,                     
                                     16)
   66                           ASM_EQUATE(TD_STACK_PTR,                      
                                     20)
   67                           ASM_EQUATE(TD_STACK_LIMIT,                    
                                     24)
   68                           ASM_EQUATE(TD_MY_QUEUE,                       
                                     28)
   69                           ASM_EQUATE(TD_HOME_QUEUE,                     
                                     32)
   70                           ASM_EQUATE(TD_TASK_SR,                        
                                     36)
   71                           ASM_EQUATE(TD_RESERVED_1,                     
                                     38)
   72                           ASM_EQUATE(TD_FLAGS,                          
                                     40)
   73                           ASM_EQUATE(TD_FLOAT_CONTEXT_PTR,              
                                     52)
   74                           
   75                           /*
   76                            * 'READY_Q_STRUCT' size = 16 , 0x10
   77                            */
   78                           ASM_EQUATE(RQ_STRUCT_SIZE,                    
                                     16)
   79                           ASM_EQUATE(RQ_HEAD_READY_Q,                   
                                      0)
   80                           ASM_EQUATE(RQ_TAIL_READY_Q,                   
                                      4)
   81                           ASM_EQUATE(RQ_NEXT_Q,                         
                                      8)
   82                           ASM_EQUATE(RQ_ENABLE_SR,                      
                                     12)
   83                           ASM_EQUATE(RQ_PRIORITY,                       
                                     14)
   84                           
   85                           /*
   86                            * 'INTERRUPT_TABLE_STRUCT' size = 12 ,
                                 0xc
   87                            */
   88                           ASM_EQUATE(IT_STRUCT_SIZE,                    
                                     12)
   89                           ASM_EQUATE(IT_APP_ISR,                        
                                      0)
   90                           ASM_EQUATE(IT_APP_ISR_EXCEPTION_HANDLER,      
                                      4)
   91                           ASM_EQUATE(IT_APP_ISR_DATA,                   
                                      8)
   92                           
   93                           ASM_EQUATE(HASH_ISR_ITM_SIZE,                 
                                     20)
   94                           ASM_EQUATE(HASH_ISR_NUM,                      
                                     0)
   95                           ASM_EQUATE(HASH_ISR_ADDR,                     
                                     4)
   96                           ASM_EQUATE(HASH_ISR_EXCEPT_HNDL,              
                                     8)
   97                           ASM_EQUATE(HASH_ISR_DATA,                     
                                     12)
   98                           ASM_EQUATE(HASH_ISR_NEXT,                     
                                     16)
   99                           
  100                           /*
  101                            * 'KERNEL_DATA_STRUCT' size = 1156 ,
                                 0x484
  102                            */
  103                           ASM_EQUATE(KD_ADDRESSING_CAPABILITY,          
                                      0)  //  0x0
  104                           ASM_EQUATE(KD_ENDIANESS,                      
                                      4)  //  0x4
  105                           ASM_EQUATE(KD_CPU_TYPE,                       
                                      8)  //  0x8
  106                           ASM_EQUATE(KD_PSP_CFG_MEMORY_ALIGNMENT,       
                                     10)  //  0xa
  107                           ASM_EQUATE(KD_PSP_CFG_STACK_ALIGNMENT,        
                                     12)  //  0xc
  108                           ASM_EQUATE(KD_PSP_CFG_MEM_STOREBLOCK_ALIGNMENT
                                ,    14)  //  0xe
  109                           ASM_EQUATE(KD_CONFIG1,                        
                                     16)  //  0x10
  110                           ASM_EQUATE(KD_CONFIG2,                        
                                     18)  //  0x12
  111                           ASM_EQUATE(KD_FLAGS,                          
                                     20)  //  0x14
  112                           ASM_EQUATE(KD_DISABLE_SR,                     
                                     22)  //  0x16
  113                           ASM_EQUATE(KD_IN_ISR,                         
                                     24)  //  0x18
  114                           ASM_EQUATE(KD_ACTIVE_SR,                      
                                     26)  //  0x1a
  115                           ASM_EQUATE(KD_ACTIVE_PTR,                     
                                     28)  //  0x1c
  116                           ASM_EQUATE(KD_READY_Q_LIST,                   
                                     32)  //  0x20
  117                           ASM_EQUATE(KD_CURRENT_READY_Q,                
                                     36)  //  0x24
  118                           ASM_EQUATE(KD_DEFAULT_ISR,                    
                                     40)  //  0x28
  119                           ASM_EQUATE(KD_FIRST_USER_ISR_VECTOR,          
                                     44)  //  0x2c
  120                           ASM_EQUATE(KD_LAST_USER_ISR_VECTOR,           
                                     48)  //  0x30
  121                           ASM_EQUATE(KD_INTERRUPT_CONTEXT_PTR,          
                                     52)  //  0x34
  122                           ASM_EQUATE(KD_INTERRUPT_TABLE_PTR,            
                                     56)  //  0x38
  123                           ASM_EQUATE(KD_INTERRUPT_STACK_PTR,            
                                     60)  //  0x3c
  124                           
  125                           ASM_EQUATE(KD_LOG_CONTROL,                    
                                     64)  //  0x40
  126                           ASM_EQUATE(LOG_OLD_TD,                        
                                     68)  //  0x44
  127                           ASM_EQUATE(KD_FP_ACTIVE_PTR,                  
                                     72)  //  0x48
  128                           ASM_EQUATE(KD_DSP_ACTIVE_PTR,                 
                                     76)  //  0x4c
  129                           ASM_EQUATE(KD_SYSTEM_TD,                      
                                     80)  //  0x50
  130                           
   36                           #include "psp_prv.inc"
    1                           /*HEADER**************************************
                                *********************************
    2                           *
    3                           * Copyright (c) 2010-2012 Freescale Semiconduc
                                tor;
    4                           * All Rights Reserved
    5                           *
    6                           **********************************************
                                *********************************
    7                           *
    8                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
    9                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   10                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   11                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   12                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   13                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   14                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   15                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   16                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   17                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   18                           * THE POSSIBILITY OF SUCH DAMAGE.
   19                           *
   20                           **********************************************
                                *********************************
   21                           *
   22                           * $FileName: psp_prv.inc$
   23                           * $Version : 3.8.12.0$
   24                           * $Date    : Sep-19-2011$
   25                           *
   26                           * Comments:
   27                           *   This assembler header file contains
                                 private declarations for
   28                           *   use with the mqx assembler files
   29                           *
   30                           *END******************************************
                                *********************************/
   31                           
   32                           #include "asm_mac.h"
    1                           /**HEADER*************************************
                                ********************************
    2                           *
    3                           * Copyright (c) 2008 Freescale Semiconductor;
    4                           * All Rights Reserved
    5                           *
    6                           * Copyright (c) 2008 Embedded Access
                                 Inc.;
    7                           * All Rights Reserved
    8                           *
    9                           **********************************************
                                ********************************
   10                           *
   11                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
   12                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   13                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   14                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   15                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   16                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   17                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   18                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   19                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   20                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   21                           * THE POSSIBILITY OF SUCH DAMAGE.
   22                           *
   23                           **********************************************
                                ********************************
   24                           *
   25                           * $FileName: asm_mac.h$
   26                           * $Version : 3.8.6.0$
   27                           * $Date    : Oct-3-2012$
   28                           *
   29                           * Comments:
   30                           *   This file contains macros used by the IAR
                                 ARM assembler
   31                           *
   32                           *END******************************************
                                *******************************/
   33                           
   34                           #ifndef __asm_mac_h__
   35                           #define __asm_mac_h__   1
   37                           #define ASM_PREFIX(x)   x
   39                           #if defined(__IASMARM__)
   40                           #define ASM_EXTERN(label)       EXTERN 
                                 label
   41                           #define ASM_PUBLIC(label)       PUBLIC
                                 label
   42                           #elif defined(__GNUC__)
   43                           #define ASM_EXTERN(label)
   44                           #define ASM_PUBLIC(label)       .GLOBAL
                                 label
   45                           #endif
   47                           #if defined(__IASMARM__)
   48                           #define ASM_LABEL(label)         label
   49                           #define ASM_EQUATE(label, value) label   EQU 
                                 value
   50                           #define ASM_SET(label, value)    ASM_LABEL(lab
                                el) SET value
   51                           #elif defined(__GNUC__)
   52                           #define ASM_LABEL(label)         label:
   53                           #define ASM_EQUATE(label, value) .EQU label,
                                 value
   54                           #define ASM_SET(label, value)    .SET
                                 ASM_LABEL(label), value
   55                           #endif
   57                           #if defined(__IASMARM__)
   58                           #define ASM_ALIGN(value)        ALIGNROM 
                                 value/4
   59                           #elif defined(__GNUC__)
   60                           #define ASM_ALIGN(value)        .ALIGN
                                 value/4
   61                           #endif
   63                           #define ASM_CONST16(value)      DC16
                                 value
   64                           #define ASM_CONST32(value)      DC32
                                 value
   66                           #define ASM_LABEL_CONST32(label, value)
                                 ASM_LABEL(label) DC32 value
   68                           #if defined(__IASMARM__)
   69                           #define ASM_CODE_SECTION(name)         
                                 SECTION name : CODE (4)
   70                           #define ASM_CODE_SECTION_NOOPT(name)   
                                 SECTION name : CODE (4) : ROOT
   71                           #define ASM_DATA_SECTION(name)         
                                 SECTION name : DATA (4)
   72                           #define ASM_END                        
                                 END
   73                           #elif defined(__GNUC__)
   74                           #define ASM_CODE_SECTION(name)         
                                 .SECTION name
   75                           #define ASM_CODE_SECTION_NOOPT(name)   
                                 .SECTION name
   76                           #define ASM_DATA_SECTION(name)         
                                 .SECTION name
   77                           #define ASM_END
   78                           #endif
   80                           #define ASM_COMP_SPECIFIC_DIRECTIVES
   83                           #if defined(__IASMARM__)
  116                           #define ASM_PUBLIC_BEGIN(name) CFI Block
                                 CFIBlock_##name Using CFICommon0
  117                           #define ASM_PUBLIC_FUNC(name)  CFI Function
                                 name
  118                           #define ASM_PUBLIC_END(name)   CFI EndBlock
                                 CFIBlock_##name
  119                           #elif defined(__GNUC__)
  120                           #define ASM_PUBLIC_BEGIN(name)
  121                           #define ASM_PUBLIC_FUNC(name)
  122                           #define ASM_PUBLIC_END(name)
  123                           #endif
  125                           #endif /* __asm_mac_h__ */
   33                           #include "mqx_cnfg.h"
    1                           /*HEADER**************************************
                                *******************************
    2                           *
    3                           * Copyright (c) 2008-2010 Freescale Semiconduc
                                tor;
    4                           * All Rights Reserved
    5                           *
    6                           * Copyright (c) 2004-2008 Embedded Access
                                 Inc.;
    7                           * All Rights Reserved
    8                           *
    9                           * Copyright (c) 1989-2008 ARC International;
   10                           * All Rights Reserved
   11                           *
   12                           **********************************************
                                *****************************
   13                           *
   14                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
   15                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   16                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   17                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   18                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   19                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   20                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   21                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   22                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   23                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   24                           * THE POSSIBILITY OF SUCH DAMAGE.
   25                           *
   26                           **********************************************
                                ****************************
   27                           *
   28                           * $FileName: mqx_cnfg.h$
   29                           * $Version : 3.8.48.0$
   30                           * $Date    : Sep-19-2011$
   31                           *
   32                           * Comments:
   33                           *
   34                           *   This file contains the default configurati
                                on definitions for configuring
   35                           *   the various optional features of MQX.
                                 Individual config. Defines can be
   36                           *   overridden in the "user_config.h"
                                 file.
   37                           *
   38                           *   By default, MQX is configured as
                                 follows:
   39                           *    MQX_ALLOW_TYPED_MEMORY              
                                 1
   40                           *    MQX_COMPONENT_DESTRUCTION           
                                 1
   41                           *    MQX_DEFAULT_TIME_SLICE_IN_TICKS     
                                 0
   42                           *    MQX_EXIT_ENABLED                    
                                 1
   43                           *    MQX_EXTRA_TASK_STACK_ENABLE         
                                 1
   44                           *    MQX_HAS_TIME_SLICE                  
                                 1
   45                           *    MQX_CHECK_ERRORS                    
                                 1
   46                           *    MQX_CHECK_MEMORY_ALLOCATION_ERRORS  
                                 1
   47                           *    MQX_CHECK_VALIDITY                  
                                 1
   48                           *    MQX_INCLUDE_FLOATING_POINT_IO       
                                 0
   49                           *    MQX_IS_MULTI_PROCESSOR              
                                 1
   50                           *    MQX_KERNEL_LOGGING                  
                                 1
   51                           *    MQX_LWLOG_TIME_STAMP_IN_TICKS       
                                 1
   52                           *    MQX_MEMORY_FREE_LIST_SORTED         
                                 1
   53                           *    MQX_MONITOR_STACK                   
                                 1
   54                           *    MQX_MUTEX_HAS_POLLING               
                                 1
   55                           *    MQX_PROFILING_ENABLE                
                                 0
   56                           *    MQX_ROM_VECTORS                     
                                 0
   57                           *    MQX_RUN_TIME_ERR_CHECK_ENABLE       
                                 0
   58                           *    MQX_TASK_CREATION_BLOCKS            
                                 1
   59                           *    MQX_TASK_DESTRUCTION                
                                 1
   60                           *    MQX_TIMER_USES_TICKS_ONLY           
                                 0
   61                           *    MQX_USE_32BIT_MESSAGE_QIDS          
                                 0
   62                           *    MQX_USE_32BIT_TYPES                 
                                 0
   63                           *    MQX_USE_EVENTS                      
                                 1
   64                           *    MQX_USE_IDLE_TASK                   
                                 1
   65                           *    MQX_USE_INLINE_MACROS               
                                 1
   66                           *    MQX_USE_IPC                         
                                 1
   67                           *    MQX_USE_LOGS                        
                                 1
   68                           *    MQX_USE_LWEVENTS                    
                                 1
   69                           *    MQX_USE_LWLOGS                      
                                 1
   70                           *    MQX_USE_LWMEM                       
                                 1
   71                           *    MQX_USE_LWMEM_ALLOCATOR             
                                 0
   72                           *    MQX_USE_LWMSGQ                      
                                 1
   73                           *    MQX_USE_LWTIMER                     
                                 1
   74                           *    MQX_USE_MESSAGES                    
                                 1
   75                           *    MQX_USE_MUTEXES                     
                                 1
   76                           *    MQX_USE_NAME                        
                                 1
   77                           *    MQX_USE_PARTITIONS                  
                                 1
   78                           *    MQX_USE_SEMAPHORES                  
                                 1
   79                           *    MQX_USE_SW_WATCHDOGS                
                                 1
   80                           *    MQX_USE_TIMER                       
                                 1
   81                           *    MQX_VERIFY_KERNEL_DATA              
                                 1
   82                           *    MQX_ENABLE_USER_MODE                
                                 0
   83                           *    MQX_ENABLE_LOW_POWER                
                                 0
   84                           *
   85                           *END******************************************
                                ******************************/
   86                           
   87                           #ifndef __mqx_cnfg_h__
   88                           #define __mqx_cnfg_h__
   94                           #include "user_config.h"
   96                           #ifdef MQX_LITE_VERSION_NUMBER
   97                           #include "mqxlite_cnfg.h"
   99                           #else
  104                           #ifndef MQX_CPU
  105                           #error  You must define target processor in
                                 "user_config.h" (MQX_CPU)
  106                           #endif
  111                           #ifdef MQX_FORCE_USE_INLINE_MACROS
  112                           #undef  MQX_USE_INLINE_MACROS
  113                           #define MQX_USE_INLINE_MACROS  MQX_FORCE_USE_I
                                NLINE_MACROS
  114                           #endif
  120                           #ifndef MQX_CHECK_ERRORS
  121                           #define MQX_CHECK_ERRORS 1
  122                           #endif
  131                           #ifndef MQX_CHECK_MEMORY_ALLOCATION_ERRORS
  132                           #define MQX_CHECK_MEMORY_ALLOCATION_ERRORS
                                 1
  133                           #endif
  141                           #ifndef MQX_CHECK_VALIDITY
  142                           #define MQX_CHECK_VALIDITY 1
  143                           #endif
  151                           #ifndef MQX_COMPONENT_DESTRUCTION
  152                           #define MQX_COMPONENT_DESTRUCTION 1
  153                           #endif
  160                           #ifndef MQXCFG_ENABLE_MSG_TIMEOUT_ERROR
  161                           #define MQXCFG_ENABLE_MSG_TIMEOUT_ERROR
                                 0
  162                           #endif
  169                           #ifndef MQX_IO_COMPONENT_DESTRUCTION
  170                           #define MQX_IO_COMPONENT_DESTRUCTION
                                 0
  171                           #endif
  182                           #ifndef MQX_DEFAULT_TIME_SLICE_IN_TICKS
  183                           #define MQX_DEFAULT_TIME_SLICE_IN_TICKS 
                                 0
  184                           #endif
  191                           #ifndef MQX_EXIT_ENABLED
  192                           #define MQX_EXIT_ENABLED 1
  193                           #endif
  202                           #ifndef MQX_EXTRA_TASK_STACK_ENABLE
  203                           #define MQX_EXTRA_TASK_STACK_ENABLE 1
  204                           #endif
  211                           #ifndef MQX_HAS_TIME_SLICE
  212                           #define MQX_HAS_TIME_SLICE 1
  213                           #endif
  220                           #ifndef MQX_INCLUDE_FLOATING_POINT_IO
  221                           #define MQX_INCLUDE_FLOATING_POINT_IO
                                 0
  222                           #endif
  229                           #ifndef MQX_IS_MULTI_PROCESSOR
  230                           #define MQX_IS_MULTI_PROCESSOR 1
  231                           #endif
  247                           #ifndef MQX_KERNEL_LOGGING
  248                           #define MQX_KERNEL_LOGGING   1
  249                           #endif
  259                           #ifndef MQX_LWLOG_TIME_STAMP_IN_TICKS
  260                           #define MQX_LWLOG_TIME_STAMP_IN_TICKS 
                                 1
  261                           #endif
  270                           #ifndef MQX_MEMORY_FREE_LIST_SORTED
  271                           #define MQX_MEMORY_FREE_LIST_SORTED  
                                 1
  272                           #endif
  282                           #ifndef MQX_MONITOR_STACK
  283                           #define MQX_MONITOR_STACK 1
  284                           #endif
  292                           #ifndef MQX_MUTEX_HAS_POLLING
  293                           #define MQX_MUTEX_HAS_POLLING 1
  294                           #endif
  304                           #ifndef MQX_PROFILING_ENABLE
  305                           #define MQX_PROFILING_ENABLE 0
  306                           #endif
  319                           #ifndef MQX_RUN_TIME_ERR_CHECK_ENABLE
  320                           #define MQX_RUN_TIME_ERR_CHECK_ENABLE
                                 0
  321                           #endif
  328                           #ifndef MQX_THREAD_LOCAL_STORAGE_ENABLE
  329                           #define MQX_THREAD_LOCAL_STORAGE_ENABLE
                                 0
  330                           #endif
  338                           #ifndef MQX_TAD_RESERVED_ENABLE
  339                           #define MQX_TAD_RESERVED_ENABLE 0
  340                           #endif
  350                           #ifndef MQX_TASK_CREATION_BLOCKS
  351                           #define MQX_TASK_CREATION_BLOCKS 1
  352                           #endif
  361                           #ifndef MQX_TASK_DESTRUCTION
  362                           #define MQX_TASK_DESTRUCTION 1
  363                           #endif
  371                           #ifndef MQX_TIMER_USES_TICKS_ONLY
  372                           #define MQX_TIMER_USES_TICKS_ONLY 0
  373                           #endif
  383                           #ifndef MQX_USE_32BIT_MESSAGE_QIDS
  384                           #define MQX_USE_32BIT_MESSAGE_QIDS 0
  385                           #endif
  396                           #ifndef MQX_USE_32BIT_TYPES
  397                           #define MQX_USE_32BIT_TYPES 0
  398                           #endif
  404                           #ifndef MQX_HAS_DYNAMIC_PRIORITIES
  405                           #define MQX_HAS_DYNAMIC_PRIORITIES 1
  406                           #endif
  413                           #ifndef MQX_HAS_EXCEPTION_HANDLER
  414                           #define MQX_HAS_EXCEPTION_HANDLER 1
  415                           #endif
  422                           #ifndef MQX_HAS_EXIT_HANDLER
  423                           #define MQX_HAS_EXIT_HANDLER 1
  424                           #endif
  431                           #ifndef MQX_HAS_HW_TICKS
  432                           #define MQX_HAS_HW_TICKS 1
  433                           #endif
  439                           #ifndef MQX_HAS_TASK_ENVIRONMENT
  440                           #define MQX_HAS_TASK_ENVIRONMENT 1
  441                           #endif
  448                           #ifndef MQX_HAS_TICK
  449                           #define MQX_HAS_TICK 1
  450                           #endif
  457                           #ifndef MQX_KD_HAS_COUNTER
  458                           #define MQX_KD_HAS_COUNTER 1
  459                           #endif
  465                           #ifndef MQX_TD_HAS_ERROR_CODE
  466                           #define MQX_TD_HAS_ERROR_CODE 1
  467                           #endif
  473                           #ifndef MQX_TD_HAS_PARENT
  474                           #define MQX_TD_HAS_PARENT 1
  475                           #endif
  483                           #ifndef MQX_TD_HAS_STACK_LIMIT
  484                           #define MQX_TD_HAS_STACK_LIMIT 1
  485                           #endif
  493                           #ifndef MQX_TD_HAS_TASK_TEMPLATE_PTR
  494                           #define MQX_TD_HAS_TASK_TEMPLATE_PTR
                                 1
  495                           #endif
  502                           #ifndef MQX_TD_HAS_TEMPLATE_INDEX
  503                           #define MQX_TD_HAS_TEMPLATE_INDEX 1
  504                           #endif
  510                           #ifndef MQX_USE_SMALL_MEM_COPY
  511                           #define MQX_USE_SMALL_MEM_COPY 0
  512                           #endif
  518                           #ifndef MQX_USE_SMALL_MEM_ZERO
  519                           #define MQX_USE_SMALL_MEM_ZERO 0
  520                           #endif
  526                           #ifndef MQX_USE_BLOCK_MEM_COPY
  527                           #define MQX_USE_BLOCK_MEM_COPY 1
  528                           #endif
  534                           #ifndef MQX_USE_BLOCK_MEM_ZERO
  535                           #define MQX_USE_BLOCK_MEM_ZERO 1
  536                           #endif
  543                           #ifndef MQX_USE_EVENTS
  544                           #define MQX_USE_EVENTS 1
  545                           #endif
  553                           #ifndef MQX_USE_IDLE_TASK
  554                           #define MQX_USE_IDLE_TASK 1
  555                           #endif
  562                           #ifndef MQX_USE_INTERRUPTS
  563                           #define MQX_USE_INTERRUPTS 1
  564                           #endif
  570                           #ifndef MQX_USE_IPC
  571                           #define MQX_USE_IPC 1
  572                           #endif
  582                           #ifndef MQX_USE_INLINE_MACROS
  583                           #define MQX_USE_INLINE_MACROS 1
  584                           #endif
  592                           #ifndef MQX_USE_IO
  593                           #define MQX_USE_IO 1
  594                           #endif
  602                           #ifndef MQX_USE_IO_COMPONENTS
  603                           #define MQX_USE_IO_COMPONENTS 1
  604                           #endif
  611                           #ifndef MQX_USE_LWEVENTS
  612                           #define MQX_USE_LWEVENTS 1
  613                           #endif
  620                           #ifndef MQX_USE_LOGS
  621                           #define MQX_USE_LOGS 1
  622                           #endif
  629                           #ifndef MQX_USE_LWLOGS
  630                           #define MQX_USE_LWLOGS 1
  631                           #endif
  638                           #ifndef MQX_USE_LWMEM_ALLOCATOR
  639                           #define MQX_USE_LWMEM_ALLOCATOR 0
  640                           #endif
  646                           #ifndef MQX_USE_LWMEM
  647                           #define MQX_USE_LWMEM 1
  648                           #endif
  655                           #ifndef MQX_USE_MEM
  656                               #if MQX_USE_LWMEM_ALLOCATOR
  657                                   #define MQX_USE_MEM         0
  658                               #else
  659                                   #define MQX_USE_MEM         1
  660                               #endif
  661                           #endif
  667                           #ifndef MQX_USE_UNCACHED_MEM
  668                               #if MQX_USE_LWMEM_ALLOCATOR
  669                                   #define MQX_USE_UNCACHED_MEM        
                                 0
  670                               #else
  671                                   #define MQX_USE_UNCACHED_MEM        
                                 1
  672                               #endif
  673                           #endif
  679                           #ifndef MQX_USE_LWMSGQ
  680                           #define MQX_USE_LWMSGQ 1
  681                           #endif
  688                           #ifndef MQX_USE_LWTIMER
  689                           #define MQX_USE_LWTIMER 1
  690                           #endif
  697                           #ifndef MQX_USE_MESSAGES
  698                           #define MQX_USE_MESSAGES 1
  699                           #endif
  706                           #ifndef MQX_USE_MUTEXES
  707                           #define MQX_USE_MUTEXES 1
  708                           #endif
  715                           #ifndef MQX_USE_NAME
  716                           #define MQX_USE_NAME 1
  717                           #endif
  724                           #ifndef MQX_USE_PARTITIONS
  725                           #define MQX_USE_PARTITIONS 1
  726                           #endif
  733                           #ifndef MQX_USE_SEMAPHORES
  734                           #define MQX_USE_SEMAPHORES 1
  735                           #endif
  742                           #ifndef MQX_USE_SW_WATCHDOGS
  743                           #define MQX_USE_SW_WATCHDOGS 1
  744                           #endif
  751                           #ifndef MQX_USE_TIMER
  752                           #define MQX_USE_TIMER 1
  753                           #endif
  761                           #ifndef MQX_VERIFY_KERNEL_DATA
  762                           #define MQX_VERIFY_KERNEL_DATA 1
  763                           #endif
  770                           #ifndef MQX_ALLOW_TYPED_MEMORY
  771                           #define MQX_ALLOW_TYPED_MEMORY 1
  772                           #endif
  779                           #ifndef MQX_ALLOC_ALLIGN_RESIZE
  780                           #define MQX_ALLOC_ALLIGN_RESIZE 0
  781                           #endif
  791                           #ifndef MQX_ROM_VECTORS
  792                           #define MQX_ROM_VECTORS 0
  793                           #endif
  804                           #ifndef MQX_SPARSE_ISR_TABLE
  805                           #define MQX_SPARSE_ISR_TABLE 0
  806                           #endif
  815                           #ifndef MQX_SPARSE_ISR_SHIFT
  816                           #define MQX_SPARSE_ISR_SHIFT 3
  817                           #endif
  824                           #ifndef MQX_FP_CONTEXT_CHECK
  825                           #define MQX_FP_CONTEXT_CHECK  0
  826                           #endif
  833                           #ifndef MQXCFG_ENABLE_FP
  834                           #define MQXCFG_ENABLE_FP  0
  835                           #endif
  842                           #ifndef MQXCFG_ENABLE_DSP
  843                           #define MQXCFG_ENABLE_DSP  0
  844                           #endif
  846                           #ifndef MQX_GUERRILLA_INTERRUPTS_EXIST
  847                           #define MQX_GUERRILLA_INTERRUPTS_EXIST 
                                 0
  848                           #endif
  854                           #ifndef MQXCFG_MEM_COPY
  855                           #define MQXCFG_MEM_COPY  1
  856                           #endif
  862                           #ifndef MQX_ENABLE_USER_MODE
  863                           #define MQX_ENABLE_USER_MODE        0
  864                           #endif
  870                           #ifndef MQX_DEFAULT_USER_ACCESS_RW
  871                           #define MQX_DEFAULT_USER_ACCESS_RW  1
  872                           #endif
  880                           #ifndef MQX_ENABLE_USER_STDAPI
  881                           #define MQX_ENABLE_USER_STDAPI      1
  882                           #endif
  888                           #ifndef MQX_ENABLE_LOW_POWER
  889                           #define MQX_ENABLE_LOW_POWER        0
  890                           #endif
  897                           #ifndef MQX_SUPPRESS_FILE_DEF
  898                           #define MQX_SUPPRESS_FILE_DEF 0
  899                           #endif
  904                           #ifndef MQX_SUPPRESS_STDIO_MACROS
  905                           #define MQX_SUPPRESS_STDIO_MACROS 0
  906                           #endif
  912                           #ifndef MQX_SUPPRESS_STRINGH_MACROS
  913                               #if defined(__ICCARM__) /* IAR */
  914                                   #if __VER__ >= 6000000
  915                                       #define MQX_SUPPRESS_STRINGH_MACRO
                                S 1
  916                                   #else
  917                                       #define MQX_SUPPRESS_STRINGH_MACRO
                                S 0
  918                                   #endif
  919                               #elif defined(__CC_ARM)
  920                                       #define MQX_SUPPRESS_STRINGH_MACRO
                                S 1
  921                               #else
  922                                   #define MQX_SUPPRESS_STRINGH_MACROS
                                 0
  923                               #endif
  924                           #endif
  929                           #define MQX_USE_COMPONENTS MQX_USE_NAME ||
                                 MQX_USE_SEMAPHORES  || MQX_USE_EVENTS ||
                                 MQX_USE_MUTEXES || MQX_USE_TIMER || \
  936                           #if MQX_USE_EVENTS || MQX_USE_SEMAPHORES
  937                           #if !MQX_USE_NAME
  938                           #error Enable MQX_USE_NAME for Semaphores and
                                 Events
  939                           #endif
  940                           #endif
  942                           #if MQX_USE_IPC
  943                           #if !MQX_USE_PARTITIONS
  944                           #error enable MQX_USE_PARTITIONS for
                                 IPC
  945                           #endif
  946                           #endif
  948                           #ifdef MQX_CRIPPLED_EVALUATION
  950                           #if MQX_CRIPPLED_EVALUATION
  951                           #if MQX_KERNEL_LOGGING && !MQX_EXIT_ENABLED
  952                           #error Enable MQX_EXIT_ENABLED for MQX
                                 crippled evaluation
  953                           #elif !MQX_KERNEL_LOGGING && MQX_EXIT_ENABLED
  954                           #error Disable MQX_EXIT_ENABLED for MQX
                                 crippled evaluation without MQX Kernel
                                 logging
  955                           #endif
  956                           #endif
  958                           #endif
  960                           #if MQX_KERNEL_LOGGING && !MQX_USE_LWLOGS
  961                           #error Set MQX_USE_LWLOGS to 1 when using
                                 MQX_KERNEL_LOGGING
  962                           #endif
  964                           #if !MQX_USE_LWMEM_ALLOCATOR && !MQX_USE_MEM
  966                           #endif
  968                           #if MQX_USE_LWMEM_ALLOCATOR && !MQX_USE_LWMEM
  969                           #error Set MQX_USE_LWMEM to 1 when using
                                 MQX_USE_LWMEM_ALLOCATOR
  970                           #endif
  972                           #if MQX_USE_LWMEM_ALLOCATOR && MQX_USE_UNCACHE
                                D_MEM
  973                           #error Set MQX_USE_UNCACHED_MEM to 0 when
                                 using MQX_USE_LWMEM_ALLOCATOR
  974                           #endif
  976                           #if MQX_SPARSE_ISR_TABLE && (MQX_SPARSE_ISR_SH
                                IFT < 1 || MQX_SPARSE_ISR_SHIFT > 7)
  977                           #error MQX_SPARSE_ISR_SHIFT out of range <1,
                                 7>
  978                           #endif
  980                           #if MQX_ENABLE_USER_MODE && !MQX_USE_LWMEM_ALL
                                OCATOR
  981                           #error Set MQX_USE_LWMEM_ALLOCATOR to 1 when
                                 using MQX_ENABLE_USER_MODE
  982                           #endif
  984                           #endif  /* MQX_LITE_VERSION_NUMBER */
  986                           #endif /* __mqx_cnfg_h__ */
  987                           /* EOF */
   34                           
   35                           /*********************************************
                                ********************************
   36                            *                         EXTERNAL REFERENCES
   37                            *********************************************
                                ********************************/
   38                           
   39                           #if MQX_KERNEL_LOGGING
   46                           #endif
   47                                   ASM_EXTERN(_mqx_kernel_data)
   48                                   ASM_EXTERN(_mqx_system_stack)
   49                           
   50                                   ASM_EXTERN(_psp_irq_sp)
   51                                   ASM_EXTERN(_psp_fiq_sp)
   52                                   ASM_EXTERN(_psp_undef_sp)
   53                                   ASM_EXTERN(_psp_abort_sp)
   54                           
   55                           /*********************************************
                                ********************************
   56                            *                       CONSTANT DECLARATIONS
   57                            *
   58                            * The following are the bits in the CONFIG
                                 field of the kernel data structure
   59                            * to set for the psp options.
   60                            * NOTE: These must agree with values in
                                 mqx_prv.h or mqxlite_prv.h
   61                            *
   62                            *********************************************
                                ********************************/
   63                           
   64                           ASM_EQUATE(PSP_CNFG_MQX_KERNEL_LOGGING,
                                 0x8000)
   65                           ASM_EQUATE(PSP_CNFG_FP_REGISTERS_EXIST,
                                 0x4000)
   66                           
   67                           #ifndef MQX_FP_REGISTERS_EXIST
   68                           #define MQX_FP_REGISTERS_EXIST 0
   69                           #endif
   70                           
   71                           #if MQX_KERNEL_LOGGING == 1
   72                           #if MQX_FP_REGISTERS_EXIST == 1
   74                           #else
   76                           #endif
   77                           #else
   78                           #if MQX_FP_REGISTERS_EXIST == 1
   80                           #else
   81                           ASM_EQUATE(PSP_CNFG, 0)
   82                           #endif
   83                           #endif
   84                           
   85                           
   86                           /*
   87                            * Task FLAGS bits
   88                            * These must match definitions in mqx_prv.h
   89                            */
   90                           
   91                           ASM_EQUATE(FP_TASK_MASK, 0x0002)
   92                           ASM_EQUATE(FP_CONTEXT_SAVED_MASK, 0x0200)
   93                           ASM_EQUATE(FP_CONTEXT_CLEAR_MASK, 0xfdff)
   94                           ASM_EQUATE(PREEMPTION_DISABLED, 0x1000)
   95                           
   96                           /*********************************************
                                ********************************
   97                            *                      MACRO DECLARATIONS
   98                            *********************************************
                                ********************************/
   99                           #ifdef __IASMARM__ /* IAR */
  100                           
  101                           /* This macro returns the address of the
                                 kernel data in the specified register
                                 */
  102                           GET_KERNEL_DATA MACRO reg
  103                                   ldr reg, =ASM_PREFIX(_mqx_kernel_data)
  104                                   ldr reg, [reg, #0]
  105                                   ENDM
  106                           
  107                           SET_FUNCTION_ALIGNMENT MACRO
  108                                           ALIGNROM 2
  109                                   ENDM
  110                           
  111                           /* This macro calls the kernel logging
                                 function, if logging enabled */
  112                           KLOG    MACRO KDATA, KLOG_FUNCTION
  113                           #if MQX_KERNEL_LOGGING
  114                                   LOCAL klog_end
  115                                   push {r0, r2, r3}
  116                                   ldr r2, [KDATA, #KD_LOG_CONTROL]
  117                                   cmp r2, #1
  118                                   beq klog_end
  119                                           
  120                                   push {lr}
  121                                   bl KLOG_FUNCTION
  122                                   pop {r2}
  123                                   mov lr, r2
  124                           klog_end:
  125                                   pop {r0, r2, r3}
  126                           #endif
  127                                   ENDM
  128                           
  129                           /* This macro stores active task registers in
                                 the following order (from higher addresses to
                                 lower addresses):
  130                              xPSR, PC, LR, R12, R3, R2, R1, R0, R11,
                                 R10, R9, R8, R7, R6, R5, R4, PRIMASK
                                 */
  131                           STORE_ALL_REGISTERS MACRO
  132                                   push {r0-r7} //r0-r4 will be later
                                 overwritten
  133                                   mov r0, r8
  134                                   mov r1, r9
  135                                   mov r2, r10
  136                                   mov r3, r11
  137                                   push {r0-r3}
  138                                   push {r4-r7}
  139                                   mrs  r4, PRIMASK
  140                                   push {r4}
  141                                   mrs r1, PSP //PSP must be kept in
                                 r1
  142                                   //get APSR and orr it with 0x01000000
                                 (thumb bit set)
  143                                   mrs r5, APSR 
  144                                   ldr r6, =0x01000000
  145                                   orrs r5, r5, r6
  146                                   mov r2, r12
  147                                   mov r3, lr
  148                                   mov r4, lr //pc
  149                                   mov r0, r1
  150                                   adds r0, r0, #52
  151                                   stm r0!, {r2-r5}
  152                                   ENDM
  153                            
  154                           #elif defined __CC_ARM /* Keil */
  170                           #if MQX_KERNEL_LOGGING
  182                           #endif
  211                           #else  /* CW */
  256                           #ifdef __GNUC__
  258                           #else
  260                           #endif
  265                           #ifdef __GNUC__
  267                           #else
  269                           #endif
  273                           #endif
   37                           
   38                           #define __ASM__
   39                           
   40                           #ifdef __CWARM__
   41                           #include "kinetis.h"
   42                           #else
   43                           #include "psp_cpu.h"
    1                           /**HEADER*************************************
                                *********************************
    2                           *
    3                           * Copyright (c) 2010 Freescale Semiconductor;
    4                           * All Rights Reserved
    5                           *
    6                           **********************************************
                                *********************************
    7                           *
    8                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
    9                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   10                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   11                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   12                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   13                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   14                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   15                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   16                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   17                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   18                           * THE POSSIBILITY OF SUCH DAMAGE.
   19                           *
   20                           **********************************************
                                *********************************
   21                           *
   22                           * $FileName: psp_cpu.h$
   23                           * $Version : 3.8.7.0$
   24                           * $Date    : Sep-7-2011$
   25                           *
   26                           * Comments:
   27                           *
   28                           *   This file provides a generic header file
                                 for use by the mqx kernel
   29                           *   for including processor specific
                                 information
   30                           *
   31                           *END******************************************
                                ********************************/
   32                           
   33                           #ifndef __psp_cpu_h__
   34                               #define __psp_cpu_h__
   35                           
   36                           #include "psp_cpudef.h"
    1                           /**HEADER*************************************
                                ********************************
    2                           *
    3                           * Copyright (c) 2010 Freescale Semiconductor;
    4                           * All Rights Reserved
    5                           *
    6                           **********************************************
                                ********************************
    7                           *
    8                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
    9                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   10                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   11                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   12                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   13                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   14                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   15                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   16                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   17                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   18                           * THE POSSIBILITY OF SUCH DAMAGE.
   19                           *
   20                           **********************************************
                                ********************************
   21                           *
   22                           * $FileName: psp_cpudef.h$
   23                           * $Version : 3.8.11.0$
   24                           * $Date    : Sep-8-2011$
   25                           *
   26                           * Comments:
   27                           *   Processor and platform identifiers defined
                                 here
   28                           *
   29                           *END******************************************
                                *******************************/
   30                           
   31                           #ifndef __psp_cpudef_h__
   32                               #define __psp_cpudef_h__
   33                           
   34                           #include "mqx_cpudef.h"
    1                           /*HEADER**************************************
                                *******************************
    2                           *
    3                           * Copyright (c) 2008 Freescale Semiconductor;
    4                           * All Rights Reserved
    5                           *
    6                           **********************************************
                                *****************************
    7                           *
    8                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
    9                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   10                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   11                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   12                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   13                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   14                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   15                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   16                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   17                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   18                           * THE POSSIBILITY OF SUCH DAMAGE.
   19                           *
   20                           **********************************************
                                ****************************
   21                           *
   22                           * $FileName: mqx_cpudef.h$
   23                           * $Version : 3.7.3.0$
   24                           * $Date    : Feb-28-2011$
   25                           *
   26                           * Comments:
   27                           *
   28                           *
   29                           *END******************************************
                                ******************************/
   30                           
   31                           #ifndef __mqx_cpudef_h__
   32                           #define __mqx_cpudef_h__
   33                           
   34                           /* generating macros */
   35                           #define PSP_CPU_ARCH_MASK           (0x0f)
   36                           #define PSP_CPU_ARCH_SHIFT          (12)
   37                           #define PSP_CPU_GROUP_MASK          (0xff)
   38                           #define PSP_CPU_GROUP_SHIFT         (4)
   39                           #define PSP_CPU_VAR_MASK            (0x0f)
   40                           #define PSP_CPU_VAR_SHIFT           (0)
   41                           
   42                           
   43                           #define PSP_CPU_ARCH(arch)          ((arch &
                                 PSP_CPU_ARCH_MASK)  << PSP_CPU_ARCH_SHIFT)
   44                           #define PSP_CPU_GROUP(grp)          ((grp &
                                 PSP_CPU_GROUP_MASK)  << PSP_CPU_GROUP_SHIFT)
   45                           #define PSP_CPU_VAR(var)            ((var &
                                 PSP_CPU_VAR_MASK)    << PSP_CPU_VAR_SHIFT)
   46                           
   47                           #define PSP_GET_CPU_ARCH(num)       ((num >>
                                 PSP_CPU_ARCH_SHIFT)  & PSP_CPU_ARCH_MASK)
   48                           #define PSP_GET_CPU_GROUP(num)      ((num >>
                                 PSP_CPU_GROUP_SHIFT) & PSP_CPU_GROUP_MASK)
   49                           #define PSP_GET_CPU_VAR(num)        ((num >>
                                 PSP_CPU_VAR_SHIFT)   & PSP_CPU_VAR_MASK)
   50                           
   51                           #define PSP_CPU_NUM(arch, grp, var) (PSP_CPU_A
                                RCH(arch) | PSP_CPU_GROUP(grp) | PSP_CPU_VAR(va
                                r))
   52                           
   53                           /* architecture defines */
   54                           #define PSP_CPU_ARCH_COLDFIRE          
                                 (1)
   55                           #define PSP_CPU_ARCH_ARM_CORTEX_M4     
                                 (2)
   56                           #define PSP_CPU_ARCH_PPC               
                                 (3)
   57                           #define PSP_CPU_ARCH_ARM_CORTEX_M0P    
                                 (4)
   58                           #define PSP_CPU_ARCH_ARM_CORTEX_A5     
                                 (5)
   59                           #define PSP_CPU_ARCH_ARM_CORTEX_A8     
                                 (6)
   60                           #define PSP_CPU_ARCH_ARM_OTHER         
                                 (10)
   61                           
   62                           #define PSP_MQX_CPU_IS_PPC             
                                 ((PSP_GET_CPU_ARCH(MQX_CPU) == PSP_CPU_ARCH_PP
                                C))
   63                           #define PSP_MQX_CPU_IS_COLDFIRE        
                                 ((PSP_GET_CPU_ARCH(MQX_CPU) == PSP_CPU_ARCH_CO
                                LDFIRE))
   64                           #define PSP_MQX_CPU_IS_ARM_CORTEX_M0P  
                                 ((PSP_GET_CPU_ARCH(MQX_CPU) == PSP_CPU_ARCH_AR
                                M_CORTEX_M0P))
   65                           #define PSP_MQX_CPU_IS_ARM_CORTEX_M4   
                                 ((PSP_GET_CPU_ARCH(MQX_CPU) == PSP_CPU_ARCH_AR
                                M_CORTEX_M4))
   66                           #define PSP_MQX_CPU_IS_ARM_CORTEX_A5   
                                 ((PSP_GET_CPU_ARCH(MQX_CPU) == PSP_CPU_ARCH_AR
                                M_CORTEX_A5))
   67                           
   68                           #define PSP_MQX_CPU_IS_ARM              (
                                 PSP_MQX_CPU_IS_ARM_CORTEX_M0P || \
   73                           
   74                           
   75                           #endif /* __mqx_cpudef_h__ */
   35                           
   36                           /* CPU groups for Kinetis K-Series */
   37                           #define PSP_CPU_GROUP_KINETIS_K1X      
                                 (0x01)
   38                           #define PSP_CPU_GROUP_KINETIS_K2X      
                                 (0x02)
   39                           #define PSP_CPU_GROUP_KINETIS_K3X      
                                 (0x03)
   40                           #define PSP_CPU_GROUP_KINETIS_K4X      
                                 (0x04)
   41                           #define PSP_CPU_GROUP_KINETIS_K5X      
                                 (0x05)
   42                           #define PSP_CPU_GROUP_KINETIS_K6X      
                                 (0x06)
   43                           #define PSP_CPU_GROUP_KINETIS_K7X      
                                 (0x07)
   44                           
   45                           /* CPU groups for Kinetis GP L-Series
                                 */
   46                           #define PSP_CPU_GROUP_KINETIS_KL0X     
                                 (0x20)
   47                           #define PSP_CPU_GROUP_KINETIS_KL1X     
                                 (0x21)
   48                           #define PSP_CPU_GROUP_KINETIS_KL2X     
                                 (0x22)
   49                           #define PSP_CPU_GROUP_KINETIS_KL3X     
                                 (0x23)
   50                           #define PSP_CPU_GROUP_KINETIS_KL4X     
                                 (0x24)
   51                           
   52                           /* CPU groups for Kinetis GP E-Series
                                 */
   53                           #define PSP_CPU_GROUP_KINETIS_KE0X     
                                 (0x30)
   54                           #define PSP_CPU_GROUP_KINETIS_KE1X     
                                 (0x31)
   55                           #define PSP_CPU_GROUP_KINETIS_KE2X     
                                 (0x32)
   56                           #define PSP_CPU_GROUP_KINETIS_KE3X     
                                 (0x33)
   57                           #define PSP_CPU_GROUP_KINETIS_KE4X     
                                 (0x34)
   58                           #define PSP_CPU_GROUP_KINETIS_KE5X     
                                 (0x35)
   59                           #define PSP_CPU_GROUP_KINETIS_KE6X     
                                 (0x36)
   60                           
   61                           /* Specific CPU identification macros
                                 */
   62                           /* Kinetis GP K-Series family with Cortex M4
                                 core */
   63                           #define PSP_CPU_K1X            (PSP_CPU_NUM(PS
                                P_CPU_ARCH_ARM_CORTEX_M4, PSP_CPU_GROUP_KINETIS
                                _K1X, 0xF))
   64                           #define PSP_CPU_K2X            (PSP_CPU_NUM(PS
                                P_CPU_ARCH_ARM_CORTEX_M4, PSP_CPU_GROUP_KINETIS
                                _K2X, 0xF))
   65                           #define PSP_CPU_K3X            (PSP_CPU_NUM(PS
                                P_CPU_ARCH_ARM_CORTEX_M4, PSP_CPU_GROUP_KINETIS
                                _K3X, 0xF))
   66                           #define PSP_CPU_K4X            (PSP_CPU_NUM(PS
                                P_CPU_ARCH_ARM_CORTEX_M4, PSP_CPU_GROUP_KINETIS
                                _K4X, 0xF))
   67                           #define PSP_CPU_K5X            (PSP_CPU_NUM(PS
                                P_CPU_ARCH_ARM_CORTEX_M4, PSP_CPU_GROUP_KINETIS
                                _K5X, 0xF))
   68                           #define PSP_CPU_K6X            (PSP_CPU_NUM(PS
                                P_CPU_ARCH_ARM_CORTEX_M4, PSP_CPU_GROUP_KINETIS
                                _K6X, 0xF))
   69                           #define PSP_CPU_K7X            (PSP_CPU_NUM(PS
                                P_CPU_ARCH_ARM_CORTEX_M4, PSP_CPU_GROUP_KINETIS
                                _K7X, 0xF))
   70                           
   71                           /* Kinetis GP L-Series family with Cortex M0+
                                 core */
   72                           #define PSP_CPU_KL0X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KL0X, 0xF))
   73                           #define PSP_CPU_KL1X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KL1X, 0xF))
   74                           #define PSP_CPU_KL2X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KL2X, 0xF))
   75                           #define PSP_CPU_KL3X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KL3X, 0xF))
   76                           #define PSP_CPU_KL4X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KL4X, 0xF))
   77                           
   78                           /* Kinetis GP E-Series family with Cortex M0+
                                 core */
   79                           #define PSP_CPU_KE0X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KE0X, 0xF))
   80                           #define PSP_CPU_KE1X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KE1X, 0xF))
   81                           #define PSP_CPU_KE2X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KE2X, 0xF))
   82                           #define PSP_CPU_KE3X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KE3X, 0xF))
   83                           #define PSP_CPU_KE4X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KE4X, 0xF))
   84                           #define PSP_CPU_KE5X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KE5X, 0xF))
   85                           #define PSP_CPU_KE6X            (PSP_CPU_NUM(P
                                SP_CPU_ARCH_ARM_CORTEX_M0P, PSP_CPU_GROUP_KINET
                                IS_KE6X, 0xF))
   86                           
   87                           /* CPU id check support macros */
   88                           /* Kinetis GP K-Series family */
   89                           #define PSP_MQX_CPU_IS_KINETIS_K1X  ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_K1X
                                ))
   90                           #define PSP_MQX_CPU_IS_KINETIS_K2X  ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_K2X
                                ))
   91                           #define PSP_MQX_CPU_IS_KINETIS_K3X  ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_K3X
                                ))
   92                           #define PSP_MQX_CPU_IS_KINETIS_K4X  ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_K4X
                                ))
   93                           #define PSP_MQX_CPU_IS_KINETIS_K5X  ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_K5X
                                ))
   94                           #define PSP_MQX_CPU_IS_KINETIS_K6X  ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_K6X
                                ))
   95                           #define PSP_MQX_CPU_IS_KINETIS_K7X  ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_K7X
                                ))
   96                           
   97                           /* Kinetis GP L-Series family */
   98                           #define PSP_MQX_CPU_IS_KINETIS_KL0X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KL0
                                X))
   99                           #define PSP_MQX_CPU_IS_KINETIS_KL1X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KL1
                                X))
  100                           #define PSP_MQX_CPU_IS_KINETIS_KL2X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KL2
                                X))
  101                           #define PSP_MQX_CPU_IS_KINETIS_KL3X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KL3
                                X))
  102                           #define PSP_MQX_CPU_IS_KINETIS_KL4X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KL4
                                X))
  103                           
  104                           
  105                           /* Kinetis GP E-Series family */
  106                           #define PSP_MQX_CPU_IS_KINETIS_KE0X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KE0
                                X))
  107                           #define PSP_MQX_CPU_IS_KINETIS_KE1X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KE1
                                X))
  108                           #define PSP_MQX_CPU_IS_KINETIS_KE2X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KE2
                                X))
  109                           #define PSP_MQX_CPU_IS_KINETIS_KE3X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KE3
                                X))
  110                           #define PSP_MQX_CPU_IS_KINETIS_KE4X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KE4
                                X))
  111                           #define PSP_MQX_CPU_IS_KINETIS_KE5X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KE5
                                X))
  112                           #define PSP_MQX_CPU_IS_KINETIS_KE6X ((PSP_GET_
                                CPU_GROUP(MQX_CPU) == PSP_CPU_GROUP_KINETIS_KE6
                                X))
  113                           
  114                           
  115                           /* Kinetis GP K-Series family */
  116                           #define PSP_MQX_CPU_IS_KINETIS_K    (PSP_MQX_C
                                PU_IS_KINETIS_K1X | \
  123                           /* Kinetis GP L-Series family */
  124                           #define PSP_MQX_CPU_IS_KINETIS_L    (PSP_MQX_C
                                PU_IS_KINETIS_KL0X | \
  129                           /* Kinetis GP E-Series family */
  130                           #define PSP_MQX_CPU_IS_KINETIS_E    (PSP_MQX_C
                                PU_IS_KINETIS_KE0X | \
  137                           
  138                           
  139                           #endif /* __psp_cpudef_h__ */
   37                           
   38                           /*
   39                           ** The main requirement is to define target
                                 processor
   40                           */
   41                           
   42                           #include <kinetis.h>
    1                           /**HEADER*************************************
                                **********************************
    2                           *
    3                           * Copyright (c) 2010 Freescale Semiconductor;
    4                           * All Rights Reserved
    5                           *
    6                           **********************************************
                                **********************************
    7                           *
    8                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
    9                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   10                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   11                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   12                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   13                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   14                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   15                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   16                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   17                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   18                           * THE POSSIBILITY OF SUCH DAMAGE.
   19                           *
   20                           **********************************************
                                **********************************
   21                           *
   22                           * $FileName: kinetis.h$
   23                           * $Version : 3.8.18.0$
   24                           * $Date    : Dec-7-2011$
   25                           *
   26                           * Comments:
   27                           *
   28                           *   This file contains the type definitions
                                 for the Kinetis microcontrollers.
   29                           *
   30                           *END******************************************
                                *********************************/
   31                           
   32                           #ifndef __kinetis_h__
   33                           #define __kinetis_h__
   34                           
   35                           #ifndef __ASM__
   38                           #include "IO_Map.h"
   40                           #endif /* __ASM__ */
   41                           
   42                           #ifdef __cplusplus
   44                           #endif
   45                           
   46                           
   47                           /*
   48                           **********************************************
                                *********************************
   49                           **
   50                           **                  CONSTANT DEFINITIONS
   51                           **
   52                           **********************************************
                                *********************************
   53                           */
   54                           
   55                           /* Cache and MMU definition values */
   56                           #ifndef PSP_HAS_MMU
   57                           #define PSP_HAS_MMU                           
                                  0
   58                           #endif
   59                           
   60                           #ifndef PSP_HAS_CODE_CACHE
   61                           #define PSP_HAS_CODE_CACHE                    
                                  0
   62                           #endif
   63                           
   64                           #ifndef PSP_HAS_DATA_CACHE
   65                           #define PSP_HAS_DATA_CACHE                    
                                  0
   66                           #endif
   67                           
   68                           #ifndef PSP_HAS_FPU
   69                           #define PSP_HAS_FPU                           
                                  0
   70                           #endif
   71                           
   72                           #define PSP_CACHE_LINE_SIZE                   
                                  (0x10)
   73                           
   74                           #ifndef __ASM__
   77                           #define _DCACHE_FLUSH()
   78                           #define _DCACHE_FLUSH_LINE(p)
   79                           #define _DCACHE_FLUSH_MBYTES(p, m)
   80                           #define _DCACHE_INVALIDATE()
   81                           #define _DCACHE_INVALIDATE_LINE(p)
   82                           #define _DCACHE_INVALIDATE_MBYTES(p,
                                 m)
   84                           #define _CACHE_ENABLE(n)
   85                           #define _CACHE_DISABLE()
   87                           #define _ICACHE_INVALIDATE()
   88                           #define _ICACHE_INVALIDATE_LINE(p)
   89                           #define _ICACHE_INVALIDATE_MBYTES(p,
                                 m)
   91                           #define PSP_INTERRUPT_TABLE_INDEX             
                                  IRQInterruptIndex
  102                           #define _psp_mem_check_access(addr, size,
                                 flags)    \
  105                           #define _psp_mem_check_access_mask(addr, size,
                                 flags, mask) \
  108                           #define _psp_mpu_add_region(start, end, flags)
                                  \
  112                           #endif /* __ASM__ */
  113                           
  114                           #ifdef __cplusplus
  116                           #endif
  117                           
  118                           #endif /* __kinetis_h__ */
   43                           #include <cortex.h>
    1                           /**HEADER*************************************
                                ********************************
    2                           *
    3                           * Copyright (c) 2010 Freescale Semiconductor;
    4                           * All Rights Reserved
    5                           *
    6                           **********************************************
                                ********************************
    7                           *
    8                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
    9                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   10                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   11                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   12                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   13                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   14                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   15                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   16                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   17                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   18                           * THE POSSIBILITY OF SUCH DAMAGE.
   19                           *
   20                           **********************************************
                                ********************************
   21                           *
   22                           * $FileName: cortex.h$
   23                           * $Version : 3.8.13.0$
   24                           * $Date    : Dec-7-2011$
   25                           *
   26                           * Comments:
   27                           *
   28                           *   This file contains the type definitions
                                 for the ARM Cortex processors.
   29                           *
   30                           *END******************************************
                                ******************************/
   31                           
   32                           #ifndef __cortex_h__
   33                           #define __cortex_h__
   34                           
   35                           /*============================================
                                ==============================*/
   36                           /*
   37                           **                   MQX REQUIRED DEFINITIONS
   38                           **
   39                           ** Other MQX kernel and component functions
                                 require these definitions to exist.
   40                           */
   41                           
   42                           /* Indicate which endian this PSP is
                                 */
   43                           #if defined(__ARM__) || defined(__GHS__)
   44                               #ifdef __BIG_ENDIAN
   45                                   #define PSP_ENDIAN          MQX_BIG_EN
                                DIAN
   46                               #else
   47                                   #define PSP_ENDIAN          MQX_LITTLE
                                _ENDIAN
   48                               #endif
   49                           #elif defined(__MET__)
   50                               #ifdef _BE
   51                                   #define PSP_ENDIAN          MQX_BIG_EN
                                DIAN
   52                               #else
   53                                   #define PSP_ENDIAN          MQX_LITTLE
                                _ENDIAN
   54                               #endif
   55                           #elif defined(__GNUC__)
   56                               #ifdef BYTES_BIG_ENDIAN
   57                                   #define PSP_ENDIAN          MQX_BIG_EN
                                DIAN
   58                               #else
   59                                   #define PSP_ENDIAN          MQX_LITTLE
                                _ENDIAN
   60                               #endif
   61                           #else
   62                               #define PSP_ENDIAN              MQX_LITTLE
                                _ENDIAN
   63                           #endif
   64                           
   65                           /*
   66                           ** Memory alignment requirements.
   67                           ** The alignment indicates how memory is to be
                                 aligned for all memory
   68                           ** accesses.   This is to avoid mis-aligned
                                 transfers of data, thus
   69                           ** optimizing memory accesses.
   70                           */
   71                           #define PSP_MEMORY_ALIGNMENT        (PSP_CACHE
                                _LINE_SIZE-1)
   72                           #define PSP_MEMORY_ALIGNMENT_MASK   (~PSP_MEMO
                                RY_ALIGNMENT)
   73                           
   74                           /*
   75                           ** Stack alignment requirements.
   76                           ** The alignment indicates how the stack is to
                                 be initially aligned.
   77                           ** This is to avoid mis-aligned types on the
                                 stack
   78                           */
   79                           #define PSP_STACK_ALIGNMENT         PSP_MEMORY
                                _ALIGNMENT
   80                           #define PSP_STACK_ALIGNMENT_MASK    PSP_MEMORY
                                _ALIGNMENT_MASK
   81                           
   82                           /*
   83                           ** Indicate the direction of the stack
   84                           */
   85                           #define PSP_STACK_GROWS_TO_LOWER_MEM          
                                      (1)
   86                           
   87                           /*
   88                           ** Indicate addressing capability of the
                                 CPU
   89                           ** This is the memory width. i.e., the number
                                 of bits addressed
   90                           ** by each memory location.
   91                           */
   92                           #define PSP_MEMORY_ADDRESSING_CAPABILITY      
                                      (8)
   93                           
   94                           /*
   95                           ** Indicate alignment restrictions on memory
                                 accesses
   96                           ** For an n-bit memory access,
   97                           **
   98                           ** if n <  PSP_MEMORY_ACCESSING_CAPABILITY,
   99                           **         n-bit accesses must be n-bit-aligne
                                d
  100                           **
  101                           ** if n >= PSP_MEMORY_ACCESSING_CAPABILITY,
  102                           **         n-bit accesses must be PSP_MEMORY_A
                                CCESSING_CAPABILITY-bit-aligned
  103                           */
  104                           #define PSP_MEMORY_ACCESSING_CAPABILITY       
                                      (32)
  105                           
  106                           /*
  107                           ** Define padding need to make the STOREBLOCK_
                                STRUCT aligned properly
  108                           */
  109                           #define PSP_MEM_STOREBLOCK_ALIGNMENT          
                                      (2)
  110                           
  111                           /*
  112                           **   MINIMUM STACK SIZE FOR A TASK
  113                           */
  114                           
  115                           /*
  116                           ** Memory overhead on users stack before
                                 switching over to the interrupt stack.
  117                           
  118                           */
  119                           #if PSP_MQX_CPU_IS_ARM_CORTEX_M4
  120                               #define PSP_STACK_INTERRUPT_OVERHEAD      
                                      (116)
  121                           #else /* PSP_MQX_CPU_IS_ARM_CORTEX_M0 is
                                 assumed */
  122                               #define PSP_STACK_INTERRUPT_OVERHEAD      
                                      (64)
  123                           #endif
  124                           
  125                           /* This much extra stack is required for the
                                 logging of mqx functions */
  126                           #if MQX_KERNEL_LOGGING
  127                               #define PSP_STACK_KLOG_OVERHEAD           
                                      (128)
  128                           #else
  129                               #define PSP_STACK_KLOG_OVERHEAD           
                                      (0)
  130                           #endif
  131                           
  132                           /* Minimum stack size for all tasks.
                                 */
  133                           #define PSP_MINSTACKSIZE                     
                                 \
  137                           
  138                           /* Minimum stack size for the Idle Task
  139                           **   Idle task written in C uses at most 8
                                 bytes of stack:
  140                           **     1 Link Instruction, 1 local variable
                                 (pointer)
  141                           */
  142                           #define PSP_IDLE_STACK_SIZE                   
                                      (PSP_MINSTACKSIZE + 8)
  143                           
  144                           /* Motorola addresses do not need to be
                                 normalized
  145                           ** (ie as for example the Intel chips in real
                                 mode do require this)
  146                           */
  147                           #define _PSP_NORMALIZE_MEMORY(x)              
                                      (x)
  148                           
  149                           /*============================================
                                ==============================*/
  150                           /*
  151                           **                    PSP SPECIFIC DEFINITIONS
  152                           **
  153                           */
  154                           
  155                           
  156                           /*
  157                           ** The maximum number of hardware interrupt
                                 vectors
  158                           */
  159                           #if PSP_MQX_CPU_IS_ARM_CORTEX_M4
  160                               #ifndef PSP_MAXIMUM_INTERRUPT_VECTORS
  161                                   #define PSP_MAXIMUM_INTERRUPT_VECTORS 
                                          (0x100)
  162                               #endif
  163                           #elif PSP_MQX_CPU_IS_ARM_CORTEX_M0P
  164                               #ifndef PSP_MAXIMUM_INTERRUPT_VECTORS
  165                                   #define PSP_MAXIMUM_INTERRUPT_VECTORS 
                                          (0x2F)
  166                               #endif
  167                           #else
  168                               #error Unknown ARM Cortex device
  169                           #endif
  170                           
  171                           
  172                           #ifndef __ASM__
  204                           #if PSP_MQX_CPU_IS_ARM_CORTEX_M4
  207                           #elif PSP_MQX_CPU_IS_ARM_CORTEX_M0P
  209                           #endif
  218                           #if PSP_MQX_CPU_IS_ARM_CORTEX_M4
  220                           #endif
  232                           #if PSP_HAS_FPU
  250                           #endif
  347                           #define PSP_STACK_PARAMETER PARAMETER
  359                           #define CORTEX_PERIPH_BASE                 
                                 (0x40000000ul)    // peripheral base
                                 address
  360                           #define CORTEX_PRI_PERIPH_IN_BASE          
                                 (0xe0000000ul)    // private peripheral
                                 internal base address
  363                           #ifndef CORTEX_PRIOR_IMPL
  364                               #if PSP_MQX_CPU_IS_ARM_CORTEX_M0P
  365                                   #define CORTEX_PRIOR_IMPL          
                                 (1)
  366                               #elif PSP_MQX_CPU_IS_ARM_CORTEX_M4
  367                                   #define CORTEX_PRIOR_IMPL          
                                 (3)
  368                               #endif
  369                           #endif /* CORTEX_PRIOR_IMPL */
  371                           #define CORTEX_PRIOR_SHIFT                  (8
                                 - CORTEX_PRIOR_IMPL)
  372                           #define CORTEX_PRIOR_MASK                  
                                 ((0xff << CORTEX_PRIOR_SHIFT) & 0xff)
  373                           #define CORTEX_PRIOR(x)                    
                                 (((x) << CORTEX_PRIOR_SHIFT) & CORTEX_PRIOR_MA
                                SK)
  375                           #define CORTEX_INT_FIRST_INTERNAL          
                                 (0)
  377                           #ifndef CORTEX_INT_LAST_INTERNAL
  378                           #if PSP_MQX_CPU_IS_ARM_CORTEX_M0P
  379                               #define CORTEX_INT_LAST_INTERNAL       
                                 (32)
  380                           #elif PSP_MQX_CPU_IS_ARM_CORTEX_M4
  381                               #define CORTEX_INT_LAST_INTERNAL       
                                 (250)
  382                           #endif
  383                           #endif /* CORTEX_INT_LAST_INTERNAL */
  385                           #define PSP_INT_FIRST_INTERNAL             
                                 (CORTEX_INT_FIRST_INTERNAL)
  386                           #define PSP_INT_LAST_INTERNAL              
                                 (CORTEX_INT_LAST_INTERNAL)
  388                           #define CORTEX_MPU_REC                     
                                 (12)
  390                           #define MPU_SM_RWX                         
                                 (0)
  391                           #define MPU_SM_RX                          
                                 (1)
  392                           #define MPU_SM_RW                          
                                 (2)
  393                           #define MPU_SM_AS_USER                     
                                 (3)
  395                           #define MPU_UM_R                           
                                 (4)
  396                           #define MPU_UM_W                           
                                 (2)
  397                           #define MPU_UM_X                           
                                 (1)
  399                           #define MPU_UM_RW                          
                                 (MPU_UM_R | MPU_UM_W)
  464                           #define _PSP_GET_VTOR()     (_mqx_max_type)(((
                                VCORTEX_SCS_STRUCT_PTR)CORTEX_PRI_PERIPH_IN_BAS
                                E)->SCB.VTOR);
  465                           #define _PSP_SET_VTOR(x)    ((VCORTEX_SCS_STRU
                                CT_PTR)CORTEX_PRI_PERIPH_IN_BASE)->SCB.VTOR =
                                 ((uint_32)(x));
  482                           #ifdef __cplusplus
  484                           #endif
  499                           #ifndef __enable_interrupt
  501                           #endif
  502                           #ifndef __disable_interrupt
  504                           #endif
  506                           #endif // __ASM__
  507                           
  508                           #ifdef __cplusplus
  510                           #endif
  511                           
  512                           #endif
  513                           
   44                           
   45                           #ifndef PSP_CACHE_SPLIT
   46                               #define PSP_CACHE_SPLIT         0
   47                           #endif
   48                           
   49                           #endif /* __psp_cpu_h__ */
   44                           #endif /* __CWARM__ */
   45                           
   46                           #include "mqxlite_prv.h"
    1                           /*HEADER**************************************
                                ********************************
    2                           *
    3                           * Copyright (c) 2008 Freescale Semiconductor;
    4                           * All Rights Reserved
    5                           *
    6                           * Copyright (c) 2004-2008 Embedded Access
                                 Inc.;
    7                           * All Rights Reserved
    8                           *
    9                           * Copyright (c) 1989-2008 ARC International;
   10                           * All Rights Reserved
   11                           *
   12                           **********************************************
                                ********************************
   13                           *
   14                           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS
                                 IS" AND ANY EXPRESSED OR
   15                           * IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                 LIMITED TO, THE IMPLIED WARRANTIES
   16                           * OF MERCHANTABILITY AND FITNESS FOR A
                                 PARTICULAR PURPOSE ARE DISCLAIMED.
   17                           * IN NO EVENT SHALL FREESCALE OR ITS
                                 CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   18                           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                                 CONSEQUENTIAL DAMAGES
   19                           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
                                 OF SUBSTITUTE GOODS OR
   20                           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
                                 BUSINESS INTERRUPTION)
   21                           * HOWEVER CAUSED AND ON ANY THEORY OF
                                 LIABILITY, WHETHER IN CONTRACT,
   22                           * STRICT LIABILITY, OR TORT (INCLUDING
                                 NEGLIGENCE OR OTHERWISE) ARISING
   23                           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
                                 EVEN IF ADVISED OF
   24                           * THE POSSIBILITY OF SUCH DAMAGE.
   25                           *
   26                           **********************************************
                                ********************************
   27                           *
   28                           * $FileName: mqx_prv.h$
   29                           * $Version : 3.8.52.1$
   30                           * $Date    : Feb-27-2012$
   31                           *
   32                           * Comments:
   33                           *
   34                           *   This file contains information private to
                                 the mqxlite kernel.
   35                           *
   36                           *END******************************************
                                *******************************/
   37                           
   38                           
   39                           #ifndef __mqxlite_prv_h__
   40                           #define __mqxlite_prv_h__
   41                           
   42                           
   43                           /*--------------------------------------------
                                ------------------------------*/
   44                           /*
   45                            *                        KERNEL CONFIGURATION
   46                            *
   47                            * Each mqx kernel configuration item has an
                                 associated bit that is written
   48                            * into the configuration field of the kernel
                                 data structure at run time,
   49                            * so that the compiled configuration of the
                                 kernel is available to software
   50                            * and the debuggers.
   51                            */
   52                           
   53                           #define MQX_CNFG1_INCLUDE_FLOATING_POINT_IO   
                                         (0x0001)
   54                           #define MQX_CNFG1_USE_INLINE_MACROS           
                                         (0x0002)
   55                           #define MQX_CNFG1_KERNEL_LOGGING              
                                         (0x0004)
   56                           #define MQX_CNFG1_MONITOR_STACK               
                                         (0x0008)
   57                           #define MQX_CNFG1_TASK_CREATION_BLOCKS        
                                         (0x0010)
   58                           #define MQX_CNFG1_TASK_DESTRUCTION            
                                         (0x0020)
   59                           #define MQX_CNFG1_COMPONENT_DESTRUCTION       
                                         (0x0040)
   60                           #define MQX_CNFG1_CHECK_ERRORS                
                                         (0x0080)
   61                           #define MQX_CNFG1_CHECK_VALIDITY              
                                         (0x0100)
   62                           #define MQX_CNFG1_CHECK_MEMORY_ALLOCATION_ERRO
                                RS       (0x0200)
   63                           #define MQX_CNFG1_USE_32BIT_MESSAGE_QIDS      
                                         (0x0400)
   64                           #define MQX_CNFG1_MEMORY_FREE_LIST_SORTED     
                                         (0x0800)
   65                           #define MQX_CNFG1_DEFAULT_TIME_SLICE_IN_TICKS 
                                         (0x1000)
   66                           #define MQX_CNFG1_LWLOG_TIME_STAMP_IN_TICKS   
                                         (0x2000)
   67                           #define MQX_CNFG1_PROFILING_ENABLE            
                                         (0x4000)
   68                           #define MQX_CNFG1_RUN_TIME_ERR_CHECK_ENABLE   
                                         (0x8000)
   69                           
   70                           #define MQX_CNFG2_USE_32BIT_TYPES             
                                         (0x0001)
   71                           #define MQX_CNFG2_TIMER_USES_TICKS_ONLY       
                                         (0x0002)
   72                           #define MQX_CNFG2_EXIT_ENABLED                
                                         (0x0004)
   73                           #define MQX_CNFG2_USE_IDLE_TASK               
                                         (0x0008)
   74                           #define MQX_CNFG2_IS_MULTI_PROCESSOR          
                                         (0x0010)
   75                           #define MQX_CNFG2_HAS_TIME_SLICE              
                                         (0x0020)
   76                           #define MQX_CNFG2_MUTEX_HAS_POLLING           
                                         (0x0040)
   77                           #define MQX_CNFG2_USE_LWMEM_ALLOCATOR         
                                         (0x0080)
   78                           #define MQX_CNFG2_USE_TYPED_MEMORY            
                                         (0x0100)
   79                           
   80                           
   81                           #ifndef __ASM__
   84                           #define MQX_CNFG1 ( \
  103                           #define MQX_CNFG2 ( \
  115                           #endif /* __ASM__ */
  116                           
  117                           /*--------------------------------------------
                                ------------------------------*/
  118                           /*
  119                            *                            INTERNAL TASK
                                 FLAGS
  120                            *
  121                            * These bits are set in the task descriptor
                                 FLAGS field.
  122                            * Note that the bits from the task template
                                 ATTRIBUTES field are also copied
  123                            * to the task descriptor FLAGS field.
  124                            */
  125                           
  126                           /* This bit indicates that the task is running
                                 at a boosted priority level */
  127                           #define TASK_PRIORITY_BOOSTED            
                                 (0x8000)
  128                           
  129                           /* This bit indicates that the task has kernel
                                 logging enabled */
  130                           #define TASK_LOGGING_ENABLED             
                                 (0x4000)
  131                           
  132                           /* This bit indicates that the watchdog is
                                 active for this task */
  133                           #define TASK_WATCHDOG_STARTED            
                                 (0x2000)
  134                           
  135                           /* This bit indicates that preemption has been
                                 disabled for this task */
  136                           #define TASK_PREEMPTION_DISABLED         
                                 (0x1000)
  137                           
  138                           /* This bit indicates that the watchdog is
                                 currently running for this task */
  139                           #define TASK_WATCHDOG_RUNNING            
                                 (0x800)
  140                           
  141                           /* This bit indicates that the task has a MMU
                                 context associated with it */
  142                           #define TASK_MMU_CONTEXT_EXISTS          
                                 (0x0400)
  143                           
  144                           /*
  145                            * This bit indicates that the floating point
                                 registers have been saved
  146                            * on the stack of the blocked task
  147                            */
  148                           #define TASK_FLOATING_POINT_CONTEXT_SAVED
                                 (0x0200)
  149                           
  150                           /*
  151                            * This bit indicates that the DSP registers
                                 have been saved
  152                            * on the stack of the blocked task
  153                            */
  154                           #define TASK_DSP_CONTEXT_SAVED           
                                 (0x0100)
  155                           
  156                           /*
  157                            * This bit indicates that the task is waiting
                                 on a LWEvent and wants
  158                            * all bits to be set
  159                            */
  160                           #define TASK_LWEVENT_ALL_BITS_WANTED     
                                 (0x0080)
  161                           
  162                           /*
  163                            * This bit indicates that the PSP context
                                 switch/ISR code has saved the
  164                            * scratch registers on the task's stack
  165                            */
  166                           
  167                           #define PSP_SCRATCH_REGISTERS_SAVED      
                                 (0x040)
  168                           
  169                           /*
  170                            * This bit indicates that the tasks TD and
                                 stack were provided by the
  171                            * application
  172                            */
  173                           #define TASK_STACK_PREALLOCATED          
                                 (0x020)
  174                           
  175                           /*
  176                            * This bit indicates that the task runs in
                                 restricted USER mode
  177                            */
  178                           #define TASK_USER_MODE                   
                                 (0x10000)
  179                           
  180                           
  181                           
  182                           #ifndef __ASM__
  258                           #define FIELD_OFFSET(item,field) (_mqx_uint)&(
                                ((item _PTR_)0)->field)
  269                           #define MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES
                                 (0xFFFF)
  276                           #define MQX_DEFAULT_TIME_SLICE  ((_mqx_uint)10
                                )
  278                           #ifndef MQX_SETJMP
  279                           #define MQX_SETJMP(b)    setjmp(b)
  280                           #endif
  281                           #ifndef MQX_LONGJMP
  282                           #define MQX_LONGJMP(b,n) longjmp(b,n)
  283                           #endif
  293                           #if MQX_KERNEL_LOGGING
  294                           # if MQX_CRIPPLED_EVALUATION
  295                           #  define MQX_KLOG_KILL_COUNT    (10000000)   
                                          /*C*/
  296                           #  include <setjmp.h>                         
                                          /*C*/
  298                           #  define _KLOGM(x) x                         
                                          /*C*/
  299                           #  if (PSP_ENDIAN == MQX_BIG_ENDIAN)          
                                          /*C*/
  300                           #    define _KLOG(x) \
  307                           #  else /*PSP is LITTLE ENDIAN */
  308                           #    define _KLOG(x)                          
                                          /*C*/\
  315                           #  endif /*PSP is LITTLE ENDIAN */
  316                           # else /* MQX_CRIPPLED_EVALUATION */
  317                           #  define _KLOGM(x) x
  318                           #  define _KLOG(x) if (kernel_data->LOG_CONTRO
                                L & 1) x
  319                           # endif /* MQX_CRIPPLED_EVALUATION */
  320                           #else /* MQX_KERNEL_LOGGING */
  321                           # if MQX_CRIPPLED_EVALUATION
  322                           #  define MQX_KLOG_KILL_COUNT    (10000000)   
                                          /*C*/
  323                           #  include <setjmp.h>                         
                                          /*C*/
  325                           #  define _KLOGM(x) x
  326                           #  if (PSP_ENDIAN == MQX_BIG_ENDIAN)          
                                          /*C*/
  327                           #    define _KLOG(x) \
  334                           #  else /*PSP is LITTLE ENDIAN */
  335                           #    define _KLOG(x)                          
                                          /*C*/\
  342                           #  endif /*PSP is LITTLE ENDIAN */
  343                           # else /* MQX_CRIPPLED_EVALUATION */
  344                           #define _KLOGM(x)
  345                           #define _KLOG(x)
  346                           # endif /* MQX_CRIPPLED_EVALUATION */
  347                           #endif /* MQX_KERNEL_LOGGING */
  351                           #define _KLOGE1(fn) _KLOG(_klog_log(KLOG_FUNCT
                                ION_ENTRY, \
  353                           #define _KLOGE2(fn,p1) _KLOG(_klog_log(KLOG_FU
                                NCTION_ENTRY, \
  355                           #define _KLOGE3(fn,p1,p2) _KLOG(_klog_log(KLOG
                                _FUNCTION_ENTRY, \
  357                           #define _KLOGE4(fn,p1,p2,p3) _KLOG(_klog_log(K
                                LOG_FUNCTION_ENTRY, \
  359                           #define _KLOGE5(fn,p1,p2,p3,p4) _KLOG(_klog_lo
                                g(KLOG_FUNCTION_ENTRY, \
  361                           #define _KLOGE6(fn,p1,p2,p3,p4,p5) _KLOG(_klog
                                _log(KLOG_FUNCTION_ENTRY, \
  365                           #define _KLOGX1(fn) _KLOG(_klog_log(KLOG_FUNCT
                                ION_EXIT, \
  367                           #define _KLOGX2(fn,p1) _KLOG(_klog_log(KLOG_FU
                                NCTION_EXIT, \
  369                           #define _KLOGX3(fn,p1,p2) _KLOG(_klog_log(KLOG
                                _FUNCTION_EXIT, \
  371                           #define _KLOGX4(fn,p1,p2,p3) _KLOG(_klog_log(K
                                LOG_FUNCTION_EXIT, \
  373                           #define _KLOGX5(fn,p1,p2,p3,p4) _KLOG(_klog_lo
                                g(KLOG_FUNCTION_EXIT, \
  385                           #if PSP_MEMORY_ALIGNMENT   /* We must align
                                 memory */
  388                           #define _MEMORY_ALIGN_VAL_LARGER(val)
                                 \
  390                           #define _MEMORY_ALIGN_VAL_SMALLER(val)
                                 \
  393                           #define _ALIGN_ADDR_TO_HIGHER_MEM(mem_ptr)
                                 \
  395                           #define _ALIGN_ADDR_TO_LOWER_MEM(mem_ptr)
                                 \
  399                           #define _STACK_ALIGN_VAL_LARGER(val)
                                 \
  401                           #define _STACK_ALIGN_VAL_SMALLER(val)
                                 \
  404                           #define _ALIGN_STACK_TO_HIGHER_MEM(mem_ptr)
                                 \
  406                           #define _ALIGN_STACK_TO_LOWER_MEM(mem_ptr)
                                 \
  411                           #define _MEMORY_ALIGNED(mem_ptr) \
  414                           #define _STACK_ALIGNED(mem_ptr) \
  417                           #else
  418                           #define _ALIGN_ADDR_TO_HIGHER_MEM(val)
                                 val
  419                           #define _ALIGN_ADDR_TO_LOWER_MEM(val)
                                 val
  420                           #define _MEMORY_ALIGNED(mem_ptr) TRUE
  421                           #define _ALIGN_STACK_TO_HIGHER_MEM(val)
                                 val
  422                           #define _ALIGN_STACK_TO_LOWER_MEM(val)
                                 val
  423                           #define _STACK_ALIGNED(mem_ptr) TRUE
  424                           #endif
  433                           #define MQX_STACK_MONITOR_VALUE         
                                 (_mqx_uint)(0x7374616B)  /* "stak" */
  442                           #if PSP_STACK_GROWS_TO_LOWER_MEM
  444                           #define _GET_STACK_BASE(mem_ptr, size)        
                                      ((pointer)_ALIGN_STACK_TO_LOWER_MEM(((uch
                                ar_ptr)_PSP_NORMALIZE_MEMORY(mem_ptr) + size -
                                 1)))
  445                           #define _GET_STACK_LIMIT(mem_ptr, size)       
                                      ((pointer)_ALIGN_STACK_TO_HIGHER_MEM(_PSP
                                _NORMALIZE_MEMORY(mem_ptr)))
  447                           #else
  449                           #define _GET_STACK_BASE(mem_ptr, size)        
                                      ((pointer)_ALIGN_STACK_TO_HIGHER_MEM(_PSP
                                _NORMALIZE_MEMORY(mem_ptr)))
  450                           #define _GET_STACK_LIMIT(mem_ptr, size)       
                                      ((pointer)_ALIGN_STACK_TO_LOWER_MEM(((uch
                                ar_ptr)_PSP_NORMALIZE_MEMORY(mem_ptr) + size -
                                 1)))
  452                           #endif /* PSP_STACK_GROWS_TO_LOWER_MEM
                                 */
  462                           #define IS_BLOCKED                     
                                 (0x001)
  465                           #define IS_ON_TIMEOUT_Q                
                                 (0x100)
  468                           #define TD_IS_ON_QUEUE                 
                                 (0x200)
  474                           #define TD_IS_ON_AUX_QUEUE             
                                 (0x400)
  477                           #define STATE_MASK                     
                                 (0x0ff)
  479                           #define READY                          
                                 (0x02)
  480                           #define BLOCKED                         (0x02
                                 | IS_BLOCKED)
  481                           #define RCV_SPECIFIC_BLOCKED            (0x04
                                 | IS_BLOCKED)
  482                           #define RCV_ANY_BLOCKED                 (0x06
                                 | IS_BLOCKED)
  483                           #define DYING                           (0x08
                                 | IS_BLOCKED)
  484                           #define UNHANDLED_INT_BLOCKED           (0x0A
                                 | IS_BLOCKED)
  485                           #define SEND_BLOCKED                    (0x0C
                                 | IS_BLOCKED)
  486                           #define BREAKPOINT_BLOCKED              (0x0E
                                 | IS_BLOCKED)
  487                           #define IO_BLOCKED                      (0x10
                                 | IS_BLOCKED | TD_IS_ON_QUEUE)
  489                           #define SEM_BLOCKED                     (0x20
                                 | IS_BLOCKED)
  490                           #define MUTEX_BLOCKED                   (0x22
                                 | IS_BLOCKED | TD_IS_ON_QUEUE)
  491                           #define EVENT_BLOCKED                   (0x24
                                 | IS_BLOCKED)
  492                           #define TASK_QUEUE_BLOCKED              (0x28
                                 | IS_BLOCKED | TD_IS_ON_QUEUE)
  493                           #define BLOCKED_ON_AUX_QUEUE           
                                 (TD_IS_ON_AUX_QUEUE|IS_BLOCKED)
  494                           #define LWSEM_BLOCKED                   (0x2A
                                 | BLOCKED_ON_AUX_QUEUE)
  495                           #define LWEVENT_BLOCKED                 (0x2C
                                 | BLOCKED_ON_AUX_QUEUE)
  500                           #define TASK_ID_DYING                  
                                 (0x80000000)
  511                           #define BUILD_TASKID(procnum, tasknum)
                                 (_task_id)\
  515                           #define PROC_NUMBER_FROM_TASKID(taskid)
                                 ((uint_16)((taskid) >> 16))
  518                           #define TASK_NUMBER_FROM_TASKID(taskid)
                                 ((uint_16)((taskid) & 0xFFFF))
  521                           #if (PSP_MEMORY_ADDRESSING_CAPABILITY >
                                 16)
  522                           #define INC_TASK_NUMBER(n)                    
                                  \
  528                           #else
  529                           #define INC_TASK_NUMBER(n)                    
                                  \
  534                           #endif
  550                           #define MQX_FLAGS_EXCEPTION_HANDLER_INSTALLED 
                                  (0x0001)
  561                           #define _CHECK_RUN_SCHEDULER()  _sched_check_s
                                cheduler_internal()
  563                           #if MQX_ENABLE_USER_MODE
  564                           #define MQX_RUN_IN_USER_MODE    ((__get_CONTRO
                                L() & 1) & !(__get_PSR() & 0x1f))
  565                           #endif
  572                           #if MQX_HAS_TIME_SLICE
  573                           #define ZERO_TICK_STRUCT_INTERNAL(x)
                                 MQX_ZERO_TICK_STRUCT(x)
  574                           #else
  575                           #define ZERO_TICK_STRUCT_INTERNAL(x)
  576                           #endif
  578                           #if MQX_USE_INLINE_MACROS
  579                           #define _TASK_READY(the_td,the_kernel_data)   
                                             \
  593                           #else
  594                           #define _TASK_READY(the_td,the_kernel_data)
                                 _task_ready_internal(the_td)
  595                           #endif
  597                           #if MQX_USE_INTERRUPTS
  599                           #define _INT_DISABLE_CODE()                   
                                          \
  605                           #define _INT_ENABLE_CODE()                    
                                                                 \
  615                           #else
  616                               #define _INT_DISABLE_CODE()
  617                               #define _INT_ENABLE_CODE()
  618                           #endif
  620                           #if MQX_USE_INLINE_MACROS
  621                           #define _INT_DISABLE() _INT_DISABLE_CODE()
  622                           #define _INT_ENABLE()  _INT_ENABLE_CODE()
  623                           #else
  624                           #define _INT_DISABLE() _int_disable()
  625                           #define _INT_ENABLE()  _int_enable()
  626                           #endif
  629                           #if MQX_HAS_TICK
  630                           #define _TIME_DEQUEUE(td,kd)                  
                                           \
  636                           #else
  637                           #define _TIME_DEQUEUE(td,kd)
  638                           #endif
  645                           #define _BACKUP_POINTER(p,t,f) \
  654                           #define SYSTEM_TASK_NUMBER    0xffff
  657                           #define SYSTEM_TASK_FLAG       ((_mqx_uint)(((
                                _mqx_uint)0x1) << (MQX_INT_SIZE_IN_BITS -
                                 1)))
  660                           #define SYSTEM_TD_PTR(kd)      ((TD_STRUCT_PTR
                                )(&(kd)->SYSTEM_TD))
  663                           #define SYSTEM_TASK_ID(kd)     (SYSTEM_TD_PTR(
                                kd)->TASK_ID)
  669                           #define IPC_TASK               (SYSTEM_TASK_FL
                                AG | 0x2)
  670                           #define IDLE_TASK              (SYSTEM_TASK_FL
                                AG | 0x3)
  683                           #define KERNEL_NAME_MANAGEMENT       
                                 (0)
  684                           #define KERNEL_SEMAPHORES            
                                 (1)
  685                           #define KERNEL_EVENTS                
                                 (2)
  686                           #define KERNEL_MUTEXES               
                                 (3)
  687                           #define KERNEL_TIMER                 
                                 (4)
  688                           #define KERNEL_LOG                   
                                 (5)
  689                           #define KERNEL_WATCHDOG              
                                 (6)
  690                           #define KERNEL_MESSAGES              
                                 (7)
  691                           #define KERNEL_PARTITIONS            
                                 (8)
  692                           #define KERNEL_IPC                   
                                 (9)
  693                           #define KERNEL_IPC_MSG_ROUTING       
                                 (10)
  694                           #define KERNEL_LWLOG                 
                                 (11)
  697                           #define MAX_KERNEL_COMPONENTS        
                                 (16)
  706                           #define SCHED_MAX_POLICY  MQX_SCHED_RR
  725                           #if MQX_USE_INLINE_MACROS
  726                           #define _QUEUE_INIT(queue,max)                
                                                      \
  733                           #else
  734                           #define _QUEUE_INIT(queue, max) _queue_init((Q
                                UEUE_STRUCT_PTR)(queue), max)
  735                           #endif
  738                           #define _QUEUE_GET_SIZE(queue)  ((QUEUE_STRUCT
                                _PTR)(queue))->SIZE
  742                           #define _QUEUE_IS_EMPTY(queue) (_QUEUE_GET_SIZ
                                E(queue) == 0)
  745                           #define _QUEUE_IS_FULL(queue)  \
  749                           #define _QUEUE_LINK(queue_member,element)     
                                          \
  762                           #if MQX_USE_INLINE_MACROS
  763                           #define _QUEUE_INSERT(queue,queue_member,eleme
                                nt)           \
  767                           #else
  768                           #define _QUEUE_INSERT(queue,queue_member,eleme
                                nt) \
  772                           #endif
  775                           #if MQX_USE_INLINE_MACROS
  776                           #define _QUEUE_ENQUEUE(queue,element)
                                 \
  779                           #else
  780                           #define _QUEUE_ENQUEUE(queue,element)
                                 \
  783                           #endif
  787                           #define _QUEUE_UNLINK(queue_member) \
  803                           #define _QUEUE_REMOVE(queue,element)       
                                 \
  808                           #if MQX_USE_INLINE_MACROS
  809                           #define _QUEUE_DEQUEUE(queue,element)         
                                           \
  812                           #else
  813                           #define _QUEUE_DEQUEUE(queue,element) element
                                 = (pointer)_queue_dequeue(queue)
  814                           #endif
  821                           #define TASK_QUEUE_VALID           (_mqx_uint)
                                (0x74736b71)  /* "tskq" */
  828                           #define LWSEM_VALID                (_mqx_uint)
                                (0x6C77736D)    /* "lwsm" */
  836                           #define NUM_TO_STR(x) #x
  837                           #define REAL_NUM_TO_STR(x) NUM_TO_STR(x)
  843                           #if MQX_SPARSE_ISR_TABLE
  875                           #else
  915                           #endif
 1028                           #if PSP_HAS_MMU
 1031                           #endif /* PSP_HAS_MMU */
 1033                           #if MQXCFG_ENABLE_DSP
 1036                           #endif /* MQXCFG_ENABLE_DSP */
 1038                           #if MQXCFG_ENABLE_FP
 1041                           #endif /* MQXCFG_ENABLE_FP */
 1064                           #if MQX_USE_MEM
 1070                           #endif /* MQX_USE_MEM */
 1087                           #if MQX_USE_IO
 1096                           #endif /* MQX_USE_IO */
 1098                           #if MQX_HAS_TASK_ENVIRONMENT
 1101                           #endif /* MQX_HAS_TASK_ENVIRONMENT */
 1103                           #if MQX_HAS_EXIT_HANDLER
 1106                           #endif /* MQX_HAS_EXIT_HANDLER */
 1114                           #if MQX_USE_MESSAGES
 1132                           #endif
 1134                           #if MQX_USE_LWEVENTS
 1137                           #endif
 1139                           #if MQX_HAS_TIME_SLICE
 1154                           #endif
 1156                           #if MQX_USE_SW_WATCHDOGS
 1159                           #endif
 1162                           #if  MQX_TAD_RESERVED_ENABLE
 1164                           #endif
 1166                           #if MQX_PROFILING_ENABLE
 1172                           #endif
 1174                           #if MQX_RUN_TIME_ERR_CHECK_ENABLE
 1177                           #endif
 1179                           #if MQX_THREAD_LOCAL_STORAGE_ENABLE
 1182                           #endif
 1184                           #if MQX_EXTRA_TASK_STACK_ENABLE
 1186                           #endif /* MQX_EXTRA_TASK_STACK_ENABLE
                                 */
 1397                           #if MQXCFG_ENABLE_FP
 1408                           #endif /* MQXCFG_ENABLE_FP */
 1410                           #if MQXCFG_ENABLE_DSP
 1419                           #endif /* MQXCFG_ENABLE_DSP */
 1439                           #if MQX_KD_HAS_COUNTER
 1442                           #endif
 1461                           #if MQX_USE_MEM
 1468                           #if MQX_USE_UNCACHED_MEM
 1471                           #endif /* MQX_USE_UNCACHED_MEM */
 1473                           #endif
 1539                           #if MQX_COMPONENT_DESTRUCTION
 1548                           #endif
 1550                           #if MQX_USE_IO_COMPONENTS
 1576                           #if MQX_IO_COMPONENT_DESTRUCTION
 1586                           #endif /* MQX_IO_COMPONENT_DESTRUCTION
                                 */
 1588                           #endif /* MQX_USE_IO_COMPONENTS */
 1590                           #if MQX_USE_IDLE_TASK
 1591                           #if MQX_ENABLE_IDLE_LOOP
 1599                           #endif
 1602                           #endif
 1605                           #if MQX_EXIT_ENABLED || MQX_CRIPPLED_EVALUATIO
                                N
 1615                           #endif
 1618                           #if MQX_HAS_TIME_SLICE
 1623                           #endif
 1626                           #if MQX_USE_TIMER
 1635                           #endif
 1637                           #if MQX_USE_LWMEM
 1643                           #endif
 1645                           #if MQX_USE_LWEVENTS
 1648                           #endif
 1650                           #if MQX_USE_LWMSGQ
 1653                           #endif
 1655                           #if MQX_USE_LWTIMER
 1661                           #endif
 1663                           #if MQX_IS_MULTI_PROCESSOR
 1695                           #endif /* MQX_IS_MULTI_PROCESSOR */
 1697                           #if PSP_HAS_SUPPORT_STRUCT
 1700                           #endif /* PSP_HAS_SUPPORT_STRUCT */
 1703                           #if MQX_EXTRA_TASK_STACK_ENABLE
 1716                           #endif /* MQX_EXTRA_TASK_STACK_ENABLE
                                 */
 1718                           #if MQX_SPARSE_ISR_TABLE
 1723                           #endif
 1725                           #if MQX_KERNEL_LOGGING
 1726                           # if MQX_CRIPPLED_EVALUATION
 1729                           # endif
 1730                           #endif
 1732                           #if MQX_ENABLE_USER_MODE
 1734                           #if MQX_USE_LWMEM
 1737                           #endif
 1742                           #if MQX_USE_LWEVENTS
 1745                           #endif
 1747                           #if MQX_USE_LWMSGQ
 1750                           #endif
 1754                           #endif
 1764                           #ifdef __cplusplus
 1766                           #endif
 1768                           #ifndef __TAD_COMPILE__
 1841                           #ifndef __get_PSP
 1843                           #endif
 1845                           #ifndef __get_MSP
 1847                           #endif
 1849                           #ifndef __get_PSR
 1851                           #endif
 1853                           #ifndef __get_LRI
 1855                           #endif
 1857                           #ifndef __get_PCI
 1859                           #endif
 1861                           #ifndef __get_CONTROL
 1863                           #endif
 1865                           #endif /* __TAD_COMPILE__ */
 1867                           #ifdef __cplusplus
 1869                           #endif
 1871                           #endif /* __ASM__ */
 1872                           
 1873                           #endif
 1874                           /* EOF */
   47                           #undef __ASM__
   48                           
   49                           ASM_EQUATE(SVC_MQX_FN, 0xaa)
   50                           
   51                            ASM_EXTERN(_mqx_kernel_data)
   52                            ASM_EXTERN(_klog_isr_start_internal)
   53                            ASM_EXTERN(_klog_isr_end_internal)
   54                            ASM_EXTERN(_mqx_api_call_handler)
   55                           
   56                            ASM_CODE_SECTION(KERNEL)
   57                            SET_FUNCTION_ALIGNMENT
   57.1                                         ALIGNROM 2
   57.2                                 ENDM
   58                            ASM_COMP_SPECIFIC_DIRECTIVES
   59                           
   60                            ASM_PUBLIC(_sched_start_internal)
   61                            ASM_PUBLIC(_sched_run_internal)
   62                            ASM_PUBLIC(_sched_check_scheduler_internal)
   63                            ASM_PUBLIC(_sched_execute_scheduler_internal)
   64                           
   65                            ASM_PUBLIC(_task_block)
   66                            ASM_PUBLIC(_int_kernel_isr)
   67                           
   68                            ASM_PUBLIC(_mqx_api_call)
   69                           
   70                            ASM_PUBLIC(_mem_test_and_set)
   71                            ASM_PUBLIC(__get_PSP)
   72                            ASM_PUBLIC(__get_MSP)
   73                            ASM_PUBLIC(__get_PSR)
   74                            ASM_PUBLIC(__set_MSPI)
   75                           
   76                            ASM_PUBLIC(_psp_exception_return)
   77                           
   78                           
   79                           /*FUNCTION*-----------------------------------
                                --------------------------------
   80                            *
   81                            * Function Name    : _sched_start_internal
   82                            * Returned Value   : none
   83                            * Comments         : start MQX scheduler
   84                            *
   85                            *END*----------------------------------------
                                ------------------------------*/
   86                           
   87                            ASM_PUBLIC_BEGIN(_sched_start_internal)
   88                            ASM_PUBLIC_FUNC(_sched_start_internal)
   89                           ASM_LABEL(_sched_start_internal)
   90                                           GET_KERNEL_DATA r0
   90.1  00000000 9148                  ldr r0, =ASM_PREFIX(_mqx_kernel_data)
   90.2  00000002 0068                  ldr r0, [r0, #0]
   90.3                                 ENDM
   91    00000004 29E0                          b sched_internal
   92                            ASM_PUBLIC_END(_sched_start_internal)
   93                           
   94                           //--------------------------------------------
                                -----------------------------------
   95                           
   96                            ASM_PUBLIC_BEGIN(_sched_run_internal)
   97                            ASM_PUBLIC_FUNC(_sched_run_internal)
   98                           ASM_LABEL(_sched_run_internal)
   99                                           GET_KERNEL_DATA r0
   99.1  00000006 9048                  ldr r0, =ASM_PREFIX(_mqx_kernel_data)
   99.2  00000008 0068                  ldr r0, [r0, #0]
   99.3                                 ENDM
  100    0000000A 26E0                          b sched_internal
  101                            ASM_PUBLIC_END(_sched_run_internal)
  102                           
  103                           //--------------------------------------------
                                -----------------------------------
  104                           
  105                            ASM_PUBLIC_BEGIN(_sched_check_scheduler_inter
                                nal)
  106                            ASM_PUBLIC_FUNC(_sched_check_scheduler_intern
                                al)
  107                           ASM_LABEL(_sched_check_scheduler_internal)
  108                                           GET_KERNEL_DATA r0
  108.1  0000000C 8E48                  ldr r0, =ASM_PREFIX(_mqx_kernel_data)
  108.2  0000000E 0068                  ldr r0, [r0, #0]
  108.3                                 ENDM
  109                           
  110    00000010 018B                          ldrh r1, [r0, #KD_IN_ISR]
  111    00000012 0029                          cmp r1, #0
  112    00000014 05D1                          bne _sched_check_scheduler_inte
                                                     rnal_end
  113                           
  114    00000016 416A                          ldr r1, [r0, #KD_CURRENT_READY_
                                                         Q]
  115    00000018 C269                          ldr r2, [r0, #KD_ACTIVE_PTR]
  116    0000001A D369                          ldr r3, [r2, #TD_MY_QUEUE]
  117    0000001C 9942                          cmp r1, r3
  118                           
  119                                           // current task is still the
                                 active task
  120    0000001E 00D0                          beq _sched_check_scheduler_inte
                                                     rnal_end
  121                           
  122                           #if MQX_ENABLE_USER_MODE
  134                           #endif
  135    00000020 00E0                          b _sched_execute_scheduler_inte
                                                   rnal
  136                           
  137                           ASM_LABEL(_sched_check_scheduler_internal_end)
  138    00000022 7047                          bx lr
  139                            ASM_PUBLIC_END(_sched_check_scheduler_interna
                                l)
  140                           
  141                           /*FUNCTION*-----------------------------------
                                --------------------------------
  142                            *
  143                            * Function Name    : _sched_execute_scheduler
                                _internal
  144                            * Returned Value   : none
  145                            * Comments         :
  146                            *
  147                            *END*----------------------------------------
                                ------------------------------*/
  148                           
  149                            ASM_PUBLIC_BEGIN(_sched_execute_scheduler_int
                                ernal)
  150                            ASM_PUBLIC_FUNC(_sched_execute_scheduler_inte
                                rnal)
  151                           ASM_LABEL(_sched_execute_scheduler_internal)
  152                           #if MQX_ENABLE_USER_MODE
  165                           #endif
  166                           
  167                                           // store active task
                                 registers
  168                                           STORE_ALL_REGISTERS
  168.1  00000024 FFB4                  push {r0-r7} //r0-r4 will be later
                                               overwritten
  168.2  00000026 4046                  mov r0, r8
  168.3  00000028 4946                  mov r1, r9
  168.4  0000002A 5246                  mov r2, r10
  168.5  0000002C 5B46                  mov r3, r11
  168.6  0000002E 0FB4                  push {r0-r3}
  168.7  00000030 F0B4                  push {r4-r7}
  168.8  00000032 EFF31084              mrs  r4, PRIMASK
  168.9  00000036 10B4                  push {r4}
  168.10 00000038 EFF30981              mrs r1, PSP //PSP must be kept in
                                                  r1
  168.11                                //get APSR and orr it with 0x01000000
                                 (thumb bit set)
  168.12 0000003C EFF30085              mrs r5, APSR 
  168.13 00000040 824E                  ldr r6, =0x01000000
  168.14 00000042 3543                  orrs r5, r5, r6
  168.15 00000044 6246                  mov r2, r12
  168.16 00000046 7346                  mov r3, lr
  168.17 00000048 7446                  mov r4, lr //pc
  168.18 0000004A 0846                  mov r0, r1
  168.19 0000004C 3430                  adds r0, r0, #52
  168.20 0000004E 3CC0                  stm r0!, {r2-r5}
  168.21                                ENDM
  169                                           // disable interrupts
  170    00000050 72B6                          cpsid i
  171                           
  172                                           GET_KERNEL_DATA r0
  172.1  00000052 7D48                  ldr r0, =ASM_PREFIX(_mqx_kernel_data)
  172.2  00000054 0068                  ldr r0, [r0, #0]
  172.3                                 ENDM
  173    00000056 C369                          ldr r3, [r0, #KD_ACTIVE_PTR]   
                                                              // get active
                                                          task descriptor
  174    00000058 5961                          str r1, [r3, #TD_STACK_PTR]    
                                                              // store task SP
                                                          to task descriptor
                                                          td
  175                           
  176                           #if MQX_KERNEL_LOGGING
  178                           #endif
  179                           
  180                           ASM_LABEL(sched_internal)
  181    0000005A 416A                          ldr r1, [r0, #KD_CURRENT_READY_
                                                         Q]   // get current
                                                          ready q
  182                           ASM_LABEL(find_noempty_que)
  183    0000005C 0A68                          ldr r2, [r1, #0]               
                                                              // address of
                                                          first td
  184    0000005E 8A42                          cmp r2, r1                     
                                                              // ready_q
                                                          structure itself?
  185    00000060 07D1                          bne switch_task
  186    00000062 8968                          ldr r1, [r1, #RQ_NEXT_Q]       
                                                              // try next
                                                          queue
  187    00000064 0900                          movs r1, r1
  188    00000066 F9D1                          bne find_noempty_que
  189                           
  190                                           // r1 is 0 -> empty
  191                           ASM_LABEL(no_one_to_run)
  192                                           // wait for interrupt
  193    00000068 62B6                          cpsie i
  194    0000006A 30BF                          wfi
  195    0000006C 72B6                          cpsid i
  196                           
  197                                           // TODO check r0, must be
                                 kernel data
  198    0000006E 016A                          ldr r1, [r0, #KD_READY_Q_LIST] 
                                                              // get first que
                                                          from ready list
  199    00000070 F4E7                          b find_noempty_que
  200                           
  201                           ASM_LABEL(switch_task)
  202                                           // update kernel structures
  203    00000072 4162                          str r1, [r0, #KD_CURRENT_READY_
                                                         Q]   // store addr for
                                                          active que
  204    00000074 C261                          str r2, [r0, #KD_ACTIVE_PTR]   
                                                              // active task
                                                          descriptor
  205                           
  206    00000076 938C                          ldrh r3, [r2, #TD_TASK_SR]
  207    00000078 4383                          strh r3, [r0, #KD_ACTIVE_SR]   
                                                               // restore
                                                           priority mask for
                                                           enabled interrupt
                                                           for active
                                                           task
  208                           
  209                           #if MQX_ENABLE_USER_MODE
  211                           #endif
  212                           
  213                           #if MQX_KERNEL_LOGGING
  215                           #endif
  216                           
  217                                           // activate task, restore
                                 registers stacked in the following order (from
                                 higher addresses to lower addresses):
  218                                           // xPSR, PC, LR, R12, R3, R2,
                                 R1, R0, R11, R10, R9, R8, R7, R6, R5, R4,
                                 PRIMASK
  219    0000007A 5069                          ldr r0, [r2, #TD_STACK_PTR]    
                                                              // get task
                                                          SP
  220    0000007C 0146                          mov r1, r0
  221                           #ifdef __GNUC__
  223                           #else
  224    0000007E 2431                                          adds r1, r1,
  #36
  225                           #endif
  226    00000080 8C46                          mov r12, r1
  227                                           //load r4-r10
  228                           #ifdef __GNUC__
  230                           #else
  231    00000082 001D                                          adds r0, r0,
  #4
  232                           #endif
  233    00000084 FEC8                          ldm r0!, {r1-r7}
  234    00000086 BA46                          mov r10, r7
  235    00000088 B146                          mov r9, r6
  236    0000008A A846                          mov r8, r5
  237    0000008C 2746                          mov r7, r4
  238    0000008E 1E46                          mov r6, r3
  239    00000090 1546                          mov r5, r2
  240    00000092 0C46                          mov r4, r1
  241                                           //load r11
  242    00000094 02C8                          ldm r0!, {r1}
  243    00000096 8B46                          mov r11, r1
  244                                           //check if we are returning
                                 from the ISR or not
  245    00000098 EFF31481                      mrs r1, CONTROL
  246    0000009C 0029                          cmp r1, #0
  247    0000009E 07D1                          bne rest_of_stack_frame_restore
  248                           ASM_LABEL(return_from_interrupt)
  249                                           // returning from ISR - rest
                                 of stack frame will be loaded automatickly by
                                 HW when returning from the ISR
  250    000000A0 6146                          mov r1, r12
  251    000000A2 81F30988                      msr PSP, r1
  252                                           //load PRIMASK
  253                           #ifdef __GNUC__
  255                           #else
  256    000000A6 2439                                          subs r1, r1,
  #36
  257                           #endif
  258    000000A8 04C9                          ldm r1!, {r2}
  259    000000AA 82F31088                      msr PRIMASK, r2
  260                                           //load lr from the main
                                 stack
  261    000000AE 00BD                          pop {pc}
  262                           
  263                           ASM_LABEL(rest_of_stack_frame_restore)
  264                                           // returning from task,
                                 restore xPSR, PC, LR, R12, R3-R0 and also the
                                 PRIMASK
  265    000000B0 6146                          mov r1, r12
  266                           #ifdef __GNUC__
  268                           #else
  269    000000B2 2031                                          adds r1, r1,
  #32
  270                           #endif
  271    000000B4 81F30988                      msr PSP, r1
  272                           #ifdef __GNUC__
  274                           #else
  275    000000B8 1030                                          adds r0, r0,
  #16
  276                           #endif
  277                                           //restore R12, LR, PC
  278    000000BA 0EC8                          ldm r0!, {r1-r3}
  279    000000BC 8C46                          mov r12, r1
  280    000000BE 9646                          mov lr, r2
  281                                           //read stacked xPSR value
  282    000000C0 02C8                          ldm r0!, {r1}
  283                           #ifdef __GNUC__
  285                           #else
  286    000000C2 2038                                          subs r0, r0,
  #32
  287                           #endif
  288                           
  289                                           //bit 9 of the xPSR indicates
                                 the stack alignment on exception entry, if set
                                 SP has to be moved by 4 bytes
  290    000000C4 624A                          ldr r2, =0x200
  291                           #ifdef __GNUC__
  293                           #else
  294    000000C6 0A40                                          ands r2, r1,
  r2
  295                           #endif
  296    000000C8 04D0                          beq move_pc_at_the_start_of_sta
                                                     ckframe
  297    000000CA EFF30982                      mrs r2, PSP
  298                           #ifdef __GNUC__
  300                           #else
  301    000000CE 121D                                          adds r2, r2,
  #4
  302                           #endif
  303    000000D0 82F30988                      msr PSP, r2
  304                           ASM_LABEL(move_pc_at_the_start_of_stackframe)
  305    000000D4 0246                          mov r2, r0
  306                           #ifdef __GNUC__
  308                           #else
  309    000000D6 243A                                          subs r2, r2,
  #36
  310                           #endif
  311                                           //restore xPSR register, do
                                 not execute any instruction that updates flags
                                 after that point
  312                           #ifdef __GNUC__
  314                           #else
  315    000000D8 81F30088                                      msr APSR,
  r1
  316                           #endif
  317                                           //store stacked pc value
                                 (currently in r3) at the beginning of the
                                 stack frame to be later poped directly into
                                 the PC register
  318    000000DC 08B4                          push {r3}
  319    000000DE 10B4                          push {r4}
  320    000000E0 10CA                          ldm r2!, {r4}
  321                                           //restore R3-R0
  322    000000E2 0FC8                          ldm r0, {r0-r3}
  323                           
  324                           #if MQX_ENABLE_USER_MODE
  334                           #endif
  335                           
  336    000000E4 84F31088                      msr PRIMASK, r4
  337    000000E8 10BC                          pop {r4}
  338    000000EA 00BD                          pop {pc}
  339                           
  340                            ASM_PUBLIC_END(_sched_execute_scheduler_inter
                                nal)
  341                           
  342                           
  343                           /*FUNCTION*-----------------------------------
                                --------------------------------
  344                            *
  345                            * Function Name    : _mqx_api_call
  346                            * Returned Value   : none
  347                            * Comments         :
  348                            *
  349                            *END*----------------------------------------
                                ------------------------------*/
  350                           
  351                            ASM_PUBLIC_BEGIN(_mqx_api_call)
  352                            ASM_PUBLIC_FUNC(_mqx_api_call)
  353                           ASM_LABEL(_mqx_api_call)
  354                           
  355                           #if MQX_ENABLE_USER_MODE
  358                           #endif
  359                           ASM_LABEL(_mqx_api_call_end)
  360    000000EC FEE7                          b _mqx_api_call_end
  361                            ASM_PUBLIC_END(_mqx_api_call)
  362                           
  363                           #if MQX_ENABLE_USER_MODE
  420                           #endif
  421                           
  422                           /*FUNCTION*-----------------------------------
                                --------------------------------
  423                            *
  424                            * Function Name    : _task_block
  425                            * Returned Value   : none
  426                            * Comments         : task block function -
                                 block actual task - switch to another
  427                            *
  428                            *END*----------------------------------------
                                ------------------------------*/
  429                           
  430                            ASM_PUBLIC_BEGIN(_task_block)
  431                            ASM_PUBLIC_FUNC(_task_block)
  432                           ASM_LABEL(_task_block)
  433                           
  434                                           // store active task
                                 registers
  435                                           STORE_ALL_REGISTERS
  435.1  000000EE FFB4                  push {r0-r7} //r0-r4 will be later
                                               overwritten
  435.2  000000F0 4046                  mov r0, r8
  435.3  000000F2 4946                  mov r1, r9
  435.4  000000F4 5246                  mov r2, r10
  435.5  000000F6 5B46                  mov r3, r11
  435.6  000000F8 0FB4                  push {r0-r3}
  435.7  000000FA F0B4                  push {r4-r7}
  435.8  000000FC EFF31084              mrs  r4, PRIMASK
  435.9  00000100 10B4                  push {r4}
  435.10 00000102 EFF30981              mrs r1, PSP //PSP must be kept in
                                                  r1
  435.11                                //get APSR and orr it with 0x01000000
                                 (thumb bit set)
  435.12 00000106 EFF30085              mrs r5, APSR 
  435.13 0000010A 504E                  ldr r6, =0x01000000
  435.14 0000010C 3543                  orrs r5, r5, r6
  435.15 0000010E 6246                  mov r2, r12
  435.16 00000110 7346                  mov r3, lr
  435.17 00000112 7446                  mov r4, lr //pc
  435.18 00000114 0846                  mov r0, r1
  435.19 00000116 3430                  adds r0, r0, #52
  435.20 00000118 3CC0                  stm r0!, {r2-r5}
  435.21                                ENDM
  436                                           //disable interrupts
  437    0000011A 72B6                          cpsid i
  438                           
  439                                           GET_KERNEL_DATA r0
  439.1  0000011C 4A48                  ldr r0, =ASM_PREFIX(_mqx_kernel_data)
  439.2  0000011E 0068                  ldr r0, [r0, #0]
  439.3                                 ENDM
  440    00000120 C369                          ldr r3, [r0, #KD_ACTIVE_PTR]   
                                                              // get active
                                                          task descriptor
  441    00000122 5961                          str r1, [r3, #TD_STACK_PTR]    
                                                              // store task SP
                                                          to task descriptor
                                                          td
  442                           
  443                           
  444                                           // set task block bit
  445    00000124 9A68                          ldr r2, [r3, #TD_STATE]
  446    00000126 0121                          movs r1, #1                    
                                                              // TODO change
                                                           from number to
                                                           define
  447                           #ifdef __GNUC__
  449                           #else
  450    00000128 0A43                                          orrs r2, r2,
  r1
  451                           #endif
  452    0000012A 9A60                          str r2, [r3, #TD_STATE]
  453                           
  454                           #if MQX_KERNEL_LOGGING
  456                           #endif // MQX_KERNEL_LOGGING
  457                                           // remove active task from
                                 ready queue
  458    0000012C 5A68                          ldr r2, [r3, #TD_TD_PREV]      
                                                              // get ptr to
                                                          ready_q structure
  459    0000012E 1968                          ldr r1, [r3, #TD_TD_NEXT]
  460    00000130 1160                          str r1, [r2, #RQ_HEAD_READY_Q]
  461    00000132 4A60                          str r2, [r1, #TD_TD_PREV]
  462                           
  463    00000134 91E7                          b sched_internal   // Search
                                                    for the next task in the
                                                    ready queue.
  464                           
  465                           
  466                            ASM_PUBLIC_END(_task_block)
  467                           
  468                           
  469                           /*FUNCTION*-----------------------------------
                                --------------------------------
  470                            *
  471                            * Function Name    : _int_kernel_isr
  472                            * Returned Value   : none
  473                            * Comments         : MQX kernel interrupt
                                 handler
  474                            *
  475                            *END*----------------------------------------
                                ------------------------------*/
  476                           
  477                           // kernel interrupt handler
  478                            ASM_PUBLIC_BEGIN(_int_kernel_isr)
  479                            ASM_PUBLIC_FUNC(_int_kernel_isr)
  480                           ASM_LABEL(_int_kernel_isr)
  481    00000136 EFF31080                      mrs  r0, PRIMASK
  482    0000013A 72B6                          cpsid i
  483    0000013C 00B5                          push {lr}
  484    0000013E 01B4                          push {r0}
  485                           
  486                                           GET_KERNEL_DATA r3            
                                  // get the kernel data address
  486.1  00000140 414B                  ldr r3, =ASM_PREFIX(_mqx_kernel_data)
  486.2  00000142 1B68                  ldr r3, [r3, #0]
  486.3                                 ENDM
  487                           
  488                                           // increment in interrupt
                                 counter
  489    00000144 198B                          ldrh r1, [r3, #KD_IN_ISR]
  490                           #ifdef __GNUC__
  492                           #else
  493    00000146 491C                                          adds r1, r1,
  #1
  494                           #endif
  495    00000148 1983                          strh r1, [r3, #KD_IN_ISR]
  496                           
  497                                           // create interrupt content
  498    0000014A 0020                          ldr r0, =0                     
                                                          // error code (set
                                                          0)
  499    0000014C 01B4                          push {r0}                      
                                                       // store in stack
  500    0000014E EFF30581                      mrs r1, IPSR                   
                                                          // exception
                                                          number
  501    00000152 586B                          ldr r0, [r3, #KD_INTERRUPT_CONT
                                                         EXT_PTR] // previous
                                                          interrupt content
  502    00000154 03B4                          push {r0-r1}                   
                                                       // store in stack
  503                           
  504    00000156 EFF30880                      mrs r0, MSP                    
                                                          // get address of
                                                          interrupt content
  505    0000015A 5863                          str r0, [r3, #KD_INTERRUPT_CONT
                                                         EXT_PTR] // store
                                                          address of actual
                                                          interrupt content in
                                                          kernel data
  506                           
  507    0000015C 0846                          mov r0, r1
  508                           
  509                           #if MQX_KERNEL_LOGGING
  519                           #endif // MQX_KERNEL_LOGGING
  520                                           // get C function address from
                                 MQX interrupt table
  521                                           // r0 - interrupt number
  522                           
  523                                           // check if isr is in table
                                 range
  524    0000015E 1A6B                          ldr r2, [r3, #KD_LAST_USER_ISR_
                                                         VECTOR]
  525                           
  526                                           // cbz r2, _isr_run_default   
                                    // isr not used (cbz not working in
                                 CW)
  527    00000160 002A                          cmp r2, #0
  528    00000162 00D1                          bne _isr_skip_run_default1     
                                                       // isr not used (this is
                                                      CW workaround)
  529    00000164 3AE0                          b _isr_run_default
  530                           ASM_LABEL(_isr_skip_run_default1)
  531                           
  532    00000166 9042                          cmp r0, r2
  533    00000168 38D8                          bhi _isr_run_default
  534                           
  535    0000016A DA6A                          ldr r2, [r3, #KD_FIRST_USER_ISR
                                                         _VECTOR]
  536                           #ifdef __GNUC__
  538                           #else
  539    0000016C 811A                                          subs r1, r0, r2
                         // r1 = actual exception number in table
  540                           #endif
  541    0000016E 35DB                          blt _isr_run_default
  542                           
  543                           #if MQX_SPARSE_ISR_TABLE
  578                           #else /* MQX_SPARSE_ISR_TABLE */
  579                           
  580                           ASM_LABEL(_int_kernel_isr_vect_ok)
  581                                           // calculate offset in
                                 table
  582                                           // each table entry is 12
                                 bytes in size
  583    00000170 0C22                          movs r2, #12
  584                           #ifdef __GNUC__
  586                           #else
  587    00000172 5143                                          muls r1, r2,
  r1
  588                           #endif
  589                           
  590    00000174 9A6B                          ldr r2, [r3, #KD_INTERRUPT_TABL
                                                         E_PTR]       //
                                                          pointer to interrupt
                                                          table begin
  591    00000176 1144                          add r1, r1, r2                 
                                                                          //
                                                              get address of
                                                              entry in
                                                              table
  592    00000178 0A68                          ldr r2, [r1, #0]
  593    0000017A 8868                          ldr r0, [r1, #IT_APP_ISR_DATA] 
                                                                      // move
                                                          notifier data into r0
                                                          = first parameter in
                                                          C func
  594                           #endif /* MQX_SPARSE_ISR_TABLE */
  595                           
  596                           ASM_LABEL(_isr_execute)
  597                                           // r0 = first parameter in C
                                 func
  598                                           // r2 contain interrupt
                                 function address
  599                           
  600    0000017C 62B6                          cpsie i
  601                                           //MSR PRIMASK, R11
  602    0000017E 08B4                          push {r3}
  603                           
  604    00000180 9047                          blx r2
  605                           
  606                           ASM_LABEL(_int_kernel_isr_epilog)
  607                           
  608    00000182 08BC                          pop {r3}
  609                                           //MRS  R11, PRIMASK
  610    00000184 72B6                          cpsid i
  611                           
  612                           ASM_LABEL(_int_kernel_isr_return_internal)
  613                           
  614                           #if MQX_KERNEL_LOGGING
  626                           #endif /* MQX_KERNEL_LOGGING */
  627                           
  628                                           // remove interrupt content
  629    00000186 03BC                          pop {r0-r1}
  630    00000188 5863                          str r0, [r3, #KD_INTERRUPT_CONT
                                                         EXT_PTR] // update
                                                          pointer to interrupt
                                                          content
  631                           
  632    0000018A 01BC                          pop {r0}                       
                                                              // error
                                                      code
  633                           
  634                                           // decrement interrupt
                                 counter
  635    0000018C 198B                          ldrh r1, [r3, #KD_IN_ISR]
  636                           #ifdef __GNUC__
  638                           #else
  639    0000018E 491E                                          subs r1, r1,
  #1
  640                           #endif
  641    00000190 1983                          strh r1, [r3, #KD_IN_ISR]
  642                           
  643    00000192 0029                          cmp r1, #0
  644    00000194 1ED1                          bne _isr_return_end        //
                                                      waiting another isr, do
                                                      not reschedule
  645                           
  646                                           // check for reschedule
  647                                           // check preemtion
  648    00000196 DA69                          ldr r2, [r3, #KD_ACTIVE_PTR]   
                                                          // TD pointer
  649    00000198 906A                          ldr r0, [r2, #TD_FLAGS]
  650    0000019A 2E49                          ldr r1, =TASK_PREEMPTION_DISABL
                                                         ED
  651    0000019C 0842                          tst r0, r1
  652    0000019E 19D1                          bne _isr_return_end
  653                           
  654                                           // if a different TD at head
                                 of current readyq, then we need to run the
                                 scheduler
  655                                           // check for reschedule
  656    000001A0 596A                          ldr r1, [r3, #KD_CURRENT_READY_
                                                         Q]
  657    000001A2 0968                          ldr r1, [r1]
  658    000001A4 9142                          cmp r1, r2
  659                           
  660    000001A6 15D0                          beq _isr_return_end
  661                           
  662                                           // store rest of stack frame
                                 that is not stacked automatically by the HW
                                 when entering an exception
  663                                           // i.e. R11, R10, R9, R8, R7,
                                 R6, R5, R4, PRIMASK
  664    000001A8 EFF30981                      mrs r1, PSP
  665                                           // get PC and increment it by
                                 1
  666                           #ifdef __GNUC__
  668                           #else
  669    000001AC 1831                                          adds r1, r1,
  #24
  670                           #endif
  671    000001AE 01C9                          ldm r1!, {r0}
  672                           #ifdef __GNUC__
  675                           #else
  676    000001B0 401C                                          adds r0, r0,
  #1
  677    000001B2 091F                          subs r1, r1, #4
  678                           #endif
  679    000001B4 01C1                          stm r1!, {r0}
  680                           #ifdef __GNUC__
  682                           #else
  683    000001B6 4039                                          subs r1, r1,
  #64
  684                           #endif
  685                                           //get PRIMASK from the main
                                 stack and store it in the process stack
  686    000001B8 01BC                          pop {r0}
  687    000001BA 01C1                          stm r1!, {r0}
  688    000001BC F0C1                          stm r1!, {r4-r7}
  689    000001BE 4246                          mov r2, r8
  690    000001C0 4B46                          mov r3, r9
  691    000001C2 5446                          mov r4, r10
  692    000001C4 5D46                          mov r5, r11
  693    000001C6 3CC1                          stm r1!, {r2-r5}
  694                           #ifdef __GNUC__
  696                           #else
  697    000001C8 2439                                          subs r1, r1,
  #36
  698                           #endif
  699                           
  700                                           //store new PSP value into
                                 TD
  701                                           GET_KERNEL_DATA r0
  701.1  000001CA 1F48                  ldr r0, =ASM_PREFIX(_mqx_kernel_data)
  701.2  000001CC 0068                  ldr r0, [r0, #0]
  701.3                                 ENDM
  702    000001CE C369                          ldr r3, [r0, #KD_ACTIVE_PTR]   
                                                              // get active
                                                          task descriptor
  703    000001D0 5961                          str r1, [r3, #TD_STACK_PTR]    
                                                              // store task SP
                                                          to task descriptor
                                                          td
  704                           
  705    000001D2 42E7                          b sched_internal
  706                           
  707                           ASM_LABEL(_isr_return_end)
  708    000001D4 01BC                          pop {r0}
  709    000001D6 80F31088                      msr PRIMASK, r0
  710    000001DA 00BD                          pop {pc}
  711                           
  712                           ASM_LABEL(_isr_run_default)
  713                                           // r0 - interrupt number
  714                           
  715    000001DC 9A6A                          ldr r2, [r3, #KD_DEFAULT_ISR]
  716                           
  717    000001DE CDE7                          b _isr_execute
  718                            ASM_PUBLIC_END(_int_kernel_isr)
  719                           
  720                           /*FUNCTION*-----------------------------------
                                --------------------------------
  721                            *
  722                            * Function Name    : _psp_exception_return
  723                            * Returned Value   : none
  724                            * Comments         : This functions returns
                                 us from an isr exception
  725                            *
  726                            *END*----------------------------------------
                                ------------------------------*/
  727                           
  728                            ASM_PUBLIC_BEGIN(_psp_exception_return)
  729                            ASM_PUBLIC_FUNC(_psp_exception_return)
  730                           ASM_LABEL(_psp_exception_return)
  731    000001E0 72B6                          cpsid i
  732    000001E2 F7B4                          push {r0, r1, r2, r4-r7}    //
                                                       store parameter and
                                                       registers which are used
                                                       for copy and cpu do not
                                                       store if
  733                           
  734                                           GET_KERNEL_DATA r3
  734.1  000001E4 184B                  ldr r3, =ASM_PREFIX(_mqx_kernel_data)
  734.2  000001E6 1B68                  ldr r3, [r3, #0]
  734.3                                 ENDM
  735                           
  736                                           // copy actual int context +
                                 4WORDS -> prev int context - (1 + 8)WORDS
  737    000001E8 5A6B                          ldr r2, [r3, #KD_INTERRUPT_CONT
                                                         EXT_PTR]    // get
                                                          actual int context
  738                           #ifdef __GNUC__
  740                           #else
  741    000001EA 1032                                          adds r2, r2,
  #16               // calculate source address
  742                           #endif
  743                           
  744    000001EC 1168                          ldr r1, [r2]
  745    000001EE 8E46                          mov lr, r1                    
                                                          // lr - return from
                                                          exception...
                                                          (0xfffffff1)
  746                           #ifdef __GNUC__
  748                           #else
  749    000001F0 121D                                          adds r2, r2, #4
                 // increment r2 by 4
  750                           #endif
  751                           
  752                                           // modify return address (PC)
                                 in exception stack frame (kernel isr
                                 epilog)
  753    000001F2 1948                          ldr r0, =_int_kernel_isr_epilog
  754    000001F4 0121                          movs r1, #1
  755                           #ifdef __GNUC__
  757                           #else
  758    000001F6 8843                                          bics r0, r0,
  r1
  759                           #endif
  760    000001F8 9061                          str r0, [r2, #24]
  761                           
  762    000001FA FFCA                          ldmia r2, {r0-r7}             
                                                            // read exception
                                                            stack frame
  763    000001FC B846                          mov r8, r7
  764                           
  765    000001FE 80BC                          pop {r7}                      
                                                      // get prev int context
                                                      address (function
                                                      parameter - r0)
  766                           
  767                                           // destination stack address
                                 (4B + 32B - exception stack frame)
  768                           #ifdef __GNUC__
  770                           #else
  771    00000200 3F1F                                          subs r7, r7, #4
     //#36
  772                           #endif
  773    00000202 7FC7                          stm r7!, {r0-r6} //stmdb??
  774                           #ifdef __GNUC__
  776                           #else
  777    00000204 1C3F                                          subs r7, r7,
  #28
  778                           #endif
  779    00000206 3846                          mov r0, r7
  780    00000208 4746                          mov r7, r8
  781    0000020A 80C0                          stm r0!, {r7} //stmdb??
  782                           #ifdef __GNUC__
  784                           #else
  785    0000020C 001F                                          subs r0, r0,
  #4
  786                           #endif
  787                                           // restore modified registers
                                 which are not restored by cpu
  788    0000020E F6BC                          pop {r1, r2, r4-r7}
  789                           
  790    00000210 80F30888                      msr MSP, r0                   
                                                           // update MSP (main
                                                           stack pointer)
  791                           
  792    00000214 62B6                          cpsie i
  793                           
  794    00000216 7047                          bx lr
  795                            ASM_PUBLIC_END(_psp_exception_return)
  796                           
  797                           /*********************************************
                                **********************************
  798                            * test support
  799                            *********************************************
                                *********************************/
  800                           
  801                           /*FUNCTION*-----------------------------------
                                --------------------------------
  802                            *
  803                            * Function Name    : _mem_test_and_set
  804                            * Returned Value   :  previous value of
                                 location
  805                            * Comments         :
  806                            *   This function tests a byte location, and
                                 if AND 0x80 is 0 (7bit is set !!!), sets it to
                                 0x80.
  807                            *   It returns the previous value of the byte
                                 (0 or 0x80).
  808                            *END*----------------------------------------
                                ------------------------------*/
  809                           
  810                            ASM_PUBLIC_BEGIN(_mem_test_and_set)
  811                            ASM_PUBLIC_FUNC(_mem_test_and_set)
  812                           ASM_LABEL(_mem_test_and_set)
  813    00000218 06B5                          push {r1, r2, lr}
  814                           
  815    0000021A 0178                          ldrb r1, [r0]
  816    0000021C 8022                          ldr r2, =0x80
  817    0000021E 1142                          tst r1, r2
  818    00000220 03D1                          bne _mem_test_and_set_0x80
  819                           #ifdef __GNUC__
  821                           #else
  822    00000222 1143                                          orrs r1, r1,
  r2
  823                           #endif
  824    00000224 0170                          strb r1, [r0]
  825                           #ifdef __GNUC__
  827                           #else
  828    00000226 4040                                          eors r0,
  r0
  829                           #endif
  830    00000228 00E0                          b _mem_test_and_set_pop
  831                           ASM_LABEL(_mem_test_and_set_0x80)
  832    0000022A 8020                          movs r0, #0x80
  833                           
  834                           ASM_LABEL(_mem_test_and_set_pop)
  835    0000022C 06BD                          pop {r1, r2, pc}
  836                            ASM_PUBLIC_END(_mem_test_and_set)
  837                           
  838                           /*FUNCTION*-----------------------------------
                                --------------------------------
  839                            *
  840                            * Function Name    : __get_PSP
  841                            * Returned Value   : none
  842                            * Comments         : This functions returns
                                 PSP register value
  843                            *
  844                            *END*----------------------------------------
                                ------------------------------*/
  845                           
  846                            ASM_PUBLIC_BEGIN(__get_PSP)
  847                            ASM_PUBLIC_FUNC(__get_PSP)
  848                           ASM_LABEL(__get_PSP)
  849    0000022E EFF30980                      mrs r0, PSP
  850    00000232 7047                          bx lr
  851                            ASM_PUBLIC_END(__get_PSP)
  852                           
  853                           /*FUNCTION*-----------------------------------
                                --------------------------------
  854                            *
  855                            * Function Name    : __get_MSP
  856                            * Returned Value   : none
  857                            * Comments         : This functions returns
                                 MSP register value
  858                            *
  859                            *END*----------------------------------------
                                ------------------------------*/
  860                           
  861                            ASM_PUBLIC_BEGIN(__get_MSP)
  862                            ASM_PUBLIC_FUNC(__get_MSP)
  863                           ASM_LABEL(__get_MSP)
  864    00000234 EFF30880                      mrs r0, MSP
  865    00000238 7047                          bx lr
  866                            ASM_PUBLIC_END(__get_MSP)
  867                           
  868                           /*FUNCTION*-----------------------------------
                                --------------------------------
  869                            *
  870                            * Function Name    : __set_MSPI
  871                            * Returned Value   : none
  872                            * Comments         : This functions set MSP
                                 register value
  873                            *
  874                            *END*----------------------------------------
                                ------------------------------*/
  875                           
  876                            ASM_PUBLIC_BEGIN(__set_MSPI)
  877                            ASM_PUBLIC_FUNC(__set_MSPI)
  878                           ASM_LABEL(__set_MSPI)
  879    0000023A 80F30888                      msr MSP, r0
  880    0000023E 7047                          bx lr
  881                            ASM_PUBLIC_END(__set_MSPI)
  882                           
  883                           /*FUNCTION*-----------------------------------
                                --------------------------------
  884                            *
  885                            * Function Name    : __get_PSR
  886                            * Returned Value   : none
  887                            * Comments         : This functions returns
                                 PSR (procesor status register) value
  888                            *
  889                            *END*----------------------------------------
                                ------------------------------*/
  890                           
  891                            ASM_PUBLIC_BEGIN(__get_PSR)
  892                            ASM_PUBLIC_FUNC(__get_PSR)
  893                           ASM_LABEL(__get_PSR)
  894                                   #ifdef __CWARM__
  896                                   #else
  897    00000240 EFF30380                       mrs r0, PSR
  898                                   #endif
  899    00000244 7047                           bx lr
  900                            ASM_PUBLIC_END(__get_PSR)
  901                           
  902                           /* IAR defines following functions internally
                                 */
  903                           #ifndef __IAR_SYSTEMS_ASM__
  988                           #endif  /*__IAR_SYSTEMS_ASM__*/
  989                           
  990                            ASM_ALIGN(4)
  990.1                                  TABLE
  990.2  00000248 ........              Reference on line 90,99,108,172,439,486
                                         ,701,734
  990.3  0000024C 00000001              Reference on line 168,435
  990.4  00000250 00020000              Reference on line 290
  990.5  00000254 00100000              Reference on line 650
  990.6  00000258 ........              Reference on line 753
  991                            ASM_END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 604         #
##############################



