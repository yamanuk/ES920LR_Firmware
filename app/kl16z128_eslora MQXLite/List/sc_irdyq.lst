###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         14/May/2020  16:51:02
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\sc_irdyq.c
#    Command line      =
#        -f C:\Users\81901\AppData\Local\Temp\EW60D3.tmp
#        (C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\sc_irdyq.c
#        --preprocess=s
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List" -lcN
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List" -o
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\Sources\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\include\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\config\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\compiler\iar\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Generated_Code\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\PExSupport\Kinetis\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\OSAbstraction\MQXLite\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Common\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\Lists\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\FunctionLib\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\SecLib\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\FSCI\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\FSCI\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Panic\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\SerialManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\MemManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\TimersManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\TimersManager\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Messaging\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\ieee_802_15_4\Phy\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\ieee_802_15_4\SMAC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\ADC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\BME\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\Flash\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\I2C\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LED\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LLWU\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LPTMR\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\SMC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\MCG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\Reset\
#        -On)
#    Locale            =  C
#    List file         =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List\sc_irdyq.lst
#    Object file       =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\Obj\sc_irdyq.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\sc_irdyq.c
      1          /**HEADER*********************************************************************
      2          *
      3          * Copyright (c) 2010 Freescale Semiconductor
      4          * All Rights Reserved
      5          *
      6          ******************************************************************************
      7          *
      8          * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR
      9          * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     10          * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     11          * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     12          * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     13          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     14          * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     15          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     16          * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
     17          * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
     18          * THE POSSIBILITY OF SUCH DAMAGE.
     19          *
     20          ******************************************************************************
     21          *
     22          * $FileName: sc_irdyq.c$
     23          * $Version : 3.8.4.0$
     24          * $Date    : Aug-30-2011$
     25          *
     26          * Comments:
     27          *   This file contains psp functions for initializing the scheduler.n
     28          *
     29          *END*************************************************************************/
     30          
     31          #include "mqx_inc.h"
     32          
     33          /*FUNCTION*-------------------------------------------------------------------
     34          *
     35          * Function Name    : _psp_set_kernel_disable_level
     36          * Returned Value   :
     37          * Comments         :
     38          *    This function sets up the kernel disable priority.
     39          *
     40          *END*-----------------------------------------------------------------------*/
     41          
     42          void _psp_set_kernel_disable_level
     43              (
     44                  void
     45              )
     46          {
     47              KERNEL_DATA_STRUCT_PTR          kernel_data;
     48              MQX_INITIALIZATION_STRUCT_PTR   init_ptr;
     49              uint_32 temp;
     50              _mqx_int i;
     51          
     52              _GET_KERNEL_DATA(kernel_data);
     53          
     54              init_ptr = &kernel_data->INIT;
     55          
     56              /* Calculate the enable and disable interrupt values for the kernel. */
     57              temp = init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX;
     58              if (temp > 7) {
     59                  temp = 7;
     60                  init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 7;
     61              } else if (temp == 0) {
     62                  temp = 1;
     63                  init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 1;
     64              }
     65          
     66              kernel_data->DISABLE_SR = CORTEX_PRIOR(temp);
     67          
     68              /* Set all (till now unused) interrupts level to the disable level */
     69              for (i = 0; i < sizeof(NVIC_BASE_PTR->IP) / sizeof(NVIC_BASE_PTR->IP[0]); i++)
     70                  NVIC_BASE_PTR->IP[i] = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);
     71          
     72          
     73              /* Disable interrupts by default */
     74              {
     75                  uint32_t * icer_ptr = (uint32_t *)&NVIC_BASE_PTR->ICER;
     76          
     77                  for (i = 0; i < sizeof(NVIC_BASE_PTR->ICER) / sizeof(uint32_t); i++)    {
     78                      /* Disable 32 interrupts in a row */
     79                      *(icer_ptr + i) = 0xFFFFFFFF;
     80                  }
     81              }
     82          }
     83          
     84          
     85          /*FUNCTION*-------------------------------------------------------------------
     86          *
     87          * Function Name    : _psp_init_readyqs
     88          * Returned Value   : uint_32 result_code
     89          * Comments         :
     90          *    This function sets up the kernel priority ready queues
     91          *
     92          *END*-----------------------------------------------------------------------*/
     93          
     94          uint_32 _psp_init_readyqs
     95              (
     96                  void
     97              )
     98          { /* Body */
     99             KERNEL_DATA_STRUCT_PTR kernel_data;
    100             READY_Q_STRUCT_PTR     q_ptr;
    101             uint_32                priority_levels;
    102             uint_32                n;
    103          
    104              _GET_KERNEL_DATA(kernel_data);
    105              kernel_data->READY_Q_LIST = (READY_Q_STRUCT_PTR) NULL;
    106              priority_levels = kernel_data->LOWEST_TASK_PRIORITY + 2;
    107          
    108          #ifdef MQX_LITE_VERSION_NUMBER
    109              q_ptr = &mqx_static_ready_queue[0];
    110          #else
    111              q_ptr = (READY_Q_STRUCT_PTR)_mem_alloc_zero(sizeof(READY_Q_STRUCT) * priority_levels);
    112              #if MQX_CHECK_MEMORY_ALLOCATION_ERRORS
    113                  if ( q_ptr == NULL ) {
    114                      return (MQX_OUT_OF_MEMORY);
    115                  } /* Endif */
    116              #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    117              _mem_set_type(q_ptr, MEM_TYPE_READYQ);
    118          #endif /* MQX_LITE_VERSION_NUMBER */
    119          
    120              n = priority_levels;
    121              while (n--) {
    122                  q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
    123                  q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
    124                  q_ptr->PRIORITY      = (uint_16)n;
    125          
    126                  if (n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX < ((1 << CORTEX_PRIOR_IMPL) - 1))
    127                      q_ptr->ENABLE_SR   = CORTEX_PRIOR(n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX);
    128                  else
    129                      q_ptr->ENABLE_SR   = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);
    130          
    131                  q_ptr->NEXT_Q        = kernel_data->READY_Q_LIST;
    132                  kernel_data->READY_Q_LIST = q_ptr++;
    133              }
    134          
    135          
    136              /*
    137              ** Set the current ready q (where the ready queue searches start) to
    138              ** the head of the list of ready queues.
    139              */
    140              kernel_data->CURRENT_READY_Q = kernel_data->READY_Q_LIST;
    141          
    142          #if 0
    143              /* Initialize the ENABLE_SR fields in the ready queues */
    144              sr = 0;
    145              n  = priority_levels;
    146              q_ptr =  kernel_data->READY_Q_LIST;
    147              while (n--) {
    148                  q_ptr->ENABLE_SR = CORTEX_PRIOR(sr);
    149                  if (sr < kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX) {
    150                      sr++;
    151                  }
    152                  q_ptr = q_ptr->NEXT_Q;
    153              }
    154          #endif
    155          
    156              return MQX_OK;
    157          
    158          } /* Endbody */
    159          
    160          /* EOF */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   _psp_init_readyqs
      16   _psp_set_kernel_disable_level


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
      90  _psp_init_readyqs
      88  _psp_set_kernel_disable_level

 
 194 bytes in section .text
 
 194 bytes of CODE memory

Errors: none
Warnings: none
