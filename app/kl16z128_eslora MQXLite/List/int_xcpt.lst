###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         14/May/2020  16:50:59
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\int_xcpt.c
#    Command line      =
#        -f C:\Users\81901\AppData\Local\Temp\EW5562.tmp
#        (C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\int_xcpt.c
#        --preprocess=s
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List" -lcN
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List" -o
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\Sources\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\include\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\config\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\compiler\iar\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Generated_Code\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\PExSupport\Kinetis\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\OSAbstraction\MQXLite\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Common\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\Lists\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\FunctionLib\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\SecLib\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\FSCI\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\FSCI\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Panic\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\SerialManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\MemManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\TimersManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\TimersManager\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Messaging\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\ieee_802_15_4\Phy\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\ieee_802_15_4\SMAC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\ADC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\BME\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\Flash\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\I2C\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LED\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LLWU\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LPTMR\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\SMC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\MCG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\Reset\
#        -On)
#    Locale            =  C
#    List file         =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List\int_xcpt.lst
#    Object file       =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\Obj\int_xcpt.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\int_xcpt.c
      1          /*HEADER*********************************************************************
      2          *
      3          * Copyright (c) 2010 Freescale Semiconductor;
      4          * All Rights Reserved
      5          *
      6          ***************************************************************************
      7          *
      8          * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR
      9          * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     10          * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     11          * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     12          * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     13          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     14          * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     15          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     16          * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
     17          * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
     18          * THE POSSIBILITY OF SUCH DAMAGE.
     19          *
     20          **************************************************************************
     21          *
     22          * $FileName: int_xcpt.c$
     23          * $Version : 3.8.5.0$
     24          * $Date    : Aug-30-2011$
     25          *
     26          * Comments:
     27          *
     28          *   This file contains the isr that handles exceptions.
     29          *
     30          *END************************************************************************/
     31          
     32          #include "mqx_inc.h"
     33          
     34          
     35          #if MQX_USE_INTERRUPTS
     36          /*!
     37           * \brief To provide support for exception handlers, applications can use this ISR
     38           * to replace the default ISR. The ISR is specific to the PSP.
     39           *
     40           * An application calls _int_install_exception_isr() to install _int_exception_isr().
     41           * \n The function _int_exception_isr() does the following:
     42           * \n - If an exception occurs when a task is running and a task exception ISR
     43           * exists, MQX runs the ISR; if a task exception ISR does not exist, MQX aborts
     44           * the task by calling _task_abort().
     45           * \n - If an exception occurs when an ISR is running and an ISR exception ISR
     46           * exists, MQX aborts the running ISR and runs the ISR’s exception ISR.
     47           * \n - The function walks the interrupt stack looking for information about the
     48           * ISR or task that was running before the exception occurred. If the function
     49           * determines that the interrupt stack contains incorrect information, it calls
     50           * _mqx_fatal_error() with error code MQX_CORRUPT_INTERRUPT_STACK.
     51           *
     52           * \param[in] parameter Parameter passed to the default ISR (the vector number).
     53           *
     54           * \warning See description.
     55           *
     56           * \see _int_install_exception_isr
     57           * \see _mqx_fatal_error
     58           * \see _task_abort
     59           */
     60          void _int_exception_isr
     61             (
     62                pointer parameter
     63             )
     64          { /* Body */
     65              KERNEL_DATA_STRUCT_PTR         kernel_data;
     66              TD_STRUCT_PTR                  td_ptr;
     67              PSP_INT_CONTEXT_STRUCT_PTR     exception_frame_ptr;
     68              PSP_INT_CONTEXT_STRUCT_PTR     isr_frame_ptr;
     69              INTERRUPT_TABLE_STRUCT_PTR     table_ptr;
     70              INT_EXCEPTION_FPTR             exception_handler;
     71              uint_32                        isr_vector;
     72          /*    uint_32                        exception_vector; */
     73          
     74              _GET_KERNEL_DATA(kernel_data);
     75              td_ptr = kernel_data->ACTIVE_PTR;
     76          
     77              /* Stop all interrupts */
     78              _PSP_SET_DISABLE_SR(kernel_data->DISABLE_SR);
     79              /*_int_disable(); */
     80          
     81              if ( kernel_data->IN_ISR > 1 ) {
     82                  /* We have entered this function from an exception that happened
     83                   * while an isr was running.
     84                   */
     85          
     86                  /* Get our current exception frame */
     87                  exception_frame_ptr = kernel_data->INTERRUPT_CONTEXT_PTR;
     88          
     89                  /* the current context contains a pointer to the next one */
     90                  isr_frame_ptr = (PSP_INT_CONTEXT_STRUCT_PTR)exception_frame_ptr->PREV_CONTEXT;
     91                  if (isr_frame_ptr == NULL) {
     92                      /* This is not allowable */
     93                      _mqx_fatal_error(MQX_CORRUPT_INTERRUPT_STACK);
     94                  }
     95          
     96                  isr_vector =  isr_frame_ptr->EXCEPTION_NUMBER;
     97          
     98                  /* Call the isr exception handler for the ISR that WAS running */
     99                  table_ptr = kernel_data->INTERRUPT_TABLE_PTR;
    100          #if MQX_CHECK_ERRORS
    101                  if ((table_ptr != NULL) &&
    102                      (isr_vector >= kernel_data->FIRST_USER_ISR_VECTOR) &&
    103                      (isr_vector <= kernel_data->LAST_USER_ISR_VECTOR))
    104                  {
    105          #endif
    106                  /* Call the exception handler for the isr on isr_vector,
    107                   * passing the isr_vector, the exception_vector, the isr_data and
    108                   * the basic frame pointer for the exception
    109                   */
    110                  exception_handler = _int_get_exception_handler(isr_vector);
    111          
    112                  if (exception_handler) {
    113                      (*exception_handler)(isr_vector, (_mqx_uint)parameter, _int_get_isr_data(isr_vector)/*table_ptr->APP_ISR_DATA*/, exception_frame_ptr);
    114                  }
    115          
    116          #if MQX_CHECK_ERRORS
    117                  } else {
    118                      /* In this case, the exception occured in this handler */
    119                      _mqx_fatal_error(MQX_INVALID_VECTORED_INTERRUPT);
    120                  }
    121          #endif
    122          
    123                  /* Indicate we have popped 1 interrupt stack frame (the exception frame) */
    124                  --kernel_data->IN_ISR;
    125          
    126                  /* Reset the stack to point to the interrupt frame */
    127                  /* And off we go. Will never return */
    128                  _psp_exception_return( (pointer)isr_frame_ptr );
    129          
    130              } else {
    131                  /* We have entered this function from an exception that happened
    132                   * while a task was running.
    133                   */
    134          
    135                  if (td_ptr->EXCEPTION_HANDLER_PTR != NULL ) {
    136                      (*td_ptr->EXCEPTION_HANDLER_PTR)((_mqx_uint)parameter,
    137                      td_ptr->STACK_PTR);
    138                  } else {
    139                      /* Abort the current task */
    140                      _task_abort(MQX_NULL_TASK_ID);
    141                  }
    142             }
    143          }
    144          
    145          #endif
    146          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   _int_exception_isr
        40   -- Indirect call
        40   -> _int_get_exception_handler
        40   -> _int_get_isr_data
        40   -> _mqx_fatal_error
        40   -> _psp_exception_return
        40   -> _task_abort


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     164  _int_exception_isr

 
 164 bytes in section .text
 
 164 bytes of CODE memory

Errors: none
Warnings: none
