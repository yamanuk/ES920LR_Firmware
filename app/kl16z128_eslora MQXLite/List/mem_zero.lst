###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         14/May/2020  16:51:00
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\mem_zero.c
#    Command line      =
#        -f C:\Users\81901\AppData\Local\Temp\EW58DA.tmp
#        (C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\mem_zero.c
#        --preprocess=s
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List" -lcN
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List" -o
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\Sources\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\include\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\config\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\compiler\iar\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Generated_Code\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\PExSupport\Kinetis\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\OSAbstraction\MQXLite\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Common\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\Lists\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\FunctionLib\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\SecLib\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\FSCI\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\FSCI\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Panic\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\SerialManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\MemManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\TimersManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\TimersManager\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Messaging\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\ieee_802_15_4\Phy\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\ieee_802_15_4\SMAC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\ADC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\BME\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\Flash\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\I2C\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LED\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LLWU\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LPTMR\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\SMC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\MCG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\Reset\
#        -On)
#    Locale            =  C
#    List file         =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List\mem_zero.lst
#    Object file       =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\Obj\mem_zero.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\mem_zero.c
      1          /**HEADER********************************************************************
      2          *
      3          * Copyright (c) 2010 Freescale Semiconductor;
      4          * All Rights Reserved
      5          *
      6          ***************************************************************************
      7          *
      8          * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR
      9          * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     10          * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     11          * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     12          * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     13          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     14          * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     15          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     16          * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
     17          * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
     18          * THE POSSIBILITY OF SUCH DAMAGE.
     19          *
     20          **************************************************************************
     21          *
     22          * $FileName: mem_zero.c$
     23          * $Version : 3.6.3.0$
     24          * $Date    : Oct-18-2010$
     25          *
     26          * Comments:
     27          *
     28          *   This file contains the functions for zeroing memory
     29          *
     30          *END************************************************************************/
     31          
     32          #include "mqx_inc.h"
     33          
     34          
     35          /*FUNCTION*-------------------------------------------------------------------
     36          *
     37          * Function Name    : _mem_zero
     38          * Returned Value   : none
     39          * Comments         :
     40          *   This function zeros the specified number of bytes at the specified
     41          * location.
     42          *   The zeroing is optimized to avoid alignment problems, and attempts
     43          * to zero 32bit numbers optimally
     44          *
     45          *END*----------------------------------------------------------------------*/
     46          
     47          
     48          void _mem_zero
     49             (
     50                /* [IN] the address to start zeroing memory from */
     51                register pointer from_ptr,
     52          
     53                /* [IN] the number of bytes to zero */
     54                register _mem_size number_of_bytes
     55             )
     56          { /* Body */
     57          #if MQX_USE_SMALL_MEM_ZERO
     58             register uint_8_ptr from8_ptr = (uint_8_ptr) from_ptr;
     59          
     60             if (number_of_bytes) {
     61                while (number_of_bytes--) {
     62                   *from8_ptr++ = 0;
     63                } /* Endwhile */
     64             } /* Endif */
     65          #else
     66             uint_8_ptr from8_ptr = (uint_8_ptr) from_ptr;
     67             uint_16_ptr from16_ptr = (uint_16_ptr) from_ptr;
     68             register uint_32_ptr from32_ptr = (uint_32_ptr) from_ptr;
     69             register uint_32 loops;
     70          
     71             if (number_of_bytes > 3) {
     72          
     73                /* Try to align source on word */
     74                if ((uint_32)from_ptr & 1) {
     75                   from8_ptr = (uint_8_ptr) from_ptr;
     76                   *from8_ptr++ = 0;
     77          
     78                   from_ptr = from8_ptr;
     79                   --number_of_bytes;
     80                } /* Endif */
     81          
     82                /* Try to align source on longword */
     83                if ((uint_32)from_ptr & 2) {
     84                   from16_ptr = (uint_16_ptr) from_ptr;
     85          
     86                   *from16_ptr++ = 0;
     87          
     88                   from_ptr = from16_ptr;
     89                   number_of_bytes -= 2;
     90                } /* Endif */
     91          
     92                from32_ptr = (uint_32_ptr) from_ptr;
     93          #if MQX_USE_BLOCK_MEM_ZERO
     94                /*
     95                ** so lets copy longwords...
     96                ** to increase performance, we will do 64 bytes (16 * longwords) at once and after that jumping
     97                ** This consumes more RAM, more flash, but gets less instruction cycles.
     98                */
     99                for (loops = number_of_bytes >> 6; loops != 0; loops--) {
    100                   /* copy 16 longwords */
    101                   *from32_ptr++ = 0;
    102                   *from32_ptr++ = 0;
    103                   *from32_ptr++ = 0;
    104                   *from32_ptr++ = 0;
    105                   *from32_ptr++ = 0;
    106                   *from32_ptr++ = 0;
    107                   *from32_ptr++ = 0;
    108                   *from32_ptr++ = 0;
    109                   *from32_ptr++ = 0;
    110                   *from32_ptr++ = 0;
    111                   *from32_ptr++ = 0;
    112                   *from32_ptr++ = 0;
    113                   *from32_ptr++ = 0;
    114                   *from32_ptr++ = 0;
    115                   *from32_ptr++ = 0;
    116                   *from32_ptr++ = 0;
    117                } /* Endwhile */
    118          
    119                /* Now, write the rest of bytes */
    120                switch ((number_of_bytes >> 2) & 0xF) {
    121                   case 15: *from32_ptr++ = 0;
    122                   case 14: *from32_ptr++ = 0;
    123                   case 13: *from32_ptr++ = 0;
    124                   case 12: *from32_ptr++ = 0;
    125                   case 11: *from32_ptr++ = 0;
    126                   case 10: *from32_ptr++ = 0;
    127                   case 9:  *from32_ptr++ = 0;
    128                   case 8:  *from32_ptr++ = 0;
    129                   case 7:  *from32_ptr++ = 0;
    130                   case 6:  *from32_ptr++ = 0;
    131                   case 5:  *from32_ptr++ = 0;
    132                   case 4:  *from32_ptr++ = 0;
    133                   case 3:  *from32_ptr++ = 0;
    134                   case 2:  *from32_ptr++ = 0;
    135                   case 1:  *from32_ptr++ = 0;
    136                } /* Endswitch */
    137          
    138          #else /* MQX_USE_BLOCK_MEM_ZERO */
    139                for (loops = number_of_bytes >> 2; loops != 0; loops--) {
    140                   *from32_ptr++ = 0;
    141                }
    142          #endif /* MQX_USE_BLOCK_MEM_ZERO */
    143                from_ptr = from32_ptr;
    144             } /* Endif */
    145          
    146             /* Copy all remaining bytes */
    147             if (number_of_bytes & 2) {
    148                from16_ptr = (uint_16_ptr) from_ptr;
    149          
    150                *from16_ptr++ = 0;
    151          
    152                from_ptr = from16_ptr;
    153             } /* Endif */
    154             if (number_of_bytes & 1) {
    155                * (uint_8_ptr) from_ptr = 0;
    156             } /* Endif */
    157          #endif
    158          } /* Endbody */
    159          
    160          /* EOF */
    161          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      20   _mem_zero


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     308  _mem_zero

 
 308 bytes in section .text
 
 308 bytes of CODE memory

Errors: none
Warnings: none
