###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         14/May/2020  16:51:02
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\stack_bu.c
#    Command line      =
#        -f C:\Users\81901\AppData\Local\Temp\EW623F.tmp
#        (C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\stack_bu.c
#        --preprocess=s
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List" -lcN
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List" -o
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\Sources\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\include\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\config\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\compiler\iar\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Generated_Code\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\PExSupport\Kinetis\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\OSAbstraction\MQXLite\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Common\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\Lists\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\FunctionLib\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\SecLib\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\FSCI\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\FSCI\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Panic\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\SerialManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\MemManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\TimersManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\TimersManager\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Messaging\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\ieee_802_15_4\Phy\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\ieee_802_15_4\SMAC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\ADC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\BME\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\Flash\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\I2C\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LED\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LLWU\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LPTMR\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\SMC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\MCG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\Reset\
#        -On)
#    Locale            =  C
#    List file         =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List\stack_bu.lst
#    Object file       =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\Obj\stack_bu.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\stack_bu.c
      1          /**HEADER********************************************************************
      2          *
      3          * Copyright (c) 2010 Freescale Semiconductor
      4          * All Rights Reserved
      5          *
      6          ***************************************************************************
      7          *
      8          * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR
      9          * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     10          * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     11          * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     12          * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     13          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     14          * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     15          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     16          * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
     17          * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
     18          * THE POSSIBILITY OF SUCH DAMAGE.
     19          *
     20          **************************************************************************
     21          *
     22          * $FileName: stack_bu.c$
     23          * $Version : 3.8.11.0$
     24          * $Date    : Dec-20-2011$
     25          *
     26          * Comments:
     27          *   This file contains the functions for manipulating the user
     28          *	context on the stack.
     29          *
     30          *END************************************************************************/
     31          
     32          #include "mqx_inc.h"
     33          
     34          /*FUNCTION*-------------------------------------------------------------------
     35          *
     36          * Function Name    : _psp_build_stack_frame
     37          * Returned Value   : none
     38          * Comments         :
     39          *
     40          *   This function sets up the stack frame of a new task descriptor.
     41          *
     42          *END*----------------------------------------------------------------------*/
     43          
     44          boolean _psp_build_stack_frame
     45             (
     46                /* [IN] the address of the task descriptor */
     47                TD_STRUCT_PTR    td_ptr,
     48          
     49                /* [IN] the address of the stack memory block */
     50                pointer          stack_ptr,
     51          
     52                /* [IN] the size of the stack */
     53                _mem_size        stack_size,
     54          
     55                /* [IN] the task's template */
     56                TASK_TEMPLATE_STRUCT_PTR template_ptr,
     57          
     58                /* [IN] the status register to use in creating the task */
     59                _mqx_uint        status_register,
     60          
     61                /* [IN] the task creation parameter */
     62                uint_32          create_parameter
     63             )
     64          {
     65             uchar_ptr stack_base_ptr;
     66             PSP_STACK_START_STRUCT_PTR stack_start_ptr;
     67             boolean res = TRUE;
     68          
     69             stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
     70             stack_start_ptr = (PSP_STACK_START_STRUCT_PTR)(stack_base_ptr - sizeof(PSP_STACK_START_STRUCT));
     71          
     72             td_ptr->STACK_BASE  = (pointer)stack_base_ptr;
     73             td_ptr->STACK_LIMIT = _GET_STACK_LIMIT(stack_ptr, stack_size);
     74             td_ptr->STACK_PTR   = stack_start_ptr;
     75          
     76             /*
     77             ** Build the task's initial stack frame. This contains the initialized
     78             ** registers, and an exception frame which will cause the task to
     79             ** "return" to the start of the task when it is dispatched.
     80             */
     81             _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
     82             stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
     83             stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
     84             stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
     85             stack_start_ptr->INITIAL_CONTEXT.PSR = 0x01000000;
     86             stack_start_ptr->PARAMETER = create_parameter;
     87          #if PSP_MQX_CPU_IS_ARM_CORTEX_M4
     88             stack_start_ptr->INITIAL_CONTEXT.PENDSVPRIOR = 0;
     89             stack_start_ptr->INITIAL_CONTEXT.BASEPRI     = status_register;
     90             stack_start_ptr->INITIAL_CONTEXT.LR2         = 0xfffffffd;
     91          #endif
     92          
     93          
     94          #if MQXCFG_ENABLE_FP && PSP_HAS_FPU
     95             if (td_ptr->FLAGS & MQX_FLOATING_POINT_TASK) {
     96                res = _psp_build_float_context(td_ptr);
     97             }
     98          #endif /* MQXCFG_ENABLE_FP && PSP_HAS_FPU */
     99          
    100             return res;
    101          }
    102          
    103          #if MQXCFG_ENABLE_FP && PSP_HAS_FPU
    104          /*FUNCTION*-------------------------------------------------------------------
    105          *
    106          * Function Name    : _psp_build_float_context
    107          * Returned Value   : none
    108          * Comments         :
    109          *   This function sets up the FLOATING POINT context of a
    110          *   new task descriptor.
    111          *
    112          *END*----------------------------------------------------------------------*/
    113          boolean _psp_build_float_context
    114             (
    115                /* [IN] the address of the task descriptor */
    116                TD_STRUCT_PTR    td_ptr
    117             )
    118          {
    119              PSP_BLOCKED_FP_STRUCT_PTR fp_ptr;
    120          
    121              /* Allocate space for saving/restoring the DSP registers */
    122              fp_ptr = (PSP_BLOCKED_FP_STRUCT_PTR)_mem_alloc_zero((_mem_size)sizeof(PSP_BLOCKED_FP_STRUCT));
    123          
    124          #if MQX_CHECK_MEMORY_ALLOCATION_ERRORS
    125              if (!fp_ptr) {
    126                  /* Couldn't allocate memory for the DSP register context */
    127                  _task_set_error_td_internal(td_ptr, MQX_OUT_OF_MEMORY);
    128                  return FALSE;
    129              }
    130          #endif
    131          
    132              _mem_set_type(fp_ptr, MEM_TYPE_FP_CONTEXT);
    133              /*
    134              ** Transfer the block to the task being created. This will ensure the
    135              ** float context will be freed if the task is destroyed.
    136              */
    137              _mem_transfer_internal((pointer)fp_ptr, td_ptr);
    138          
    139              /* This field should never be overwitten */
    140              fp_ptr->TID = td_ptr->TASK_ID;
    141          
    142              td_ptr->FLOAT_CONTEXT_PTR = (pointer)fp_ptr;
    143          
    144              return TRUE;
    145          }
    146          #endif /* MQXCFG_ENABLE_FP && PSP_HAS_FPU */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   _psp_build_stack_frame
        40   -> _mem_zero


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      92  _psp_build_stack_frame

 
 92 bytes in section .text
 
 92 bytes of CODE memory

Errors: none
Warnings: none
