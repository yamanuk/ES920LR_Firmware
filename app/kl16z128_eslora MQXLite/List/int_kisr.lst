###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         14/May/2020  16:50:59
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\int_kisr.c
#    Command line      =
#        -f C:\Users\81901\AppData\Local\Temp\EW5406.tmp
#        (C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\int_kisr.c
#        --preprocess=s
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List" -lcN
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List" -o
#        "C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\Sources\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\include\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\config\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\MQXLITE\psp\cortex_m\compiler\iar\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Generated_Code\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\PExSupport\Kinetis\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\OSAbstraction\MQXLite\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Common\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\Lists\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\FunctionLib\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Utils\SecLib\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\FSCI\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\FSCI\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Panic\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\SerialManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\MemManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\TimersManager\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\TimersManager\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\Messaging\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\framework\RNG\Source\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\ieee_802_15_4\Phy\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\ieee_802_15_4\SMAC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\ADC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\BME\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\Flash\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\I2C\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LED\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LLWU\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\LPTMR\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\SMC\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\MCG\Interface\
#        -I
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\..\drv\Portable\Reset\
#        -On)
#    Locale            =  C
#    List file         =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\List\int_kisr.lst
#    Object file       =
#        C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\app\kl16z128_eslora
#        MQXLite\Obj\int_kisr.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\81901\Desktop\job\es920lr\SDK\src\Application\KL16_SMAC_MQXLite\MQXLITE\psp\cortex_m\int_kisr.c
      1          /*HEADER*********************************************************************
      2          *
      3          * Copyright (c) 2010 Freescale Semiconductor;
      4          * All Rights Reserved
      5          *
      6          ***************************************************************************
      7          *
      8          * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR
      9          * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     10          * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     11          * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     12          * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     13          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     14          * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     15          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     16          * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
     17          * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
     18          * THE POSSIBILITY OF SUCH DAMAGE.
     19          *
     20          **************************************************************************
     21          *
     22          * $FileName: int_kisr.c$
     23          * $Version : 3.7.4.0$
     24          * $Date    : Feb-7-2011$
     25          *
     26          * Comments:
     27          *
     28          *   This file contains the function for installing a kernel level isr.
     29          *
     30          *END************************************************************************/
     31          
     32          #include "mqx_inc.h"
     33          
     34          /*!
     35           * \brief Installs the kernel ISR handler. The kernel ISR depends on the PSP.
     36           *
     37           * Some real-time applications need special event handling to occur outside the
     38           * scope of MQX. The need might arise that the latency in servicing an interrupt
     39           * be less than the MQX interrupt latency. If this is the case, an application can
     40           * use _int_install_kernel_isr() to bypass MQX and let the interrupt be serviced
     41           * immediately.
     42           * \n Because the function returns the previous kernel ISR, applications can
     43           * temporarily install an ISR or chain ISRs so that each new one calls the one
     44           * installed before it.
     45           * \n A kernel ISR must save the registers that it needs and must service the
     46           * hardware interrupt. When the kernel ISR is finished, it must restore the
     47           * registers and perform a return-from-interrupt instruction.
     48           * \n A kernel ISR cannot call MQX functions. However, it can put data in global
     49           * data, which a task can access.
     50           *
     51           * \n NOTE
     52           * \n The function is not available for all PSPs.
     53           *
     54           * \param[in] vector  Vector where the ISR is to be installed.
     55           * \param[in] isr_ptr Pointer to the ISR to install into the vector table.
     56           *
     57           * \return Pointer to the previous kernel ISR for the vector (Success.).
     58           * \return NULL
     59           *
     60           * \see _int_kernel_isr
     61           * \see _int_get_kernel_isr
     62           */
     63          INT_KERNEL_ISR_FPTR _int_install_kernel_isr
     64          (
     65              uint_32             vector,
     66              INT_KERNEL_ISR_FPTR isr_ptr
     67          )
     68          {
     69          #if !MQX_ROM_VECTORS
     70          
     71          #if MQX_KERNEL_LOGGING
     72             KERNEL_DATA_STRUCT_PTR kernel_data;
     73          #endif
     74             INT_KERNEL_ISR_FPTR    old_isr_ptr;
     75             uint_32                result_code;
     76             uint_32_ptr            loc_ptr;
     77          
     78          #if MQX_KERNEL_LOGGING
     79             _GET_KERNEL_DATA(kernel_data);
     80          #endif
     81          
     82             _KLOGE3(KLOG_int_install_kernel_isr, vector, isr_ptr);
     83          
     84          #if MQX_CHECK_ERRORS
     85             result_code = MQX_OK;
     86             old_isr_ptr = NULL;
     87          
     88             if ( vector >= PSP_MAXIMUM_INTERRUPT_VECTORS ) {
     89                result_code = MQX_INVALID_VECTORED_INTERRUPT;
     90             } else {
     91          #endif
     92          
     93             loc_ptr = (uint_32_ptr)_int_get_vector_table();
     94             old_isr_ptr = (INT_KERNEL_ISR_FPTR)loc_ptr[vector];
     95             loc_ptr[vector] = (uint_32)isr_ptr;
     96          
     97          #if MQX_CHECK_ERRORS
     98             } /* Endif */
     99          
    100             /* Set result code and return result. */
    101             _task_set_error(result_code);
    102          #endif
    103          
    104             _KLOGX3(KLOG_int_install_kernel_isr, old_isr_ptr, result_code);
    105             return (old_isr_ptr);
    106          #else
    107          
    108          #if MQX_CHECK_ERRORS
    109             /* Set result code and return result. */
    110             _task_set_error(MQX_INVALID_CONFIGURATION);
    111          #endif
    112          
    113             return NULL;
    114          #endif
    115          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   _int_install_kernel_isr
        16   -> _task_set_error


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  _int_install_kernel_isr

 
 16 bytes in section .text
 
 16 bytes of CODE memory

Errors: none
Warnings: none
