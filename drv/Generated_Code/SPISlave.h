/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : SPISlave.h
**     Project     : ProcessorExpert
**     Processor   : MKL26Z128VLL4
**     Component   : SPISlave_LDD
**     Version     : Component 01.047, Driver 01.02, CPU db: 3.00.000
**     Compiler    : IAR ARM C Compiler
**     Date/Time   : 2014-10-10, 12:09, # CodeGen: 152
**     Abstract    :
**         This component "SPISlave_LDD" implements SLAVE part of synchronous
**         serial master-slave communication.
**     Settings    :
**          Component name                                 : SPISlave
**          Device                                         : SPI0
**          Interrupt service/event                        : Enabled
**            Input interrupt                              : INT_SPI0
**            Input interrupt priority                     : medium priority
**            Output interrupt                             : INT_SPI0
**            Output interrupt priority                    : medium priority
**          Settings                                       :
**            Input pin                                    : Enabled
**              Pin                                        : CMP0_IN0/PTC6/LLWU_P10/SPI0_MOSI/EXTRG_IN/I2S0_RX_BCLK/SPI0_MISO/I2S0_MCLK
**              Pin signal                                 :
**            Output pin                                   : Enabled
**              Pin                                        : CMP0_IN1/PTC7/SPI0_MISO/audioUSB_SOF_OUT/I2S0_RX_FS/SPI0_MOSI
**              Pin signal                                 :
**            Clock pin                                    :
**              Pin                                        : PTC5/LLWU_P9/SPI0_SCK/LPTMR0_ALT2/I2S0_RXD0/CMP0_OUT
**              Pin signal                                 :
**            Slave select                                 :
**              Pin                                        : PTC4/LLWU_P8/SPI0_PCS0/UART1_TX/TPM0_CH3/I2S0_MCLK
**              Pin signal                                 :
**              Active level                               : Low
**            Attribute set                                :
**              Width                                      : 8 bits
**              MSB first                                  : yes
**              Clock polarity                             : High
**              Clock phase                                : Capture on leading edge
**              Parity                                     : None
**            HW input buffer size                         : 1
**            HW input watermark                           : 1
**            Receiver DMA                                 : Disabled
**            HW output buffer size                        : 1
**            HW output watermark                          : 1
**            Transmitter DMA                              : Disabled
**          Initialization                                 :
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Event mask                                   :
**              OnBlockSent                                : Enabled
**              OnBlockReceived                            : Enabled
**              OnError                                    : Disabled
**     Contents    :
**         Init                    - LDD_TDeviceData* SPISlave_Init(LDD_TUserData *UserDataPtr);
**         SendBlock               - LDD_TError SPISlave_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData...
**         ReceiveBlock            - LDD_TError SPISlave_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData...
**         CancelBlockTransmission - LDD_TError SPISlave_CancelBlockTransmission(LDD_TDeviceData *DeviceDataPtr);
**         ConnectPin              - LDD_TError SPISlave_ConnectPin(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask...
**
**     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file SPISlave.h
** @version 01.02
** @brief
**         This component "SPISlave_LDD" implements SLAVE part of synchronous
**         serial master-slave communication.
*/
/*!
**  @addtogroup SPISlave_module SPISlave module documentation
**  @{
*/

#ifndef __SPISlave_H
#define __SPISlave_H

/* MODULE SPISlave. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "Cpu.h"
#include "SPI_PDD.h"

#ifdef __cplusplus
extern "C" {
#endif


/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define SPISlave_PRPH_BASE_ADDRESS  0x40076000U

/* Methods configuration constants - generated for all enabled component's methods */
#define SPISlave_Init_METHOD_ENABLED   /*!< Init method of the component SPISlave is enabled (generated) */
#define SPISlave_SendBlock_METHOD_ENABLED /*!< SendBlock method of the component SPISlave is enabled (generated) */
#define SPISlave_ReceiveBlock_METHOD_ENABLED /*!< ReceiveBlock method of the component SPISlave is enabled (generated) */
#define SPISlave_CancelBlockTransmission_METHOD_ENABLED /*!< CancelBlockTransmission method of the component SPISlave is enabled (generated) */
#define SPISlave_ConnectPin_METHOD_ENABLED /*!< ConnectPin method of the component SPISlave is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define SPISlave_OnBlockSent_EVENT_ENABLED /*!< OnBlockSent event of the component SPISlave is enabled (generated) */
#define SPISlave_OnBlockReceived_EVENT_ENABLED /*!< OnBlockReceived event of the component SPISlave is enabled (generated) */


/*
** ===================================================================
**     Method      :  SPISlave_Init (component SPISlave_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc.
**         If the "Enable in init. code" is set to "yes" value then the
**         device is also enabled(see the description of the Enable()
**         method). In this case the Enable() method is not necessary
**         and needn't to be generated.
**         This method can be called only once. Before the second call
**         of Init() the Deinit() must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* SPISlave_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  SPISlave_ReceiveBlock (component SPISlave_LDD)
*/
/*!
**     @brief
**         This method specifies the number of data to receive. The
**         method returns ERR_BUSY until the specified number of
**         characters is received. The method <CancelBlockReception>
**         can be used to cancel a running receive operation.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         BufferPtr       - Pointer to A buffer where
**                           received characters will be stored.
**     @param
**         Size            - Size of the block
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - The previous receive request is
**                           pending
*/
/* ===================================================================*/
LDD_TError SPISlave_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size);

/*
** ===================================================================
**     Method      :  SPISlave_SendBlock (component SPISlave_LDD)
*/
/*!
**     @brief
**         This method sends a block of characters. The method returns
**         ERR_BUSY when the previous block transmission is not
**         completed. The method <CancelBlockTransmission> can be used
**         to cancel a transmit operation.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         BufferPtr       - Pointer to the block of data
**                           to send.
**     @param
**         Size            - Number of characters in the buffer.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - The previous transmit request is
**                           pending
*/
/* ===================================================================*/
LDD_TError SPISlave_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size);

/*
** ===================================================================
**     Method      :  SPISlave_CancelBlockTransmission (component SPISlave_LDD)
*/
/*!
**     @brief
**         Immediately cancels running transmit process. Unsent data
**         will never been sent. This method is available only if the
**         SendBlock method is enabled.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_DISABLED - Component is disabled
*/
/* ===================================================================*/
LDD_TError SPISlave_CancelBlockTransmission(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SPISlave_ConnectPin (component SPISlave_LDD)
*/
/*!
**     @brief
**         This method reconnects the requested pin associated with the
**         selected peripheral in this component. This method is only
**         available for CPU derivatives and peripherals that support
**         the runtime pin sharing with other internal on-chip
**         peripherals.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         PinMask         - Mask for the requested pins. The
**                           peripheral pins are reconnected according
**                           to this mask.
**                           Possible parameters:
**                           LDD_SPISLAVE_INPUT_PIN - Input pin
**                           LDD_SPISLAVE_OUTPUT_PIN - Output pin
**                           LDD_SPISLAVE_CLK_PIN - Clock pin
**                           LDD_SPISLAVE_SS_PIN - Chip select pin
**     @return
**                         - Error code, possible values:
**                           ERR_OK - OK
**                           ERR_PARAM_MASK - Invalid pin mask
*/
/* ===================================================================*/
LDD_TError SPISlave_ConnectPin(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask);

/*
** ===================================================================
**     Method      :  SPISlave_Interrupt (component SPISlave_LDD)
**
**     Description :
**         The ISR function handling the device receive/transmit
**         interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {MQXLite RTOS Adapter} ISR function prototype */
void SPISlave_Interrupt(LDD_RTOS_TISRParameter _isrParameter);

/* END SPISlave. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __SPISlave_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
