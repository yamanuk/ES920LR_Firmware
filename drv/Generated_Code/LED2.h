/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : LED2.h
**     Project     : ProcessorExpert
**     Processor   : MKL26Z128VLL4
**     Component   : BitIO_LDD
**     Version     : Component 01.033, Driver 01.03, CPU db: 3.00.000
**     Compiler    : IAR ARM C Compiler
**     Date/Time   : 2014-03-28, 12:04, # CodeGen: 57
**     Abstract    :
**         The HAL BitIO component provides a low level API for unified
**         access to general purpose digital input/output pins across
**         various device designs.
**
**         RTOS drivers using HAL BitIO API are simpler and more
**         portable to various microprocessors.
**     Settings    :
**          Component name                                 : LED2
**          Pin for I/O                                    : PTE17
**          Pin signal                                     :
**          Direction                                      : Output
**          Initialization                                 :
**            Init. direction                              : Output
**            Init. value                                  : 1
**            Auto initialization                          : no
**          Safe mode                                      : no
**     Contents    :
**         Init   - LDD_TDeviceData* LED2_Init(LDD_TUserData *UserDataPtr);
**         Deinit - void LED2_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         ClrVal - void LED2_ClrVal(LDD_TDeviceData *DeviceDataPtr);
**         SetVal - void LED2_SetVal(LDD_TDeviceData *DeviceDataPtr);
**         NegVal - void LED2_NegVal(LDD_TDeviceData *DeviceDataPtr);
**
**     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file LED2.h
** @version 01.03
** @brief
**         The HAL BitIO component provides a low level API for unified
**         access to general purpose digital input/output pins across
**         various device designs.
**
**         RTOS drivers using HAL BitIO API are simpler and more
**         portable to various microprocessors.
*/
/*!
**  @addtogroup LED2_module LED2 module documentation
**  @{
*/

#ifndef __LED2_H
#define __LED2_H

/* MODULE LED2. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "IO_Map.h"
#include "GPIO_PDD.h"

#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif



/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define LED2_PRPH_BASE_ADDRESS  0x400FF100U

/* Methods configuration constants - generated for all enabled component's methods */
#define LED2_Init_METHOD_ENABLED       /*!< Init method of the component LED2 is enabled (generated) */
#define LED2_Deinit_METHOD_ENABLED     /*!< Deinit method of the component LED2 is enabled (generated) */
#define LED2_ClrVal_METHOD_ENABLED     /*!< ClrVal method of the component LED2 is enabled (generated) */
#define LED2_SetVal_METHOD_ENABLED     /*!< SetVal method of the component LED2 is enabled (generated) */
#define LED2_NegVal_METHOD_ENABLED     /*!< NegVal method of the component LED2 is enabled (generated) */

/* Definition of implementation constants */
#define LED2_MODULE_BASE_ADDRESS FPTE_BASE_PTR /*!< Name of macro used as the base address */
#define LED2_PORTCONTROL_BASE_ADDRESS PORTE_BASE_PTR /*!< Name of macro used as the base address */
#define LED2_PORT_MASK 0x20000U           /*!< Mask of the allocated pin from the port */



/*
** ===================================================================
**     Method      :  LED2_Init (component BitIO_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the "Enable
**         in init. code" is set to "yes" value then the device is also
**         enabled(see the description of the Enable() method). In this
**         case the Enable() method is not necessary and needn't to be
**         generated.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* LED2_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  LED2_Deinit (component BitIO_LDD)
*/
/*!
**     @brief
**          Deinitializes the device. Switches off the device, frees
**         the device data structure memory, interrupts vectors, etc.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
*/
/* ===================================================================*/
void LED2_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  LED2_ClrVal (component BitIO_LDD)
*/
/*!
**     @brief
**         Clears (set to zero) the output value. It is equivalent to
**         the [PutVal(FALSE)]. This method is available only if the
**         direction = _[output]_ or _[input/output]_.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void LED2_ClrVal(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  LED2_SetVal (component BitIO_LDD)
*/
/*!
**     @brief
**         Sets (to one) the output value. It is equivalent to the
**         [PutVal(TRUE)]. This method is available only if the
**         direction = _[output]_ or _[input/output]_.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void LED2_SetVal(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  LED2_NegVal (component BitIO_LDD)
*/
/*!
**     @brief
**         Negates (inverts) the output value. It is equivalent to the
**         [PutVal(!GetVal())]. This method is available only if the
**         direction = _[output]_ or _[input/output]_.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void LED2_NegVal(LDD_TDeviceData *DeviceDataPtr);

/* END LED2. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __LED2_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
