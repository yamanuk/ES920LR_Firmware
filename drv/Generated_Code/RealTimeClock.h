/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : RealTimeClock.h
**     Project     : ProcessorExpert
**     Processor   : MKL26Z128VLL4
**     Component   : RTC_LDD
**     Version     : Component 01.163, Driver 01.06, CPU db: 3.00.000
**     Compiler    : IAR ARM C Compiler
**     Date/Time   : 2014-10-10, 12:09, # CodeGen: 152
**     Abstract    :
**         This component implements a real time clock (RTC). Actual date may also be
**         obtained and an alarm function is included.
**     Settings    :
**          Component name                                 : RealTimeClock
**          Device                                         : RTC
**          Input clock frequency [s]                      : 1 sec
**          Clock source                                   : ERCLK32K
**            Clock frequency [kHz]                        : 32.768 kHz 32.768 kHz
**          Interrupt service/event                        : Enabled
**            Interrupt                                    : INT_RTC
**            Interrupt priority                           : medium priority
**            Interrupt                                    : INT_RTC_Seconds
**            Interrupt priority                           : medium priority
**          Min year                                       : 2000
**          Max year                                       : 2099
**          Initialization                                 :
**            Auto Initialization                          : no
**            Event mask                                   :
**              OnAlarm                                    : Enabled
**              OnSecond                                   : Disabled
**              OnTimeOverflow                             : Disabled
**              OnTimeInvalid                              : Disabled
**            Time and date settings                       :
**              Time                                       : 12:00:01 am
**              Date                                       : 2000-01-01
**            Alarm settings                               : Enabled
**              Alarm time                                 : 12:00:00 am
**              Alarm date                                 : 2000-01-01
**            Compensation settings                        :
**              Compensation period [s]                    : 0
**              Compensation value [clock cycles]          : 0
**     Contents    :
**         Init    - LDD_TDeviceData * RealTimeClock_Init(LDD_TUserData *UserDataPtr, bool SoftInit);
**         Enable  - LDD_TError RealTimeClock_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable - LDD_TError RealTimeClock_Disable(LDD_TDeviceData *DeviceDataPtr);
**         GetTime - void RealTimeClock_GetTime(LDD_TDeviceData *DeviceDataPtr, LDD_RTC_TTime...
**         SetTime - LDD_TError RealTimeClock_SetTime(LDD_TDeviceData *DeviceDataPtr,...
**
**     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file RealTimeClock.h
** @version 01.06
** @brief
**         This component implements a real time clock (RTC). Actual date may also be
**         obtained and an alarm function is included.
*/
/*!
**  @addtogroup RealTimeClock_module RealTimeClock module documentation
**  @{
*/

#ifndef __RealTimeClock_H
#define __RealTimeClock_H

/* MODULE RealTimeClock. */

#include "Cpu.h"


#ifdef __cplusplus
extern "C" {
#endif

/* Driver mode */
#define RealTimeClock_INTERRUPT_MODE

/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define RealTimeClock_PRPH_BASE_ADDRESS  0x4003D000U

/* Methods configuration constants - generated for all enabled component's methods */
#define RealTimeClock_Init_METHOD_ENABLED /*!< Init method of the component RealTimeClock is enabled (generated) */
#define RealTimeClock_Enable_METHOD_ENABLED /*!< Enable method of the component RealTimeClock is enabled (generated) */
#define RealTimeClock_Disable_METHOD_ENABLED /*!< Disable method of the component RealTimeClock is enabled (generated) */
#define RealTimeClock_GetTime_METHOD_ENABLED /*!< GetTime method of the component RealTimeClock is enabled (generated) */
#define RealTimeClock_SetTime_METHOD_ENABLED /*!< SetTime method of the component RealTimeClock is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define RealTimeClock_OnAlarm_EVENT_ENABLED /*!< OnAlarm event of the component RealTimeClock is enabled (generated) */

/*
** ===================================================================
**     Method      :  RealTimeClock_Init (component RTC_LDD)
*/
/*!
**     @brief
**         Initializes the device. There are two modes of
**         initialization.
**         1) RTC device is NOT battery backed up. (SoftInit = FALSE)
**         All registers (interrupts, counters, clock routing …) that
**         influence RTC behavior are initialized.
**         Note: This initialization mode doesn't preserve time and
**         date settings.
**         2) RTC device IS battery backed up.
**         (SoftInit = TRUE). Only registers that are not backed up are
**         initialized (Interrupt priority …). RTC device is running,
**         time and date a preserved, RTC interrupts (events) are
**         preserved too.
**         Allocates memory for the device data structure.
**         This method can be called only once. Before the second call
**         of Init() the Deinit() must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @param
**         SoftInit        - If set to "[true]" only
**                           registers that are not battery backup are
**                           initialized (E.g. Interrupt priority in
**                           interrupt controller … )
**                           If set to "[false]" all registers are
**                           initialized.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData * RealTimeClock_Init(LDD_TUserData *UserDataPtr, bool SoftInit);

/*
** ===================================================================
**     Method      :  RealTimeClock_Enable (component RTC_LDD)
*/
/*!
**     @brief
**         Enables the real-time clock module (Typically sets the
**         module enable bit). All other HW settings are preserved. RTC
**         module can be disabled by the [Disable] method and
**         reinitialized by the [Init] method.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
*/
/* ===================================================================*/
LDD_TError RealTimeClock_Enable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  RealTimeClock_Disable (component RTC_LDD)
*/
/*!
**     @brief
**         Disables the real-time clock module. All other HW settings
**         are preserved. RTC module can be enabled by [Enable] method.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
*/
/* ===================================================================*/
LDD_TError RealTimeClock_Disable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  RealTimeClock_GetTime (component RTC_LDD)
*/
/*!
**     @brief
**         Returns actual time and date.
**         Note: Fields not supported by HW are calculated in software.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure pointer returned by [Init] method.
**     @param
**         TimePtr         - Pointer to the time structure to
**                           fill with current time.
*/
/* ===================================================================*/
void RealTimeClock_GetTime(LDD_TDeviceData *DeviceDataPtr, LDD_RTC_TTime *TimePtr);

/*
** ===================================================================
**     Method      :  RealTimeClock_SetTime (component RTC_LDD)
*/
/*!
**     @brief
**         Sets new time and date.
**         Note: All LDD_RTC_TTime structure members must be correctly
**         filled in.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure pointer returned by [Init] method.
**     @param
**         TimePtr         - Pointer to the time structure with
**                           new time to set.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_DISABLED - Component is disabled.
**                           - ERR_SPEED - Component does not work in
**                           the active clock configuration.
**                           - ERR_RANGE - Parameter out of range.
*/
/* ===================================================================*/
LDD_TError RealTimeClock_SetTime(LDD_TDeviceData *DeviceDataPtr, LDD_RTC_TTime *TimePtr);

/*
** ===================================================================
**     Method      :  RealTimeClock_Interrupt (component RTC_LDD)
**
**     Description :
**         RTC interrupt handler
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {MQXLite RTOS Adapter} ISR function prototype */
void RealTimeClock_Interrupt(LDD_RTOS_TISRParameter _isrParameter);

/*
** ===================================================================
**     Method      :  RealTimeClock_SetClockConfiguration (component RTC_LDD)
**
**     Description :
**         This method changes the clock configuration. During a clock
**         configuration change the component changes it's setting
**         immediately upon a request.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void RealTimeClock_SetClockConfiguration(LDD_TDeviceData *DeviceDataPtr, LDD_TClockConfiguration ClockConfiguration);

/* END RealTimeClock. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __RealTimeClock_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
