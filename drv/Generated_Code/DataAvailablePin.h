/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : DataAvailablePin.h
**     Project     : ProcessorExpert
**     Processor   : MKL26Z128VLL4
**     Component   : GPIO_LDD
**     Version     : Component 01.128, Driver 01.08, CPU db: 3.00.000
**     Compiler    : IAR ARM C Compiler
**     Date/Time   : 2014-10-10, 12:09, # CodeGen: 152
**     Abstract    :
**         The HAL GPIO component will provide a low level API for unified
**         access to general purpose digital input/output pins across
**         various device designs.
**
**         RTOS drivers using HAL GPIO API will be simpler and more
**         portable to various microprocessors.
**     Settings    :
**          Component name                                 : DataAvailablePin
**          Port                                           : PTD
**          Port width                                     : 32 bits
**          Mask of allocated pins                         : 2
**          Interrupt service/event                        : Enabled
**            Interrupt                                    : INT_PORTC_PORTD
**            Interrupt priority                           : medium priority
**          Bit fields                                     : 1
**            Bit field                                    :
**              Field name                                 : DAP
**              Pins                                       : 1
**                Pin                                      :
**                  Pin                                    : ADC0_SE5b/PTD1/SPI0_SCK/TPM0_CH1
**                  Pin signal                             :
**                  Initial pin direction                  : Input
**                  Initial pin event                      : Disabled
**          Initialization                                 :
**            Auto initialization                          : no
**            Event mask                                   :
**              OnPortEvent                                : Enabled
**     Contents    :
**         Init                   - LDD_TDeviceData* DataAvailablePin_Init(LDD_TUserData *UserDataPtr);
**         SetPortEventCondition  - LDD_TError DataAvailablePin_SetPortEventCondition(LDD_TDeviceData...
**         SetPortInputDirection  - void DataAvailablePin_SetPortInputDirection(LDD_TDeviceData *DeviceDataPtr,...
**         SetPortOutputDirection - void DataAvailablePin_SetPortOutputDirection(LDD_TDeviceData *DeviceDataPtr,...
**         GetFieldValue          - DataAvailablePin_TFieldValue DataAvailablePin_GetFieldValue(LDD_TDeviceData...
**         ClearFieldBits         - void DataAvailablePin_ClearFieldBits(LDD_TDeviceData *DeviceDataPtr,...
**         SetFieldBits           - void DataAvailablePin_SetFieldBits(LDD_TDeviceData *DeviceDataPtr,...
**
**     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file DataAvailablePin.h
** @version 01.08
** @brief
**         The HAL GPIO component will provide a low level API for unified
**         access to general purpose digital input/output pins across
**         various device designs.
**
**         RTOS drivers using HAL GPIO API will be simpler and more
**         portable to various microprocessors.
*/
/*!
**  @addtogroup DataAvailablePin_module DataAvailablePin module documentation
**  @{
*/

#ifndef __DataAvailablePin_H
#define __DataAvailablePin_H

/* MODULE DataAvailablePin. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "IO_Map.h"
#include "GPIO_PDD.h"
#include "PORT_PDD.h"

#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif


/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define DataAvailablePin_PRPH_BASE_ADDRESS  0x400FF0C0U

/* Methods configuration constants - generated for all enabled component's methods */
#define DataAvailablePin_Init_METHOD_ENABLED /*!< Init method of the component DataAvailablePin is enabled (generated) */
#define DataAvailablePin_SetPortEventCondition_METHOD_ENABLED /*!< SetPortEventCondition method of the component DataAvailablePin is enabled (generated) */
#define DataAvailablePin_SetPortInputDirection_METHOD_ENABLED /*!< SetPortInputDirection method of the component DataAvailablePin is enabled (generated) */
#define DataAvailablePin_SetPortOutputDirection_METHOD_ENABLED /*!< SetPortOutputDirection method of the component DataAvailablePin is enabled (generated) */
#define DataAvailablePin_GetFieldValue_METHOD_ENABLED /*!< GetFieldValue method of the component DataAvailablePin is enabled (generated) */
#define DataAvailablePin_ClearFieldBits_METHOD_ENABLED /*!< ClearFieldBits method of the component DataAvailablePin is enabled (generated) */
#define DataAvailablePin_SetFieldBits_METHOD_ENABLED /*!< SetFieldBits method of the component DataAvailablePin is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define DataAvailablePin_OnPortEvent_EVENT_ENABLED /*!< OnPortEvent event of the component DataAvailablePin is enabled (generated) */

/* Definition of bit field constants */
#define DAP ((LDD_GPIO_TBitField)0)

/* Definition of implementation constants */
#define DataAvailablePin_ALLOCATED_PINS_MASK 0x02U /*!< Mask of all allocated pins from the port */
#define DataAvailablePin_MODULE_BASE_ADDRESS FPTD_BASE_PTR /*!< Name of macro used as the base address */
#define DataAvailablePin_PORTCONTROL_BASE_ADDRESS PORTD_BASE_PTR /*!< Name of macro used as the base address */
#define DataAvailablePin_AVAILABLE_EVENTS_MASK LDD_GPIO_ON_PORT_EVENT /*!< Mask of all available events */
#define DataAvailablePin_FIELD_0_PIN_0 LDD_GPIO_PIN_1 /*!< Constant for the pin in the field used in the method ConnectPin */
#define DataAvailablePin_DAP_START_BIT 1u /*!< Index of the starting bit of the bit field (0 represents LSB) */
#define DataAvailablePin_DAP_MASK 0x02u /*!< Mask of the bits allocated by the bit field (within the port) */
/* Representation of unaligned data value of the port.
   Unsigned integer of proper width depending on the size of the GPIO port allocated.
   Typically the value of n-th bit represents the data for the n-th pin within the port.
   Such value is not abstracted from the physical position of the bits within the port. */
typedef uint32_t DataAvailablePin_TPortValue;

/* Representation of right-aligned data value of the bit field.
   Typically the value of n-th bit represents the data of the n-th bit within the bit field (not within the port).
   There are used only so many lowest bits, as it is denoted by the width of the bit field.
   Such value is abstracted from the physical position of the bit field pins within the port.
   Equals to the type <compId>_TPortValue. */
typedef DataAvailablePin_TPortValue DataAvailablePin_TFieldValue;



/*
** ===================================================================
**     Method      :  DataAvailablePin_Init (component GPIO_LDD)
*/
/*!
**     @brief
**         This method initializes the associated peripheral(s) and the
**         component internal variables. The method is called
**         automatically as a part of the application initialization
**         code.
**     @param
**         UserDataPtr     - Pointer to the RTOS device
**                           structure. This pointer will be passed to
**                           all events as parameter.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* DataAvailablePin_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  DataAvailablePin_SetPortEventCondition (component GPIO_LDD)
*/
/*!
**     @brief
**         This method defines condition of the [OnPortEvent] for
**         required pins of the port.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Mask            - Unaligned mask of bits to setting the
**                           event condition. Each port pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected pin, bit value 1 means
**                           selected pin. The bit 0 corresponds with
**                           the pin which has index 0 within the port,
**                           the bit 1 corresponds with the pin which
**                           has index 1 within the port, etc.
**     @param
**         Condition       - Defines conditions when event
**                           is invoked. Possible values are:
**                           LDD_GPIO_DISABLED - Event doesn't invoke.
**                           LDD_GPIO_LOW - Event when logic zero.
**                           LDD_GPIO_HIGH - Event when logic one.
**                           LDD_GPIO_RISING - Event on rising edge.
**                           LDD_GPIO_FALLING - Event on falling edge.
**                           LDD_GPIO_BOTH - Event on rising and falling
**                           edge.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_PARAM_MASK - Invalid pin mask.
**                           ERR_PARAM_CONDITION - Invalid condition.
*/
/* ===================================================================*/
LDD_TError DataAvailablePin_SetPortEventCondition(LDD_TDeviceData *DeviceDataPtr, DataAvailablePin_TPortValue Mask, LDD_GPIO_TEventCondition Condition);

/*
** ===================================================================
**     Method      :  DataAvailablePin_SetPortInputDirection (component GPIO_LDD)
*/
/*!
**     @brief
**         This method sets the specified pins of the port to the input
**         direction. Only configured pins (through all of bit fields
**         in this component) are affected.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Mask            - Mask of bits to setting the input
**                           direction. Each port pin has corresponding
**                           bit in the mask. Bit value 0 means not
**                           selected bit, bit value 1 means selected
**                           bit. The bit 0 corresponds with the pin
**                           which has index 0 within the port, the bit
**                           1 corresponds with the pin which has index
**                           1 within the port, etc. Only configured
**                           pins (through all of bit fields in this
**                           component) are affected.
*/
/* ===================================================================*/
void DataAvailablePin_SetPortInputDirection(LDD_TDeviceData *DeviceDataPtr, DataAvailablePin_TPortValue Mask);

/*
** ===================================================================
**     Method      :  DataAvailablePin_SetPortOutputDirection (component GPIO_LDD)
*/
/*!
**     @brief
**         This method sets the specified pins of the port to the
**         output direction. The specified pins of the port will be
**         driven to specified states. Only configured pins (through
**         all of bit fields in this component) are affected.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Mask            - Mask of bits to setting the output
**                           direction. Each port pin has corresponding
**                           bit in the mask. Bit value 0 means not
**                           selected bit, bit value 1 means selected
**                           bit. The bit 0 corresponds with the pin
**                           which has index 0 within the port, the bit
**                           1 corresponds with the pin which has index
**                           1 within the port, etc. Only configured
**                           pins (through all of bit fields in this
**                           component) are affected.
**     @param
**         Value           - Unaligned port data value to appear on
**                           the specified port pins after they have
**                           been switched to the output direction.
*/
/* ===================================================================*/
void DataAvailablePin_SetPortOutputDirection(LDD_TDeviceData *DeviceDataPtr, DataAvailablePin_TPortValue Mask, DataAvailablePin_TPortValue Value);

/*
** ===================================================================
**     Method      :  DataAvailablePin_GetFieldValue (component GPIO_LDD)
*/
/*!
**     @brief
**         This method returns the current input data of the specified
**         field.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Field           - Bit field to reading. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**     @return
**                         - Aligned current port input value masked for
**                           allocated pins of the field. The bit 0
**                           corresponds with the pin which has index 0
**                           within the given bit field, the bit 1
**                           corresponds with the pin which has index 1
**                           within the given bit field, etc.
*/
/* ===================================================================*/
DataAvailablePin_TFieldValue DataAvailablePin_GetFieldValue(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field);

/*
** ===================================================================
**     Method      :  DataAvailablePin_ClearFieldBits (component GPIO_LDD)
*/
/*!
**     @brief
**         This method drives the specified bits of the specified bit
**         field to the inactive level.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Field           - Bit field to write. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**     @param
**         Mask            - Aligned mask of bits to setting the
**                           inactive level. Each field pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the given
**                           bit field, the bit 1 corresponds with the
**                           pin which has index 1 within the given bit
**                           field, etc.
*/
/* ===================================================================*/
void DataAvailablePin_ClearFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, DataAvailablePin_TFieldValue Mask);

/*
** ===================================================================
**     Method      :  DataAvailablePin_SetFieldBits (component GPIO_LDD)
*/
/*!
**     @brief
**         This method drives the specified bits of the specified bit
**         field to the active level.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Field           - Bit field to write. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**     @param
**         Mask            - Aligned mask of bits to setting the
**                           active level. Each field pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the given
**                           bit field, the bit 1 corresponds with the
**                           pin which has index 1 within the given bit
**                           field, etc.
*/
/* ===================================================================*/
void DataAvailablePin_SetFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, DataAvailablePin_TFieldValue Mask);

/*
** ===================================================================
**     Method      :  DataAvailablePin_Interrupt (component GPIO_LDD)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {MQXLite RTOS Adapter} ISR function prototype */
void DataAvailablePin_Interrupt(LDD_RTOS_TISRParameter _isrParameter);

/* END DataAvailablePin. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __DataAvailablePin_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
