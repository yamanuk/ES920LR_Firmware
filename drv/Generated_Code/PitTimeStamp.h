/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : PitTimeStamp.h
**     Project     : ProcessorExpert
**     Processor   : MKL26Z128VLL4
**     Component   : TimerUnit_LDD
**     Version     : Component 01.164, Driver 01.11, CPU db: 3.00.000
**     Compiler    : IAR ARM C Compiler
**     Date/Time   : 2014-10-10, 12:09, # CodeGen: 152
**     Abstract    :
**          This TimerUnit component provides a low level API for unified hardware access across
**          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
**     Settings    :
**          Component name                                 : PitTimeStamp
**          Module name                                    : PIT
**          Counter                                        : PIT_CVAL0
**          Counter direction                              : Down
**          Counter width                                  : 32 bits
**          Value type                                     : Optimal
**          Input clock source                             : Internal
**            Counter frequency                            : Auto select
**          Counter restart                                : On-match
**            Period device                                : PIT_LDVAL0
**            Period                                       : 1 µs
**            Interrupt                                    : Enabled
**              Interrupt                                  : INT_PIT
**              Interrupt priority                         : medium priority
**          Channel list                                   : 0
**          Initialization                                 :
**            Enabled in init. code                        : no
**            Auto initialization                          : no
**            Event mask                                   :
**              OnCounterRestart                           : Enabled
**              OnChannel0                                 : Disabled
**              OnChannel1                                 : Disabled
**              OnChannel2                                 : Disabled
**              OnChannel3                                 : Disabled
**              OnChannel4                                 : Disabled
**              OnChannel5                                 : Disabled
**              OnChannel6                                 : Disabled
**              OnChannel7                                 : Disabled
**          CPU clock/configuration selection              :
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component enabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init                  - LDD_TDeviceData* PitTimeStamp_Init(LDD_TUserData *UserDataPtr);
**         Deinit                - void PitTimeStamp_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         Enable                - LDD_TError PitTimeStamp_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable               - LDD_TError PitTimeStamp_Disable(LDD_TDeviceData *DeviceDataPtr);
**         GetInputFrequencyReal - LDD_TimerUnit_Tfloat PitTimeStamp_GetInputFrequencyReal(LDD_TDeviceData...
**         GetInputFrequency     - uint32_t PitTimeStamp_GetInputFrequency(LDD_TDeviceData *DeviceDataPtr);
**         SetPeriodTicks        - LDD_TError PitTimeStamp_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr,...
**         GetPeriodTicks        - LDD_TError PitTimeStamp_GetPeriodTicks(LDD_TDeviceData *DeviceDataPtr,...
**         ResetCounter          - LDD_TError PitTimeStamp_ResetCounter(LDD_TDeviceData *DeviceDataPtr);
**
**     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file PitTimeStamp.h
** @version 01.11
** @brief
**          This TimerUnit component provides a low level API for unified hardware access across
**          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
*/
/*!
**  @addtogroup PitTimeStamp_module PitTimeStamp module documentation
**  @{
*/

#ifndef __PitTimeStamp_H
#define __PitTimeStamp_H

/* MODULE PitTimeStamp. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "PIT_PDD.h"
#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif


#ifndef __BWUserType_PitTimeStamp_TValueType
#define __BWUserType_PitTimeStamp_TValueType
  typedef uint32_t PitTimeStamp_TValueType ; /* Type for data parameters of methods */
#endif
#define PitTimeStamp_CNT_INP_FREQ_U_0 0x01400000UL /* Counter input frequency in Hz */
#define PitTimeStamp_CNT_INP_FREQ_U_0_CFG_0 0x01400000UL /* Counter input frequency in Hz for Clock configuration 0 */
#define PitTimeStamp_CNT_INP_FREQ_U_0_CFG_1 0x016E3600UL /* Counter input frequency in Hz for Clock configuration 1 */
#define PitTimeStamp_CNT_INP_FREQ_R_0 20971395.017196544F /* Counter input frequency in Hz */
#define PitTimeStamp_CNT_INP_FREQ_R_0_CFG_0 20971395.017196544F /* Counter input frequency in Hz for Clock configuration 0 */
#define PitTimeStamp_CNT_INP_FREQ_R_0_CFG_1 23999808.00153599F /* Counter input frequency in Hz for Clock configuration 1 */
#define PitTimeStamp_CNT_INP_FREQ_COUNT 0U /* Count of predefined counter input frequencies */
#define PitTimeStamp_PERIOD_TICKS 0x15UL /* Initialization value of period in 'counter ticks' */
#define PitTimeStamp_NUMBER_OF_CHANNELS 0x00U /* Count of predefined channels */
#define PitTimeStamp_COUNTER_WIDTH 0x20U /* Counter width in bits  */
#define PitTimeStamp_COUNTER_DIR DIR_DOWN /* Direction of counting */
/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define PitTimeStamp_PRPH_BASE_ADDRESS  0x40037000U

/* Methods configuration constants - generated for all enabled component's methods */
#define PitTimeStamp_Init_METHOD_ENABLED /*!< Init method of the component PitTimeStamp is enabled (generated) */
#define PitTimeStamp_Deinit_METHOD_ENABLED /*!< Deinit method of the component PitTimeStamp is enabled (generated) */
#define PitTimeStamp_Enable_METHOD_ENABLED /*!< Enable method of the component PitTimeStamp is enabled (generated) */
#define PitTimeStamp_Disable_METHOD_ENABLED /*!< Disable method of the component PitTimeStamp is enabled (generated) */
#define PitTimeStamp_GetInputFrequencyReal_METHOD_ENABLED /*!< GetInputFrequencyReal method of the component PitTimeStamp is enabled (generated) */
#define PitTimeStamp_GetInputFrequency_METHOD_ENABLED /*!< GetInputFrequency method of the component PitTimeStamp is enabled (generated) */
#define PitTimeStamp_SetPeriodTicks_METHOD_ENABLED /*!< SetPeriodTicks method of the component PitTimeStamp is enabled (generated) */
#define PitTimeStamp_GetPeriodTicks_METHOD_ENABLED /*!< GetPeriodTicks method of the component PitTimeStamp is enabled (generated) */
#define PitTimeStamp_ResetCounter_METHOD_ENABLED /*!< ResetCounter method of the component PitTimeStamp is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define PitTimeStamp_OnCounterRestart_EVENT_ENABLED /*!< OnCounterRestart event of the component PitTimeStamp is enabled (generated) */



/*
** ===================================================================
**     Method      :  PitTimeStamp_Init (component TimerUnit_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property ["Enable in init. code"] is set to "yes" value then
**         the device is also enabled (see the description of the
**         [Enable] method). In this case the [Enable] method is not
**         necessary and needn't to be generated. This method can be
**         called only once. Before the second call of Init the [Deinit]
**         must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* PitTimeStamp_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  PitTimeStamp_Deinit (component TimerUnit_LDD)
*/
/*!
**     @brief
**         Deinitializes the device. Switches off the device, frees the
**         device data structure memory, interrupts vectors, etc.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by Init method
*/
/* ===================================================================*/
void PitTimeStamp_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  PitTimeStamp_Enable (component TimerUnit_LDD)
*/
/*!
**     @brief
**         Enables the component - it starts the signal generation.
**         Events may be generated (see SetEventMask). The method is
**         not available if the counter can't be disabled/enabled by HW.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError PitTimeStamp_Enable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  PitTimeStamp_Disable (component TimerUnit_LDD)
*/
/*!
**     @brief
**         Disables the component - it stops signal generation and
**         events calling. The method is not available if the counter
**         can't be disabled/enabled by HW.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError PitTimeStamp_Disable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  PitTimeStamp_GetInputFrequencyReal (component TimerUnit_LDD)
*/
/*!
**     @brief
**         Returns current input frequency of the counter in Hz as
**         float number. This method can be used only if ["Input clock
**         source"] property is set to "internal".
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Input frequency
*/
/* ===================================================================*/
LDD_TimerUnit_Tfloat PitTimeStamp_GetInputFrequencyReal(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  PitTimeStamp_GetInputFrequency (component TimerUnit_LDD)
*/
/*!
**     @brief
**         Returns current input frequency of the counter in Hz as
**         32-bit unsigned integer number. This method can be used only
**         if ["Input clock source"] property is set to "internal".
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Input frequency
*/
/* ===================================================================*/
uint32_t PitTimeStamp_GetInputFrequency(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  PitTimeStamp_SetPeriodTicks (component TimerUnit_LDD)
*/
/*!
**     @brief
**         The method sets timer re-initialization period (in timer
**         ticks). This method is available only if the property
**         ["Counter restart"] is switched to 'on-match' value.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Ticks           - Number of counter ticks before counter
**                           re-initialization. Value 0 means maximal
**                           period value the same as "free-running
**                           mode", e.g. counter overflow or underflow
**                           without any explicit re-initialization.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_PARAM_TICKS - Ticks parameter is out of
**                           possible range.
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError PitTimeStamp_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, PitTimeStamp_TValueType Ticks);

/*
** ===================================================================
**     Method      :  PitTimeStamp_GetPeriodTicks (component TimerUnit_LDD)
*/
/*!
**     @brief
**         Returns the number of counter ticks before re-initialization.
**         See also method [SetPeriodTicks]. This method is available
**         only if the property ["Counter restart"] is switched to
**         'on-match' value.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         TicksPtr        - Pointer to return value of the
**                           number of counter ticks before
**                           re-initialization
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError PitTimeStamp_GetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, PitTimeStamp_TValueType *TicksPtr);

/*
** ===================================================================
**     Method      :  PitTimeStamp_ResetCounter (component TimerUnit_LDD)
*/
/*!
**     @brief
**         Resets counter. If counter is counting up then it is set to
**         zero. If counter is counting down then counter is updated to
**         the reload value.
**         The method is not available if HW doesn't allow resetting of
**         the counter.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError PitTimeStamp_ResetCounter(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  PitTimeStamp_SetClockConfiguration (component TimerUnit_LDD)
**
**     Description :
**         This method changes the clock configuration. During a clock
**         configuration change the component changes it's setting
**         immediately upon a request.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void PitTimeStamp_SetClockConfiguration(LDD_TDeviceData *DeviceDataPtr, LDD_TClockConfiguration ClockConfiguration);

/*
** ===================================================================
**     Method      :  PitTimeStamp_Interrupt (component TimerUnit_LDD)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {MQXLite RTOS Adapter} ISR function prototype */
void PitTimeStamp_Interrupt(LDD_RTOS_TISRParameter _isrParameter);

/* END PitTimeStamp. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __PitTimeStamp_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
